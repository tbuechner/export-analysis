{
    "type": "cf.cplace.platform.ChangeListener",
    "code": "/*\n*Changelistener\n*Triggering Attribute : Give Big Support\n*Updates the receiveBigSupport on change of giveBigSupport\n*Author:laxmi Udapudi\n*/\n\n\n/*Set the distinguish name for log*/\ncplace.setLogName('cl_update_receive_big _Support')\nconst DEBUG = true;\n\nconst KEY_RESULT = {\n  TYPE: 'cf.cplace.solution.okr.keyResult',\n  ATTR: {\n    TITLE: 'cf.cplace.solution.okr.title',\n    PROGRESS: 'cf.cplace.solution.okr.progress',\n    CONFIDENCELEVEL: 'cf.cplace.solution.okr.confidenceLevel',\n    GRADING_FORECAST: 'cf.cplace.solution.okr.gradingForecast',\n    PROGRESS_INDICATOR: 'cf.cplace.solution.okr.progressIndicator',\n    BIG_SUPPORT: 'cf.cplace.solution.okr.giveBigSupport',\n    RECEIVE_SUPPORT: 'cf.cplace.solution.okr.receiveBigSupport'\n  }\n}\n\nfunction main() {\n  let keyResult = changeEvent.getEntity();\n  let currentSupports = keyResult.get(KEY_RESULT.ATTR.BIG_SUPPORT);\n  let oldSupports = changeEvent.getOldValues(KEY_RESULT.ATTR.BIG_SUPPORT);\n  let addedSupports = [];\n  let removedSupports = [];\n\n  currentSupports.forEach(function (support) {\n    if (!oldSupports.contains(support)) {\n      addedSupports.push(support);\n    }\n  });\n  oldSupports.forEach(function (support) {\n    if (!currentSupports.contains(support)) {\n      removedSupports.push(support);\n    }\n  });\n\n  log('Added: ' + addedSupports);\n  log('Removed: ' + removedSupports);\n\n  if (addedSupports.length === 0 && removedSupports.length === 0) {\n    return;\n  }\n\n  addedSupports.forEach(function (support) {\n    addReference(keyResult, support);\n  });\n  removedSupports.forEach(function (support) {\n    removeReference(keyResult, support);\n  })\n}\n\nreturn main();\n\n/*\n*function checks for the duplicates and updates the receive big support \n*@params{provider,recevier}\n*/\nfunction addReference(provider, receiver) {\n  let receiverValues = receiver.get(KEY_RESULT.ATTR.RECEIVE_SUPPORT) || [];\n\n  // Avoid duplication\n  if (receiverValues.contains(provider)) {\n    return;\n  }\n\n  let newValues = [...receiverValues, provider];\n  updatePage(receiver, {\n    'cf.cplace.solution.okr.receiveBigSupport': newValues\n  })\n\n}\n\n/*\n*function removes the reference and updates the receive big support \n*@params{provider,recevier}\n*/\n\nfunction removeReference(provider, receiver) {\n  let receiverValues = receiver.get(KEY_RESULT.ATTR.RECEIVE_SUPPORT) || [];\n  let newValues = [];\n\n  receiverValues.forEach(function (element) {\n    if (element.getId() !== provider.getId()) {\n      newValues.push(element);\n    }\n  });\n\n  updatePage(receiver, {\n    'cf.cplace.solution.okr.receiveBigSupport': newValues\n  })\n}\n\n/*\n*Update the cplace page whenever there is change in attributes\n* @param {Page<T>} page\n* @param {(keyof CplaceTypes[T])[]} attributes\n*/\nfunction updatePage(page, customAttributes) {\n  let key = null;\n  for (key in customAttributes) {\n    if (customAttributes.hasOwnProperty(key)) {\n      page.registerAttributeForRefresh(key)\n    }\n  }\n  return cplace.actions().updatePage(page, {\n    customAttributes: customAttributes,\n  }\n    , {\n      setGeneratedName: true\n    }\n  );\n}\n\n/**\n* Log to cplace\n* @param {any} text\n*/\nfunction log(text) {\n  if (!DEBUG) {\n    return\n  }\n  let logOutput = (typeof text !== 'string') ? JSON.stringify(text) : text;\n\n  cplace.log(logOutput);\n}",
    "attributes": [
        "cf.cplace.solution.okr.giveBigSupport"
    ],
    "type_name": "cf.cplace.solution.okr.keyResult",
    "counter": 8
}
{
    "type": "custom_attribute",
    "code": "/// <reference path=\"../../typeDefinitions/globals.d.ts\" />\n\n/**\n * Description\n * @author \n */\n\n//--------------------------------------------------------------------------------------//\n//                                       LOG AND DEBUG                                  //\n//--------------------------------------------------------------------------------------//\n\n/**\n * Set to false to suspend logging\n * @type {Boolean}\n */\n const DEBUG = true;\n\n /**\n  * Set to false, to disable this page action\n  * @type {Boolean}\n  */\n  const ENABLED = true;\n \n  /**\n  * Get millisecond starting time of the script\n  * @type {Number}\n  */\n const START_TIME = new Date().getTime()\n \n /** @type {Number} */\n let LAST_TIME = START_TIME;\n \n /**\n  * Hint: set a declarative name for all of your logs\n  */\n  cplace.setLogName('pageaction-task-');\n\n  //--------------------------------------------------------------------------------------//\n //                                       CONFIGURATION                                  //\n //--------------------------------------------------------------------------------------//\n \n const REF_ATTRIBUTE = 'cf.cplace.solution.okr.set';\n\n // Everything older than this will be flaged als \"outdated\"\n const THRESHOLD_DAYS = 14;\n \n const ACTIONS = {\n    DEFAULT: 'DEFAULT',\n }\n //--------------------------------------------------------------------------------------//\n //                                       INITIALIZATION                                 //\n //--------------------------------------------------------------------------------------//\n \nreturn {\n    // \"checkAccess\" function will check if the button should be enabled given the current context\n    checkAccess: function() {\n        return true; // Allowed for all users\n    },\n    // \"call\" function contains the actual business logic and can optionally return an object\n    // containing a success message\n    call: function() {\n        log('Starting Low-Code button script execution');\n\n        doBusinessAction(embeddingPage)\n        \n        return {\n           message: {\n             de: 'Erfolgreich beendet',\n             en: 'Finished successfully'\n           }\n        }\n    }\n}\n\n//--------------------------------------------------------------------------------------//\n//                                       BUSINESS LOGIC                                 //\n//--------------------------------------------------------------------------------------//\n /**\n  * Do the business action\n  * \n  * @param {Page} page \n  * @returns {Object}\n  */\n  function doBusinessAction(page) {\n    let allResults = page.getIncomingPages('cf.cplace.solution.okr.progress', REF_ATTRIBUTE);\n\n    allResults.forEach(function(result) {\n       checkAndUpdatePage(result);\n    });\n    cplace.actions().refresh();\n\n    return {\n        success: true, // default is true\n        //job: jobId, //if your action starts a job and you want to show job modal\n        message: 'Outdated results have been flagged.'\n    }\n}\n\nfunction checkAndUpdatePage(page) {\n   let lastModified = page.get('cf.cplace.solution.okr.lastUpdate');\n   let now = new DateTime();\n\n   let refDate = now.minusDays(THRESHOLD_DAYS);\n\n   if (lastModified && refDate.isAfter(lastModified)) {\n       updatePage(page);\n   }\n}\n\nfunction updatePage(page) {\n   log(page.getName());\n   cplace.actions().updatePage(page, {\n       customAttributes: {\n           'cf.cplace.solution.okr.progressIndicator': '#45 outdated'\n       }\n   });\n\n   page.registerAttributeForRefresh('cf.cplace.solution.okr.progressIndicator');\n}\n\n//--------------------------------------------------------------------------------------//\n//                                       HELPER FUNCTIONS                               //\n//--------------------------------------------------------------------------------------//\n\n\n/**\n * Log to cplace\n * @param {any} text \n */\n function log(text) {\n    if (!DEBUG) {\n        return\n    }\n    let logOutput = (typeof text !== 'string') ? JSON.stringify(text) : text;\n\n    cplace.log(logOutput);\n}",
    "attributes": null,
    "type_name": null,
    "counter": 21
}
{
    "type": "custom_attribute",
    "code": "/*\n*Highchart\n*Displays the strategic priorities of different dimensions\n*/\n\n\n/***** Start configuration *****/\n\nconst PRIORITY = {\n    TYPE: 'cf.cplace.solution.okr.priority',\n    ATTR: {\n        DATE: 'cf.cplace.solution.okr.date',\n        TITLE: 'cf.cplace.solution.okr.title',\n        DIMENSION: 'cf.cplace.solution.okr.dimension',\n        STRATEGY: 'cf.cplace.solution.okr.strategyDashboard'\n    }\n}\n\nconst chartBackgroundColor = '#F2F4FA';\nconst todayPlotLineColor = '#244761';\nconst roadmapDimensions = ['Marketing', 'Sales', 'Engineering', 'Product', 'Company'];\nconst roadmapDimensionColors = ['#2364AA', '#3DA5D9', '#73BFB8', '#FEC601', '#f72585'];\nconst plotBandColorSuffix = '40';\t// alpha value in hex\nconst plotLineColor = '#ffffff';\nconst milestoneSize = 7;\n\n/***** End configuration *****/\n\nfunction generateData(pages) {\n\n    let dataObj = {\n        categories: [], plotLines: [], plotBands: [], series: createSeries(), firstDate: null,\n        lastDate: null\n    }\n    let yIndex = 0,\n        yIndexStart = 0,\n        lastRoadmapItemGroup = null;\n\n\n    // loop each roadmap dimension and roadmap item\n    roadmapDimensions.forEach(function (roadmapDimension, idx) {\n        // Prepare roadmap items for current dimension\n        let roadmapItemsByDimension = [];\n        cplace.each(pages, function (roadmapItem) {\n            if (roadmapDimension == roadmapItem.get(PRIORITY.ATTR.DIMENSION).getName()) {\n                roadmapItemsByDimension.push(roadmapItem);\n                // eval maximum axis extent\n                let date = roadmapItem.get(PRIORITY.ATTR.DATE);\n                dataObj.firstDate = (dataObj.firstDate == null || date.isBefore(dataObj.firstDate) ? date : dataObj.firstDate);\n                dataObj.lastDate = (dataObj.lastDate == null || date.isAfter(dataObj.lastDate) ? date : dataObj.lastDate);\n            }\n        });\n\n        /*\n        // quarters as categories for x-axis (if *not* using datetime)\n        let quarterDate = firstDate.withDayOfMonth(1).withMonthOfYear((((firstDate.getMonthOfYear() - 1) / 3) * 3) + 1);\n        let lastDateShown = lastDate.plusMonths(5).plusWeeks(2);\n        while (quarterDate.isBefore(lastDateShown)) {\n          categories.push(quarterDate);\n          quarterDate = quarterDate.plusMonths(3);\n        }\n        */\n\n        yIndex++;\n        yIndexStart = yIndex;\n        yIndex++;\n\n        roadmapItemsByDimension.sort(function (a, b) {\n            let dateA = Date.parse(a.get('cf.cplace.solution.okr.date'));\n            let dateB = Date.parse(b.get('cf.cplace.solution.okr.date'));\n\n            const groupA = a.get('cf.cplace.solution.okr.roadmapItemGroup');\n            const groupB = b.get('cf.cplace.solution.okr.roadmapItemGroup');\n            if (groupA != null && groupB == null) {\n                return -1;\n            }\n            if (groupA == null && groupB != null) {\n                return 1;\n            }\n            if (groupA != null && groupB != null && groupA.getId() != groupB.getId()) {\n                dateA = Date.parse(groupA.getBuiltinFeatureValue(\"createdAt\"));\n                dateB = Date.parse(groupB.getBuiltinFeatureValue(\"createdAt\"));\n            }\n\n            return dateA - dateB;\n        });\n\n        lastRoadmapItemGroup = null;\n        roadmapItemsByDimension.forEach(function (roadmapItem, idx2) {\n            let date = roadmapItem.get(PRIORITY.ATTR.DATE);\n\n            if (date) {\n                let name = roadmapItem.getName();\n                let url = roadmapItem.getUrl();\n\n                // separate item groups by a line\n                let roadmapItemGroup = roadmapItem.get('cf.cplace.solution.okr.roadmapItemGroup');\n                let group = (roadmapItemGroup != null ? roadmapItemGroup.getName() : null);\n                if ((lastRoadmapItemGroup == null && roadmapItemGroup != null && idx2 > 0)\n                    || (lastRoadmapItemGroup != null && roadmapItemGroup == null)\n                    || lastRoadmapItemGroup != null && roadmapItemGroup != null && lastRoadmapItemGroup.getId() != roadmapItemGroup.getId()) {\n                    dataObj.plotLines.push(createPlotline(yIndex));\n                    yIndex++;\n                }\n\n                /*\n                let q = 0;\n                while (q < categories.length && categories[q].isBefore(date)) {\n                  q++;\n                }\n                */\n\n                let dataItem = createDataItem(group, name, url, new Date(date), yIndex, roadmapDimensionColors[idx]);\n                dataObj.series.data.push(dataItem);\n\n                // remember last item group for pairing/separating them\n                lastRoadmapItemGroup = roadmapItemGroup;\n                yIndex++;\n            }\n        });\n\n        // group whole dimension into a band\n        if (roadmapItemsByDimension.length > 0) {\n            dataObj.plotBands.push(createPlotband(roadmapDimension, yIndexStart, yIndex, roadmapDimensionColors[idx]));\n        }\n\n    });\n    return dataObj;\n}\n\nfunction createSeries() {\n    return {\n        showInLegend: false,\n        type: 'scatter',\n        data: []\n    };\n}\n\nfunction createDataItem(group, name, url, date, y, color) {\n    return {\n        tooltip: (group != null ? group + \" - \" : \"\") + name,\n        name: name,\n        url: url,\n        x: Date.UTC(date.getFullYear(), date.getMonth(), date.getDate(), 0, 0, 0, 0),\n        y: y,\n        color: color\n    }\n}\n\nfunction createPlotline(value) {\n    return {\n        color: plotLineColor,\n        width: 1,\n        zIndex: 1,\n        value: value\n    }\n}\n\nfunction createPlotband(name, from, to, color) {\n    return {\n        from: from,\n        to: to,\n        label: {\n            useHTML: true,\n            text: \"<h4>\" + name + \"</h4>\",\n            rotation: 0,\n            x: 5,\n            y: -10,\n            textAlign: 'left'\n        },\n        color: color + plotBandColorSuffix\n    }\n}\n\nfunction main() {\n    let dataObj = generateData(pages);\n    // add some months/weeks for displaying enough space on the right for longer labels\n    let lastAxisDate = new Date(dataObj.lastDate.plusMonths(5).plusWeeks(2));\n\n    let chart = {\n        chart: {\n            type: 'xrange',\n            backgroundColor: chartBackgroundColor,\n            zoomType: 'xy'\n        },\n        title: {\n            text: ''\n        },\n        xAxis: {\n            type: 'datetime',\n            opposite: true,\n            lineColor: chartBackgroundColor,\n            tickInterval: 3 * 30 * 24 * 3600 * 1000, // 3 Months\n            startOnTick: true,\n            max: Date.UTC(lastAxisDate.getFullYear(), lastAxisDate.getMonth(), lastAxisDate.getDate(), 0, 0, 0, 0),\n            labels: {\n                useHTML: true,\n                format: '<h3 style=\"text-align:center;\">{value: %Y<br>Q%Q}</h3>',\n                distance: 20,\n                x: 50,\n                style: {\n                    color: '#234965'\n                }\n            },\n            tickLength: 5,\n            gridLineWidth: 1,\n            gridLineColor: '#ccd6eb',\n            gridLineDashStyle: 'Dash',\n            plotLines: [{\n                value: Date.now(),\n                dashStyle: 'dot',\n                width: 3,\n                color: todayPlotLineColor,\n                zIndex: 1,\n                label: {\n                    align: 'right',\n                    y: 36\n                }\n            }],\n        },\n        yAxis: {\n            title: {\n                text: ''\n            },\n            labels: {\n                enabled: false\n            },\n            reversed: true,\n            gridLineWidth: 0,\n            plotLines: dataObj.plotLines,\n            plotBands: dataObj.plotBands\n        },\n        tooltip: {\n            headerFormat: '',\n            pointFormat: '<b>{point.tooltip}</b><br/>{point.x: %d.%m.%Y}',\n            style: {\n                pointerEvents: 'auto',\n                color: '#234965'\n            }\n        },\n        plotOptions: {\n            scatter: {\n                findNearestPointBy: 'xy',\n                marker: {\n                    enabled: true,\n                    symbol: 'diamond',\n                    radius: milestoneSize\n                },\n                dataLabels: {\n                    enabled: true,\n                    allowOverlap: true,\n                    color: '#234965',\n                    style: {\n                        textOutline: 0\n                    },\n                    format: \"<a href='{point.url}'>{point.name}</a>\",\n                    align: 'left',\n                    verticalAlign: 'middle',\n                    x: milestoneSize\n                },\n            }\n        },\n        series: [dataObj.series]\n    };\n\n    return chart;\n}\n\nreturn main();",
    "attributes": null,
    "type_name": null,
    "counter": 39
}
{
    "type": "custom_attribute",
    "code": "/*\n*Highcahrt\n*Displays the organisation chart\n*/\n\ncplace.setLogName('hc_organisation_chart');\n\n\n/// <reference path=\"../../typeDefinitions/cplaceJS_type.js\" />\n/**\n * Template for Highchart\n *\n * Instructions:\n * - configure a highchart widget with a search or connected table\n * - look in this script for the following line: !!!! CHANGE FROM HERE !!!! and change your options there\n * - the main options are: BASE_ATTRIBUTE and CHART_TYPE_SELECTED\n *\n * TODO:\n * - Color Attribute\n * - builtin Attributes\n * - more charts\n * - date format for series / data points\n * - multi language\n * - Alias label for internal names\n * - sort of series\n *\n *\n *\n * @author Bastian Rang <bastian.rang@collaboration-factory.de>\n * @version 2021-08-05\n */\n\n/**\n * ======================\n * LOG AND DEBUG SETTINGS\n * ======================\n */\nconst DEBUG = false;\n\n/**\n * Hint: set a declarative name for all of your logs\n */\ncplace.setLogName(\"highchart-template\");\n\n/**\n * ===================\n * CONFIGURATION STAGE\n * ===================\n */\n\n/**\n * DO NOT CHANGE THESE CONFIGURATIONS WITHOUT STRONG REASON !!!!!\n */\nconst CHART_DEFINITION = {\n    PIE: {\n        chart: {\n            type: \"pie\",\n        },\n        isPercentageAvailable: true,\n        isStackable: false,\n        hasFloatingTitle: false,\n    },\n    SEMICIRCLE: {\n        chart: {\n            type: \"pie\",\n        },\n        plotOptions: {\n            startAngle: -90,\n            endAngle: 90,\n            center: [\"50%\", \"75%\"],\n            size: \"110%\",\n            innerSize: \"50%\",\n        },\n        isPercentageAvailable: true,\n        isStackable: false,\n        hasFloatingTitle: false,\n    },\n    BAR: {\n        chart: {\n            type: \"bar\",\n        },\n        plotOptions: {\n            colorByPoint: true,\n        },\n        isPercentageAvailable: true,\n        isStackable: true,\n        hasFloatingTitle: true,\n    },\n    COLUMN: {\n        chart: {\n            type: \"column\",\n        },\n        plotOptions: {\n            colorByPoint: true,\n        },\n        isPercentageAvailable: true,\n        isStackable: true,\n        hasFloatingTitle: true,\n    },\n};\n\n/**\n * ==================================================================================\n * !!!! CHANGE FROM HERE !!!!\n */\n\n/**\n * Optional: Show a title inside of the chart area\n */\nconst CHART_TITLE = \"\";\n\n/**\n * Define the base type of the chart:\n * - CHART_DEFINITION.PIE\n * - CHART_DEFINITION.SEMICIRCLE\n * - CHART_DEFINITION.BAR\n * - CHART_DEFINITION.COLUMN\n */\nconst CHART_TYPE_SELECTED = CHART_DEFINITION.PIE;\n\n/**\n * Define the color of a node by it's ID.\n */\nconst PAGE_COLOR_MAP = {\n    \"Company\": \"var(--color-company)\",\n    \"Engineering\": \"var(--color-engineering)\",\n    \"Product\": \"var(--color-product)\",\n    \"Marketing\": \"var(--color-marketing)\",\n    \"Sales\": \"var(--color-sales)\",\n};\n/**\n * Define colors for the chart\n */\nconst CHART_COLORS = {\n    BACKGROUND: \"var(--body-bg)\",\n    TEXT: \"var(--text-color)\",\n    SERIES: [\"#e31a1c\", \"#fdbf6f\", \"#ff7f00\", \"#6a3d9a\"],\n    CATEGORY: {\n        \"#15 green\": \"#AEDB3C\",\n        \"#25 yellow\": \"#FFBA00\",\n        \"#35 red\": \"#DB0F35\",\n        \"#45 outdated\": \"#bcbcbc\",\n    },\n};\n\n/**\n * @type {Boolean} show legend under chart\n */\nconst CHART_SHOW_LEGEND = false;\n\n/**\n * @type {Boolean} show labels on all datapoints\n */\nconst CHART_SHOW_LABELS = true;\n\n/**\n * @type {null|String} override tooltip text\n * - use {point.y} as placeholder for absolute values\n * - use {point.percentage:.1f}% as placeholder for percantage\n * - use {point.stackTotal} for sum of stack\n * - use {point.name} for name of data point\n * - use {series.name} for name of data series\n */\nconst CHART_TOOLTIP_OVERRIDE = null;\n\n/**\n * DO NOT CHANGE AFTER THIS LINE\n * ==================================================================================\n */\n\nconst CHART_POINT_FORMAT = \"{point.y}\";\n\n/**\n * ====================\n * INITIALIZATION STAGE\n * ====================\n */\nconst levelConfig = [\n    {\n        level: 0,\n        color: \"silver\",\n    },\n    {\n        level: 1,\n        color: \"#980104\",\n    },\n    {\n        level: 2,\n        color: \"#359154\",\n    },\n];\n    let nodes = [];\n    let data = [];\n    let series = [];\n/**\n * ================\n * PROCESSING STAGE\n * ================\n */\n\n\nfunction generateData(pages) {\n\n\n    pages.forEach(function (page) {\n        nodes.push(mapToDataNode(page));\n        loadChildren(page);\n    });\n  \n  \n  \n    series.push({\n        type: \"organization\",\n        name: \"\",\n        keys: [\"from\", \"to\"],\n        // Hierarchy definition\n        data: data,\n        // Styling definiton\n        levels: levelConfig,\n        // Content definiton (getting matched to \"data\" by \"id\")\n        nodes: nodes,\n    });\n\n    return series\n}\n\nfunction main() {\n    let series = generateData(pages);\n\n    if (CHART_TOOLTIP_OVERRIDE !== null) {\n        config.tooltip.pointFormat = CHART_TOOLTIP_OVERRIDE;\n    }\n\n    let config = {\n        chart: {\n            inverted: true,\n            backgroundColor: \"#f3f4fa\",\n        },\n        title: {\n            text: CHART_TITLE,\n            useHtml: true,\n            style: {\n                color: CHART_COLORS.TEXT,\n                fontSize: \"2em\",\n                fontWeight: \"bold\",\n            },\n        },\n        legend: {\n            enabled: CHART_SHOW_LEGEND,\n            layout: \"horizontal\",\n            align: \"center\",\n            verticalAlign: \"bottom\",\n            itemStyle: {\n                color: CHART_COLORS.TEXT,\n                fontWeight: \"normal\",\n            },\n        },\n        pane: {\n            size: \"100%\",\n        },\n        tooltip: false,\n        plotOptions: {\n            pie: {\n                borderWidth: 10,\n                borderColor: \"var(--body-bg)\",\n            },\n            series: {\n                showInLegend: CHART_SHOW_LEGEND,\n                dataLabels: {\n                    enabled: CHART_SHOW_LABELS,\n                    format: \"<b>{point.name}</b><br/><span><b>Set Lead: </b><span>{point.leads}</span></span>\",\n                },\n                cursor: \"default\",\n            },\n        },\n        colors: CHART_COLORS.SERIES,\n        series: series,\n    };\n\n    return config\n\n}\n\nreturn main();\n\n//--------------------------------------------------------------------------------------//\n//                                       BUSINESS FUNCTIONS                             //\n//--------------------------------------------------------------------------------------//\n\nfunction loadChildren(page) {\n    let children = page.getIncomingPages(\n        \"cf.cplace.solution.okr.organizationalUnit\",\n        \"cf.cplace.solution.okr.organizationalUnit\"\n    );\n    \n  \n    children.forEach(function (child) {\n        nodes.push(mapToDataNode(child));\n        data.push([page.getId(), child.getId()]);\n\n        // go on\n        loadChildren(child);\n    });\n}\n\nfunction mapToDataNode(page) {\n    let map = {\n        id: page.getId(),\n        name: page.getName(),\n        height: 75,\n    };\n\n    let color = PAGE_COLOR_MAP[page.getName()];\n    if (color) {\n        map.color = color;\n    }\n\n    let set = getCurrentSet(page);\n    let leads = set.get(\"cf.cplace.solution.okr.setLead\");\n    let leadNames = \"\";\n    leads.forEach(function (lead) {\n        if (leadNames) {\n            leadNames += \"<br/>\";\n        }\n        leadNames += lead.getName();\n    });\n\n    map.leads = leadNames;\n    return map;\n  \n}\n\n\n\n/**\n * ================\n * HELPER FUNCTIONS\n * ================\n */\n\nfunction getCurrentCycle(page) {\n    let search = new Search();\n    search\n        .add(Filters.type(\"cf.cplace.solution.okr.cycle\"))\n        .add(Filters.space(page.getSpace()))\n        .add(Filters.customAttribute(\"cf.cplace.solution.okr.status\").eq(\"#25 Current\"));\n\n    return search.findAllPages();\n}\n\nfunction getCurrentSet(unit) {\n    let currentCycle = getCurrentCycle(unit);\n    let result = null;\n\n    currentCycle.forEach(function (cycle) {\n        let search = new Search();\n        search\n            .add(Filters.type(\"cf.cplace.solution.okr.set\"))\n            .add(Filters.space(unit.getSpace()))\n            .add(Filters.customAttribute(\"cf.cplace.solution.okr.cycle\").references(cycle))\n            .add(Filters.customAttribute(\"cf.cplace.solution.okr.organizationalUnit\").references(unit));\n\n        let sets = search.findAllPages();\n\n        sets.forEach(function (set) {\n            result = set;\n        });\n\n        return;\n    });\n\n    return result;\n}\n/**\n * Log to cplace\n * @param {any} text\n */\nfunction log(text) {\n    if (!DEBUG) {\n        return;\n    }\n    let logOutput = typeof text !== \"string\" ? JSON.stringify(text) : text;\n\n    cplace.log(logOutput);\n}",
    "attributes": null,
    "type_name": null,
    "counter": 36
}
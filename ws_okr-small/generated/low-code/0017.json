{
    "type": "custom_attribute",
    "code": "/*\n*Highchart\n*Displays the cycle timeline\n*/\n\n\nconst CYCLE = {\n    TYPE: 'cf.cplace.solution.okr.cycle',\n    ATTR: {\n        START: 'cf.cplace.solution.okr.start',\n        END: 'cf.cplace.solution.okr.end',\n        YEAR: 'cf.cplace.solution.okr.year',\n        STATUS: 'cf.cplace.solution.okr.status'\n    }\n}\n\nconst MEETING = {\n    TYPE: 'cf.cplace.solution.okr.meeting',\n    ATTR: {\n        TITLE: 'cf.cplace.solution.okr.title',\n        MEETING_TYPE: 'cf.cplace.solution.okr.meetingType',\n        DATE: 'cf.cplace.solution.okr.date',\n        CYCLE: 'cf.cplace.solution.okr.cycle'\n    }\n}\n\n/*************INITIALIZATION************* */\nconst dataObj = { cycleNames: [], seriesCyclePhase: [], seriesInputPhase: [], seriesWorkshop: [], seriesStrategy: [] }\nconst counterArray = [];\nconst row = 0;\nconst values = [];\nconst sortedPages = []\n\nlet workshop;\nlet workshopDate;\nlet messages = {\n    inputPhase: {\n        en: 'Input Phase ',\n        de: 'Input-Phase '\n    },\n    cyclePhase: {\n        en: 'Cycle Implementation Phase ',\n        de: 'Cycle Umsetzungs-Phase '\n    },\n    workshop: {\n        en: 'Workshop ',\n        de: 'Workshop '\n    },\n    strategy: {\n        en: 'Strategy Update ',\n        de: 'Strategie Update '\n    }\n};\n\nfunction genearteData(embeddingPage) {\n    const cycle = embeddingPage;\n    const cycleName = cycle.getName();\n    const cycleStart = cycle.get(CYCLE.ATTR.START);\n    const cycleEnd = cycle.get(CYCLE.ATTR.END);\n    const lang = cplace.utils().getCurrentUser().getUserLanguage();\n    const meetings = cycle.getIncomingPages(MEETING.TYPE, MEETING.ATTR.CYCLE);\n    cplace.each(meetings, function (meeting) {\n        if (meeting.get('cf.cplace.solution.okr.meetingType') == \"Workshop\") {\n            workshop = meeting;\n        };\n    })\n\n    if (workshop) {\n        workshopDate = workshop.get(MEETING.ATTR.DATE);\n    }\n\n    if (cycleStart && cycleEnd && workshop) {\n\n        dataObj.cycleNames.push(cycleName);\n        dataObj.seriesCyclePhase.push({\n            x: cycleStart.getMillis(),\n            x2: cycleEnd.getMillis(),\n            y: row,\n            color: '#006ae5',\n            dataLabels: {\n                format: messages.cyclePhase[lang] + cycleName\n            },\n            name: messages.cyclePhase[lang] + cycleName\n        });\n        dataObj.seriesInputPhase.push({\n            x: workshopDate.minusDays(21).getMillis(),\n            x2: workshopDate.getMillis(),\n            color: '#00ffcd',\n            y: row,\n            dataLabels: {\n                format: messages.inputPhase[lang]\n            },\n            name: messages.inputPhase[lang] + cycleName\n        });\n        dataObj.seriesWorkshop.push({\n            x: workshopDate.getMillis(),\n            y: row,\n            date: cycleStart.toString(\"MMM/dd\"),\n            dataLabels: {\n                format: messages.workshop[lang]\n            },\n            color: '#151821',\n            name: messages.inputPhase[lang]\n        })\n        dataObj.seriesStrategy.push({\n            x: cycleEnd.minusDays(28).getMillis(),\n            y: row,\n            date: cycleStart.toString(\"MMM/dd\"),\n            color: '#151821',\n            dataLabels: {\n                format: messages.strategy[lang]\n            },\n            name: messages.strategy[lang]\n        })\n    }\n\n    return dataObj;\n\n}\nfunction main() {\n    const data = genearteData(embeddingPage);\n\n    const chart = {\n        chart: {\n            type: 'xrange',\n            zoomType: 'x',\n            backgroundColor: '#F2F4FA',\n        },\n        legend: {\n            enabled: false\n        },\n        title: {\n            text: ''\n        },\n        xAxis: {\n            type: 'datetime',\n            plotLines: [{\n                value: new Date().setHours(0),\n                dashStyle: 'dash',\n                width: 2,\n                zIndex: 5,\n            }],\n            lineColor: '#F2F4FA',\n            tickLength: 1,\n        },\n        yAxis: {\n            title: '',\n            labels: {\n                enabled: false\n            },\n            gridLineColor: 'rgba(255,255,255,0)',\n            lineColor: '#F2F4FA',\n            categories: data.cycleNames,\n            reversed: true,\n            max: 0\n        },\n        plotOptions: {\n            series: {\n                borderRadius: 5,\n                dataLabels: {\n                    enabled: true\n                }\n            }\n        },\n        series: [{\n            name: '',\n            data: data.seriesCyclePhase,\n            dataLabels: {\n                enabled: true\n            }\n        }, {\n            name: '',\n            data: data.seriesInputPhase,\n            dataLabels: {\n                enabled: true\n            }\n        }, {\n            type: 'scatter',\n            stickyTracking: false,\n            marker: {\n                enabled: true,\n                symbol: 'diamond',\n                lineColor: 'white',\n                lineWidth: 1,\n                radius: 13\n            },\n            data: data.seriesWorkshop\n        }, {\n            type: 'scatter',\n            stickyTracking: false,\n            marker: {\n                enabled: true,\n                symbol: 'diamond',\n                lineColor: 'white',\n                lineWidth: 1,\n                radius: 13\n            },\n            data: data.seriesStrategy\n        }],\n        tooltip: {\n            enabled: false\n        }\n    };\n    return chart\n}\n\nreturn main();",
    "attributes": null,
    "type_name": null,
    "counter": 17
}
{
    "type": "cf.cplace.platform.PageAction",
    "code": "/// <reference path=\"../typeDefinitions/globals.d.ts\" />\n\n/**\n * Description : checks the Current Cycle for the key results \n * @author \n */\n\n\n//14-14\n//--------------------------------------------------------------------------------------//\n//                                       LOG AND DEBUG                                  //\n//--------------------------------------------------------------------------------------//\n\n/**\n * Set to false to suspend logging\n * @type {Boolean}\n */\nconst DEBUG = true;\n\n/**\n * Set to false, to disable this page action\n * @type {Boolean}\n */\nconst ENABLED = true;\n\n/**\n* Get millisecond starting time of the script\n* @type {Number}\n*/\nconst START_TIME = new Date().getTime()\n\n/** @type {Number} */\nlet LAST_TIME = START_TIME;\n\n/**\n * Hint: set a declarative name for all of your logs\n */\ncplace.setLogName('pageaction-task-');\n\n//--------------------------------------------------------------------------------------//\n//                                       CONFIGURATION                                  //\n//--------------------------------------------------------------------------------------//\n\n// Everything older than this will be flaged als \"outdated\"\nconst THRESHOLD_DAYS = 14;\n\nconst ACTIONS = {\n    DEFAULT: 'DEFAULT',\n}\n//--------------------------------------------------------------------------------------//\n//                                       INITIALIZATION                                 //\n//--------------------------------------------------------------------------------------//\n\n/**\n * TODO check which action should be performed.\n * For instance if you want a toggle like archive / restore, you can define both actions in one page action easily.\n */\nconst ACTION = ACTIONS.DEFAULT;\n\nconst RESULT_MESSAGE = {\n    DEFAULT: {\n        'de': 'Aktion erfolgreich ausgef\u00fchrt',\n        'en': 'Action successfull',\n    }\n}\n\nfunction main() {\n    return { checkAccess, call }\n}\n\nfunction checkAccess() {\n    try {\n        return ENABLED ? isActionAllowed(page) : false\n    } catch (e) {\n        cplace.error(e)\n        return false;\n    }\n}\n\nfunction call() {\n    try {\n        return doBusinessAction(page)\n    } catch (e) {\n        cplace.error(e)\n        if (DEBUG) {\n            throw e\n        }\n\n        return {\n            success: false,\n            message: e\n        }\n    }\n}\n\nreturn main();\n//--------------------------------------------------------------------------------------//\n//                                       BUSINESS FUNCTIONS                             //\n//--------------------------------------------------------------------------------------//\n\n\n/**\n * Return true if the action is allowed and visible\n * @param {Page} page \n * @returns {Boolean}\n */\nfunction isActionAllowed(page) {\n    let status = page.get('cf.cplace.solution.okr.status');\n\n    return status == '#25 Current';\n}\n\n/**\n * Do the business action\n * \n * @param {Page} page \n * @returns {Object}\n */\nfunction doBusinessAction(page) {\n    timeSinceStart('start')\n\n    let allResults = page.getIncomingPages('cf.cplace.solution.okr.keyResult', 'cf.cplace.solution.okr.cycle');\n\n    allResults.forEach(function (result) {\n        log('resulting key results :'+result);\n        checkAndUpdatePage(result);\n    });\n\n    timeSinceStart('final');\n    return {\n        success: true, // default is true\n        //job: jobId, //if your action starts a job and you want to show job modal\n        message: RESULT_MESSAGE[ACTION]\n    }\n}\n\nfunction checkAndUpdatePage(page) {\n    let lastModified = page.get('cf.cplace.solution.okr.lastUpdate');\n    let now = new DateTime();\n\n    let refDate = now.minusDays(THRESHOLD_DAYS);\n\n    if (lastModified && refDate.isAfter(lastModified)) {\n        updatePage(page, {\n            'cf.cplace.solution.okr.progressIndicator': '#45 outdated'\n        });\n    }\n}\n\n\n//--------------------------------------------------------------------------------------//\n//                                       HELPER FUNCTIONS                               //\n//--------------------------------------------------------------------------------------//\n/*\n*Update the cplace page whenever there is change in attributes\n* @param {Page<T>} page\n* @param {(keyof CplaceTypes[T])[]} attributes\n*/\nfunction updatePage(page, customAttributes) {\n    let key = null;\n    for (key in customAttributes) {\n        if (customAttributes.hasOwnProperty(key)) {\n            page.registerAttributeForRefresh(key)\n        }\n    }\n    return cplace.actions().updatePage(page, {\n        customAttributes: customAttributes,\n    }\n        , {\n            setGeneratedName: true\n        }\n    );\n}\n\n/**\n * Log to cplace\n * @param {any} text \n */\nfunction log(text) {\n    if (!DEBUG) {\n        return\n    }\n    let logOutput = (typeof text !== 'string') ? JSON.stringify(text) : text;\n\n    cplace.log(logOutput);\n}\n\n\nfunction timeSinceStart(msg) {\n    if (!DEBUG) {\n        return\n    }\n    let now = new Date().getTime();\n    cplace.log([(now - START_TIME) + 'ms', (now - LAST_TIME) + 'ms', msg].join(' -- '))\n    LAST_TIME = now;\n}",
    "attributes": null,
    "type_name": "cf.cplace.solution.okr.cycle",
    "counter": 1
}
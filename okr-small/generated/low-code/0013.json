{
    "type": "cf.cplace.platform.ChangeListener",
    "code": "/*\n*Changelistener\n*Type:Keyresult\n*Description: whenever the confidencelevel of the progress is changed this changelistener updates the progressIndicator\n*Author: Laxmi udapudi\n*/\ncplace.setLogName('sync_cf_on_KR')\nconst KEY_RESULT = {\n  TYPE: 'cf.cplace.solution.okr.keyResult',\n  ATTR: {\n    TITLE: 'cf.cplace.solution.okr.title',\n    PROGRESS: 'cf.cplace.solution.okr.progress',\n    CONFIDENCELEVEL: 'cf.cplace.solution.okr.confidenceLevel',\n    GRADING_FORECAST: 'cf.cplace.solution.okr.gradingForecast',\n    PROGRESS_INDICATOR: 'cf.cplace.solution.okr.progressIndicator'\n  }\n}\nconst PROGRESS = {\n  TYPE: 'cf.cplace.solution.okr.progress',\n  ATTR: {\n    KEY_RESULT: 'cf.cplace.solution.okr.keyResult',\n    CONFIDENCELEVEL: 'cf.cplace.solution.okr.confidenceLevel',\n    GRADING_FORECAST: 'cf.cplace.solution.okr.gradingForecast',\n    PROGRESS_INDICATOR: 'cf.cplace.solution.okr.progressIndicator'\n  }\n}\n\nfunction main() {\n  let progress = changeEvent.getEntity();\n  let confidenceLevel = progress.get(PROGRESS.ATTR.CONFIDENCELEVEL);\n\n  if (isSet(confidenceLevel)) {\n    cplace.log(\"Confidence set\");\n    let indicator = getIndicator(parseFloat(confidenceLevel));\n    let setIndicator = progress.get('cf.cplace.solution.okr.progressIndicator');\n\n    if (setIndicator === indicator) {\n      return;\n    }\n\n    cplace.log(\"confidence notequal indicator\");\n    updatePage(progress, {\n      'cf.cplace.solution.okr.progressIndicator': indicator\n    })\n  } else {\n    updatePage(progress, {\n      'cf.cplace.solution.okr.progressIndicator': '#35 red'\n    })\n\n  }\n}\n\nmain()\n\nfunction getIndicator(confidenceLevel) {\n  if (confidenceLevel < 0.4) {\n    return '#35 red';\n  }\n  if (confidenceLevel < 0.7) {\n    return '#25 yellow';\n  }\n  return '#15 green';\n}\n\n// Check if a value is set\nfunction isSet(value) {\n  return !!value;\n}\n\n/*\n*Update the cplace page whenever there is change in attributes\n* @param {Page<T>} page\n* @param {(keyof CplaceTypes[T])[]} attributes\n*/\nfunction updatePage(page, customAttributes) {\n  let key = null;\n  for (key in customAttributes) {\n    if (customAttributes.hasOwnProperty(key)) {\n      page.registerAttributeForRefresh(key)\n    }\n  }\n  return cplace.actions().updatePage(page, {\n    customAttributes: customAttributes,\n  }\n    , {\n      setGeneratedName: true\n    }\n  );\n}",
    "attributes": [
        "cf.cplace.solution.okr.confidenceLevel"
    ],
    "type_name": "cf.cplace.solution.okr.progress",
    "counter": 13
}
{
    "type": "cf.cplace.platform.PageAction",
    "code": "/**\n * Raise Hands / Lower Hands action on task\n */\n\n//--------------------------------------------------------------------------------------//\n//                                       LOG AND DEBUG                                  //\n//--------------------------------------------------------------------------------------//\nconst DEBUG = false;\ncplace.setLogName('pageaction-task-raise-hands');\n\n//--------------------------------------------------------------------------------------//\n//                                       CONFIGURATION                                  //\n//--------------------------------------------------------------------------------------//\n\nconst LABEL = {\n    RAISE: {\n        'en': 'Raise Hand',\n        'de': 'Hand heben'\n    },\n    LOWER: {\n        'en': 'Lower Hand',\n        'de': 'Hand runter'\n    }\n}\n\nconst RESULT_MESSAGE = {\n    RAISE: {\n        'en': 'Hand raised',\n        'de': 'Hand gehoben'\n    },\n    LOWER: {\n        'en': 'Hand lowered',\n        'de': 'Hand runter genommen'\n    }\n}\n\nconst ICON = {\n    RAISE: 'fa-hand-stop-o',\n    LOWER: 'fa-check'\n}\n\n\nconst TASK = {\n    TYPE: 'cf.cplace.digitalBoard.task',\n    ATTR: {\n        TITLE: 'cf.cplace.digitalBoard.title',\n        DESCRIPTION: 'cf.cplace.digitalBoard.description',\n        RESPONSIBLE: 'cf.cplace.digitalBoard.responsible',\n        BOARD: 'cf.cplace.digitalBoard.board',\n        SHARED_BOARDS: 'cf.cplace.digitalBoard.shareToOtherBoards',\n        PRIORITY: 'cf.cplace.digitalBoard.priority',\n        STATUS: 'cf.cplace.digitalBoard.status',\n        IS_PRIVATE: 'cf.cplace.digitalBoard.privateTask',\n        UPDATE_PERMISSIONS: 'cf.cplace.digitalBoard.updatePermissions',\n        ESCALATE_BOARD: 'cf.cplace.digitalBoard.escalateToBoard',\n        ESCALATION_LEVEL: 'cf.cplace.digitalBoard.escalationLevel',\n    },\n    STATUS: {\n        OPEN: 'open',\n        IN_PROGRESS: 'in progress',\n        IN_REVIEW: 'in review',\n        DONE: 'done',\n        ARCHIVED: 'archived'\n    },\n    ESCALATION_LEVEL: {\n        NONE: '#15 - none',\n        HAND_RAISED: '#25 - handRaised',\n        ESCALATED: '#35 - escalated',\n    }\n}\n\n\n\nfunction checkAccess() {\n    return true;\n}\n\nfunction label() {\n    return (page.get(TASK.ATTR.ESCALATION_LEVEL) === TASK.ESCALATION_LEVEL.NONE) ?\n        LABEL.RAISE : LABEL.LOWER\n}\n\nfunction icon() {\n    return (page.get(TASK.ATTR.ESCALATION_LEVEL) === TASK.ESCALATION_LEVEL.NONE) ?\n        ICON.RAISE : ICON.LOWER\n}\n\nfunction call() {\n    return doBusinessAction(page)\n}\n\nfunction main(){\nreturn {\n    checkAccess,\n    label,\n    icon,\n    call\n}\n}\n\nreturn main();\n\n//--------------------------------------------------------------------------------------//\n//                                       BUSINESS FUNCTIONS                             //\n//--------------------------------------------------------------------------------------//\n\n/**\n * Do the business action\n * \n * @param {Page} page \n * @returns {Object}\n */\nfunction doBusinessAction(page) {\n    let result = (page.get(TASK.ATTR.ESCALATION_LEVEL) === TASK.ESCALATION_LEVEL.NONE) ?\n        raiseHand(page) : lowerHand(page)\n    return {\n        success: true, // default is true\n        //job: jobId, //if your action starts a job and you want to show job modal\n        message: result // Override the success message to be displayed to the user or provide error message.\n    }\n}\n\nfunction raiseHand(task) {\n    let customAttributes = {};\n    customAttributes[TASK.ATTR.ESCALATION_LEVEL] = TASK.ESCALATION_LEVEL.HAND_RAISED;\n    updatePage(task, customAttributes);\n    return RESULT_MESSAGE.RAISE\n}\n\nfunction lowerHand(task) {\n    let customAttributes = {};\n    customAttributes[TASK.ATTR.ESCALATION_LEVEL] = TASK.ESCALATION_LEVEL.NONE;\n    updatePage(task, customAttributes);\n    return RESULT_MESSAGE.LOWER\n}\n\n\n\n/*\n*Update the cplace page whenever there is change in attributes\n* @param {Page<T>} page\n* @param {(keyof CplaceTypes[T])[]} attributes\n*/\nfunction updatePage(page, customAttributes) {\n    let key = null;\n    for (key in customAttributes) {\n        if (customAttributes.hasOwnProperty(key)) {\n            page.registerAttributeForRefresh(key)\n        }\n    }\n    return cplace.actions().updatePage(page, {\n        customAttributes: customAttributes,\n    }\n        , {\n            setGeneratedName: true\n        }\n    );\n}\n\n\n\n//--------------------------------------------------------------------------------------//\n//                                       HELPER FUNCTIONS                               //\n//--------------------------------------------------------------------------------------//\n\n\n/**\n * Log to cplace\n * @param {any} text \n */\nfunction log(text) {\n    if (!DEBUG) {\n        return\n    }\n    let logOutput = (typeof text !== 'string') ? JSON.stringify(text) : text;\n\n    cplace.log(logOutput);\n}",
    "attributes": null,
    "type_name": "cf.cplace.solution.okr.task",
    "counter": 14
}
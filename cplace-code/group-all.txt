
######### start - content of file "group-all/ActivateHandler.java" #########

package cf.cplace.platform.frontend.handler.group;

public class ActivateHandler extends Handler {

    final Station VALID = new Line() {
        @Override
        public void next(Forwarder f) {
            f.goWithId(EditHandler.class, ga);
        }
    };

    private Group group;

    private GroupActivationMail ga;

    private Query query;

    private static final Message NO_INACTIVE_PERSONS = new Message() {
    };

    private static final Message targetLabel = new Message() {
    };

    @Override
    public void checkAccess() {
        group = Group.SCHEMA.getEntityAndCheckMayEdit(Parameters.getString("id"));
        Query groupQuery = Queries.equals(Membership.SCHEMA.prototype()._group(), group);
        Query notActive = Queries.not(Queries.equals(Membership.SCHEMA.prototype()._state(), MembershipStates.active));
        Join j = new Join(Person.SCHEMA.prototype()._id(), Membership.SCHEMA.prototype()._member().getColumn());
        query = Queries.and(groupQuery, notActive);
        query.addJoin(j);
        if (Membership.SCHEMA.countEntities(query) == 0) {
            throw new ErrorMessageException(ActivateHandler.NO_INACTIVE_PERSONS);
        }
    }

    @Override
    public Station doBusinessLogic() {
        ga = GroupActivationMail.SCHEMA.createRegisteredSessionEntity();
        ga._sender().set(SessionLocal.getUser());
        for (Membership m : Membership.SCHEMA.queryEntities(query)) {
            Principal member = m._member().get();
            if (member instanceof Person) {
                ga._persons().create((Person) member);
            }
        }
        if (ga._persons().count() == 0) {
            throw new ErrorMessageException(ActivateHandler.NO_INACTIVE_PERSONS);
        } else {
            ga._subject().set(Template.getStringSubstituteOnlyMessages(activateMailSubject()));
            ga._body().set(Template.getStringSubstituteOnlyMessages(activateMail()));
            ga._group().set(group);
        }
        return VALID;
    }

    private TemplateSubstitution activateMail() {
        return new TemplateSubstitution() {
        };
    }

    private TemplateSubstitution activateMailSubject() {
        return new TemplateSubstitution() {
        };
    }

    @Override
    public String getActionIconName() {
        return "fa-cog";
    }

    @Nonnull
    @Override
    public Modality getModality() {
        return Modality.LARGE;
    }

    @Override
    public Message getTargetLabel() {
        return targetLabel;
    }

}

######### end - content of file "group-all/ActivateHandler.java" #########

######### start - content of file "group-all/BecomeMemberHandler.java" #########

package cf.cplace.platform.frontend.handler.group;

public class BecomeMemberHandler extends Handler implements FullPageHandler {

    class ValidLine extends SubmitLine {
        @Override
        public void doNext(Forwarder f) {
            f.go(group);
        }
    }

    private static final Logger log = LoggerFactory.getLogger(BecomeMemberHandler.class);

    private static final Message requestSaved = new Message() {
    };

    private static final Message isMember = new Message() {
    };

    private static final Message applyForMembershipTargetLabel = new Message() {
    };

    private static final Message becomeMemberTargetLabel = new Message() {
    };

    private static final Message notLoggedInError = new Message() {
    };

    private static final Message cannotBecomeMemberError = new Message() {
    };

    private static final ParameterizedMessage alreadyMemberError = new ParameterizedMessage() {
    };

    final Station VALID_APPLIES = new ValidLine() {
        @Override
        public Message getConfirmationMessage() {
            return requestSaved;
        }
    };

    final Station VALID_MEMBER = new ValidLine() {
        @Override
        public Message getConfirmationMessage() {
            return isMember;
        }
    };

    protected Message errorMessage;

    final Station IN_VALID = new Line() {
        @Override
        public void next(Forwarder f) {
            f.go(group);
        }

        @Override
        public Message getErrorMessage() {
            return errorMessage;
        }
    };

    private Group group;

    private Person p;

    private GroupApplicationState canBecomeMember;

    @Override
    public void checkAccess() {
        checkLoggedIn();
        group = Group.SCHEMA.getEntityNotNull(Parameters.getString("id"));

        if (group._isTechnicalGroup().get()) {
            throw new ProtectedActionException();
        }

        canBecomeMember = group.canBecomeMember();
        if (Group.GroupApplicationState.NOT_LOGGED_IN.equals(canBecomeMember)) {
            throw new MyErrormessageException(notLoggedInError);
        }
        p = SessionLocal.getUser();
        if (Group.GroupApplicationState.YES_APPLY.equals(canBecomeMember) || Group.GroupApplicationState.YES_BECOME_MEMBER.equals(canBecomeMember)) {
            Membership existingMembership = Membership.getMembership(group, p);
            if (existingMembership != null) {
                throwAlreadyMemberException();
            } else {
                return;
            }
        } else {
            if (canBecomeMember.equals(Group.GroupApplicationState.ALREADY_MEMBER)) {
                throwAlreadyMemberException();
            } else if (canBecomeMember.equals(Group.GroupApplicationState.NOT_AUTO_APPLY_OR_BECOME_MEMBER)) {
                throw new MyErrormessageException(cannotBecomeMemberError);
            }
        }
    }

    private void throwAlreadyMemberException() {
        throw new MyErrormessageException(alreadyMemberError.setParameters(group.adapt(Linkable.class).getName()));
    }

    class MyErrormessageException extends ErrorMessageException {

        public MyErrormessageException(Message m) {
            super(m);
        }

        private static final long serialVersionUID = 1L;

        @Override
        public void go(Forwarder f) {
            f.go(group);
        }
    }

    @Override
    public Station doBusinessLogic() {
        Membership m = Membership.SCHEMA.createWritableEntity();
        m._group().set(group);
        m._member().set(p);
        if (Group.GroupApplicationState.YES_APPLY.equals(canBecomeMember)) {
            m._state().set(MembershipStates.appliesFor);
            m.persist();
            sendMails(BecomeMemberMailBuilder::buildApplyForMembershipMail);
            return VALID_APPLIES;
        } else {
            m._state().set(MembershipStates.active);
            m.persist();
            sendMails(BecomeMemberMailBuilder::buildRegisterMembershipMail);
            return VALID_MEMBER;
        }
    }

    private void sendMails(Function<BecomeMemberMailBuilder, TemplateMail> builderFunction) {
        Principal.getAllActivePersons(group._notified()).forEach(person -> sendMail(person, builderFunction));
    }

    private void sendMail(Person recepient, Function<BecomeMemberMailBuilder, TemplateMail> builderFunction) {
        TemplateMail mail = builderFunction.apply(createMailBuilder(recepient));
        try {
            PlatformComponentRegistry.INSTANCE().getMailSender().sendMail(mail);
        } catch (MailSenderException e) {
            log.error("Error sending become membership mail", e);
        }
    }

    private BecomeMemberMailBuilder createMailBuilder(Person recepient) {
        return new BecomeMemberMailBuilder()
                .withRecepient(recepient.getMailAddress())
                .withLocale(recepient.getLanguage(TenantResources.getTenantDefaultLocale()))
                .withGroupName(group.getName())
                .withGroupUrl(group.getAbsoluteUrl())
                .withUserName(p.getName())
                .withUserUrl(p.getAbsoluteUrl())
                .withPendingRequests(group.getPendingRequestsCount())
                .withActiveMembers(group.getActiveMembershipCount());
    }

    @Override
    public String getActionIconName() {
        return "fa-cog";
    }

    public abstract static class BecomeMemberAction extends Action {

        protected abstract Group getGroup();

        @Override
        public Message overrideHandlerTargetLabel() {
            return becomeMemberTargetLabel;
        }

        @Override
        protected boolean show() {
            GroupApplicationState cbm = getGroup().canBecomeMember();
            return cbm.equals(GroupApplicationState.NOT_LOGGED_IN) || cbm.equals(GroupApplicationState.YES_BECOME_MEMBER);
        }

        @Override
        public void target(Forwarder f) {
            f.goWithId(BecomeMemberHandler.class, getGroup());
        }
    }

    public abstract static class ApplyForMembershipAction extends Action {

        protected abstract Group getGroup();

        @Override
        public Message overrideHandlerTargetLabel() {
            return applyForMembershipTargetLabel;
        }

        @Override
        protected boolean show() {
            GroupApplicationState cbm = getGroup().canBecomeMember();
            return cbm.equals(GroupApplicationState.YES_APPLY);
        }

        @Override
        public void target(Forwarder f) {
            f.goWithId(BecomeMemberHandler.class, getGroup());
        }
    }
}

######### end - content of file "group-all/BecomeMemberHandler.java" #########

######### start - content of file "group-all/BecomeMemberMailBuilder.java" #########
package cf.cplace.platform.frontend.handler.group;

/**
 * Builds a {@link TemplateMail} for the use cases:
 * <ul>
 *     <li>A user self-registers for a group membership</li>
 *     <li>A user applies for a group membership</li>
 * </ul>
 */
@ParametersAreNonnullByDefault
class BecomeMemberMailBuilder {

    private final String applicationTitle;

    private String recepient;
    private Locale locale;
    private String groupName;
    private String groupUrl;
    private String userName;
    private String userUrl;
    private int pendingRequests;
    private int activeMembers;

    BecomeMemberMailBuilder() {
        this(TenantResources.INSTANCE().getTitleMessage());
    }

    BecomeMemberMailBuilder(String applicationTitle) {
        this.applicationTitle = applicationTitle;
    }

    @Nonnull
    BecomeMemberMailBuilder withRecepient(String recepient) {
        this.recepient = recepient;
        return this;
    }

    @Nonnull
    BecomeMemberMailBuilder withLocale(Locale locale) {
        this.locale = locale;
        return this;
    }

    @Nonnull
    BecomeMemberMailBuilder withGroupName(String groupName) {
        this.groupName = groupName;
        return this;
    }

    @Nonnull
    BecomeMemberMailBuilder withGroupUrl(String groupUrl) {
        this.groupUrl = groupUrl;
        return this;
    }

    @Nonnull
    BecomeMemberMailBuilder withUserName(String userName) {
        this.userName = userName;
        return this;
    }

    @Nonnull
    BecomeMemberMailBuilder withUserUrl(String userUrl) {
        this.userUrl = userUrl;
        return this;
    }

    @Nonnull
    BecomeMemberMailBuilder withPendingRequests(int pendingRequests) {
        this.pendingRequests = pendingRequests;
        return this;
    }

    @Nonnull
    public BecomeMemberMailBuilder withActiveMembers(int activeMembers) {
        this.activeMembers = activeMembers;
        return this;
    }

    @Nonnull
    TemplateMail buildApplyForMembershipMail() {
        return getGeneralBuilder()
                .withSubjectTemplatePath("cf/cplace/platform/handler/group/templates/applyForMembershipMailSubject.txt")
                .withBodyTemplatePath("cf/cplace/platform/handler/group/templates/applyForMembershipMailContent.html")
                .build();
    }

    @Nonnull
    TemplateMail buildRegisterMembershipMail() {
        return getGeneralBuilder()
                .withSubjectTemplatePath("cf/cplace/platform/handler/group/templates/registerMembershipMailSubject.txt")
                .withBodyTemplatePath("cf/cplace/platform/handler/group/templates/registerMembershipMailContent.html")
                .build();
    }

    @Nonnull
    private TemplateMail.TemplateMailBuilder getGeneralBuilder() {
        return new TemplateMail.TemplateMailBuilder()
                .withRecipients(ImmutableSet.of(Preconditions.checkNotNull(recepient, "recepient must not be null")))
                .withLocale(Preconditions.checkNotNull(locale, "locale must not be null"))
                .withContext(getContext());
    }

    @Nonnull
    private Map<String, Object> getContext() {
        Map<String, Object> context = new HashMap<>();
        context.put("application_title", Preconditions.checkNotNull(applicationTitle, "applicationTitle must not be null"));
        context.put("group_name", Preconditions.checkNotNull(groupName, "groupName must not be null"));
        context.put("group_url", Preconditions.checkNotNull(groupUrl, "groupUrl must not be null"));
        context.put("user_name", Preconditions.checkNotNull(userName, "userName must not be null"));
        context.put("user_url", Preconditions.checkNotNull(userUrl, "userUrl must not be null"));
        context.put("pending_requests", pendingRequests);
        context.put("active_members", activeMembers);
        return context;
    }
}

######### end - content of file "group-all/BecomeMemberMailBuilder.java" #########

######### start - content of file "group-all/CancelMembershipHandler.java" #########

package cf.cplace.platform.frontend.handler.group;

public class CancelMembershipHandler extends Handler implements FullPageHandler {

    private static final Message successMessage = new Message() {
    };

    private static final Message targetLabel = new Message() {
    };

    final Station VALID = new SubmitLine() {
        @Override
        public void doNext(Forwarder f) {
            f.go(group);
        }

        @Override
        public Message getConfirmationMessage() {
            return successMessage;
        }
    };

    private Group group;

    private Person p;

    private Membership m;

    @Override
    public void checkAccess() {
        group = Group.SCHEMA.getEntityNotNull(Parameters.getString("id"));
        p = checkLoggedIn();
        m = Membership.getMembership(group, p);

        if (m == null) {
            throw new ProtectedActionException();
        }

        if (group._isTechnicalGroup().get()) {
            throw new ProtectedActionException("Members are not allowed to manually leave a technical group");
        }

        if (Principal.sessionUserMatchesOneOfThese(group._administrators())) {
            // If the user is a group admin, we need to check whether removing him from the group would also remove him from the group admins,
            // which would not be allowed for the last admin, and may be unwanted otherwise.
            // For now, we just forbid it completely.
            throw new ProtectedActionException("A group admin cannot simply cancel its membership.");
        }
    }

    @Override
    public Station doBusinessLogic() {
        m.remove();
        return VALID;
    }

    @Override
    public Message getTargetLabel() {
        return targetLabel;
    }

    public abstract static class CancelMembershipAction extends Action {

        protected abstract Group getGroup();

        @Override
        public void target(Forwarder f) {
            f.goWithId(CancelMembershipHandler.class, getGroup());
        }
    }
}

######### end - content of file "group-all/CancelMembershipHandler.java" #########

######### start - content of file "group-all/CloneHandler.java" #########

package cf.cplace.platform.frontend.handler.group;

public class CloneHandler extends Handler implements FullPageHandler {

    private static final Message targetLabel = new Message() {
    };

    private static final Message successMessage = new Message() {
    };

    private static final ParameterizedMessage cloneName = new ParameterizedMessage() {
    };

    Line NEXT = new Line() {
        @Override
        public void next(Forwarder f) {
            f.go(newGroup);
        }

        @Override
        public Message getConfirmationMessage() {
            return successMessage;
        }
    };

    private Group oldGroup;

    private Group newGroup;

    @Override
    public void checkAccess() {
        if (!GlobalPermissions.mayCreateGroup()) {
            throw new ProtectedActionException();
        }

        oldGroup = Group.SCHEMA.getEntityAndCheckMayEdit(Parameters.getString("id"));

        if (oldGroup._isTechnicalGroup().get()) {
            throw new ProtectedActionException();
        }
    }

    @Override
    public Station doBusinessLogic() {
        newGroup = Group.SCHEMA.createWritableEntity();
        newGroup.applyForAllButExclude(oldGroup,
                oldGroup._membershipsForVersioning(),
                oldGroup._memberships(),
                oldGroup._pageEditors(),
                oldGroup._pageReaders(),
                oldGroup._typeEditors(),
                oldGroup._typeReaders(),
                oldGroup._spaceAdmins(),
                oldGroup._spaceLayouters(),
                oldGroup._spaceEditors(),
                oldGroup._spaceReaders(),
                oldGroup._emailSentTo(),
                oldGroup._batchJobs());
        String name = oldGroup.adapt(Linkable.class).getName();
        String newName = cloneName.setParameters(name).get();
        newGroup.setValueOfNameProperty(newName);
        int count = 2;
        while (newGroup.getNamePropertyForQueries().preventWrite()) {
            newGroup.setValueOfNameProperty(newName + " - " + count++);
        }
        newGroup.persist();

        for (Membership mOld : oldGroup._memberships().getAssets()) {
            Membership m = Membership.SCHEMA.createWritableEntity();
            m._group().set(newGroup);
            m._state().set(MembershipStates.active);
            m._member().set(mOld._member().get());
            m.persist();
        }

        return NEXT;
    }

    @Override
    public String getActionIconName() {
        return "fa-clone";
    }

    @Override
    public Message getTargetLabel() {
        return targetLabel;
    }
}

######### end - content of file "group-all/CloneHandler.java" #########

######### start - content of file "group-all/DeleteHandler.java" #########

package cf.cplace.platform.frontend.handler.group;

public class DeleteHandler extends Handler {

    private static final Message targetLabel = new Message() {
    };

    private static final Message successMessage = new Message() {
    };

    final Station VALID = new JsonPage() {
        @Override
        public void putSubstitutions(Template template) {
            template.put("submitUrl", PrintSubstitution.printing(Escaping.html, () -> Forwarder.getFullUrl(SubmitDeleteHandler.class, group)));
            template.put("errorMessage", PrintSubstitution.printing(() -> errorMessage == null ? "" : errorMessage.get()));
        }

        @Override
        public Group getScopeObject() {
            return group;
        }
    };

    private Group group;

    private Message errorMessage;

    @Override
    public void checkAccess() {
        group = Group.SCHEMA.getEntityNotNull(Parameters.getString("id"));

        if (group._isTechnicalGroup().get()) {
            throw new ProtectedActionException();
        }

        checkMayRemove(group);
    }

    @Override
    public Station doBusinessLogic() {
        errorMessage = group.canBeDeleted();
        return VALID;
    }

    @Override
    public String getActionIconName() {
        return "fa-trash";
    }

    @Override
    public Message getTargetLabel() {
        return targetLabel;
    }
}

######### end - content of file "group-all/DeleteHandler.java" #########

######### start - content of file "group-all/EditNewHandler.java" #########

package cf.cplace.platform.frontend.handler.group;

public class EditNewHandler extends Handler {

    private Group group;

    final Station SHOW = new JsonPage() {
        @Override
        public void putSubstitutions(Template template) {
            template.put("submitUrl", PrintSubstitution.printing(Escaping.htmlAttribute, () -> Forwarder.getFullUrl(SubmitNewHandler.class, group)));
        }

        @Override
        public Group getScopeObject() {
            return group;
        }
    };

    @Override
    public void checkAccess() {
        String id = Parameters.getString("id");
        group = Group.SCHEMA.getEntityAndCheckMayEdit(id);
        checkIsWritableCopy(group);
    }

    @Override
    public Station doBusinessLogic() {
        return SHOW;
    }
}

######### end - content of file "group-all/EditNewHandler.java" #########

######### start - content of file "group-all/GroupsSubstitutions.java" #########

package cf.cplace.platform.frontend.handler.group;

public abstract class GroupsSubstitutions extends SubstitutionGenerator {

    /**
     * might be a {@link SystemGroup}!
     */
    protected abstract Principal getCurrent();

    @Override
    public void putSubstitutions(Template template) {
        template.put("activeMembers", PrintSubstitution.printing(() -> {
            Principal current = getCurrent();
            if (current instanceof Group) {
                return Integer.toString(((Group) current).getActiveMembershipCount());
            } else {
                return "";
            }
        }));
        template.put("pendingRequests", PrintSubstitution.printing(() -> {
            Principal current = getCurrent();
            if (current instanceof Group) {
                return Integer.toString(((Group) current).getPendingRequestsCount());
            } else {
                return "";
            }
        }));
    }
}

######### end - content of file "group-all/GroupsSubstitutions.java" #########

######### start - content of file "group-all/GroupsTableButtonsHandler.java" #########

package cf.cplace.platform.frontend.handler.group;

public class GroupsTableButtonsHandler extends AbstractButtonsHandler {

    @Override
    protected void doDoBusinessLogic() {
        buttons.add(TableButton.modalButton("create-new-button",
                Forwarder.getFullUrl(NewHandler.class),
                "fa-plus",
                NewHandler.targetLabel,
                false,
                TableButton.ButtonType.PRIMARY)
        );
    }
}

######### end - content of file "group-all/GroupsTableButtonsHandler.java" #########

######### start - content of file "group-all/LoadGroupChildrenHandler.java" #########
package cf.cplace.platform.frontend.handler.group;

public class LoadGroupChildrenHandler extends Handler {

    final Station SHOW = new JsonPage() {
        @Override
        public void putSubstitutions(Template template) {
            template.put("membershipsAreVisible", ConditionalSubstitution.testing(() -> {
                if (group.getEntityPermissions().mayEdit()) {
                    return true;
                } else if (group._membershipVisibility().isEquals(MembershipVisibility.thisGroup)) {
                    return group.isActiveMemberInThisGroup(SessionLocal.getUser());
                } else {
                    return true;
                }
            }));
            template.put("children", SimpleListSubstitution.forItems(() ->
                    group.getActiveMembersSortedByNameIgnoringMembershipReadAccess()));
        }
    };

    Group group;

    @Override
    protected void checkAccess() {
        group = Group.SCHEMA.getEntityNotNull(Parameters.getString("id"));
    }

    @Override
    protected Station doBusinessLogic() {
        return SHOW;
    }
}

######### end - content of file "group-all/LoadGroupChildrenHandler.java" #########

######### start - content of file "group-all/NewHandler.java" #########

package cf.cplace.platform.frontend.handler.group;

public class NewHandler extends Handler {

    static final Message targetLabel = new Message() {
    };

    private Group group;

    private String[] tags;

    final Station EDIT = new Line() {
        @Override
        public void next(Forwarder f) {
            f.goWithId(EditNewHandler.class, group);
        }
    };

    @Override
    public void checkAccess() {
        tags = Parameters.getStrings(Handler.PARAMETER_TAG);
        GlobalPermissions.checkMayCreateGroup();
    }

    @Override
    public Station doBusinessLogic() {
        group = Group.SCHEMA.createRegisteredWritableEntity();
        if (tags != null) {
            for (String tag : tags) {
                group.adapt(Taggable.class).assignTag(tag);
            }
        }
        Person current = SessionLocal.getUser();
        if (current != null) {
            group._administrators().create(current);
        }
        return EDIT;
    }

    @Override
    public Message getTargetLabel() {
        return targetLabel;
    }

}

######### end - content of file "group-all/NewHandler.java" #########

######### start - content of file "group-all/ShowAdditionalIncomingGroupPermissionReferencesExtension.java" #########
package cf.cplace.platform.frontend.handler.group;

@CplaceApi
@IgnoreTemplateSubstitutionTestFailure("No concrete subclass in the platform")
public abstract class ShowAdditionalIncomingGroupPermissionReferencesExtension extends PluginExtension {
    public TemplateSubstitution content(final Group group){
        return new TemplateSubstitution() {
            @Override
            public void specifyTemplate(TemplateFinder tf) {
                tf.use(ShowAdditionalIncomingGroupPermissionReferencesExtension.this);
            }

            @Override
            public Object getScopeObject() {
                return group;
            }
        };
    }
}

######### end - content of file "group-all/ShowAdditionalIncomingGroupPermissionReferencesExtension.java" #########

######### start - content of file "group-all/SubmitDeleteHandler.java" #########

package cf.cplace.platform.frontend.handler.group;

public class SubmitDeleteHandler extends Handler {

    private static final Message successMessage = new Message() {
    };

    final Station VALID = new JsonSuccessStation() {
        @Override
        public Message getConfirmationMessage() {
            return successMessage;
        }

        @Override
        protected String getTargetUrl() {
            return Forwarder.getFullUrl(GroupsHandler.class);
        }
    };

    Group group;

    String gotoLocation;

    @Override
    public void checkAccess() {
        group = Group.SCHEMA.getEntityAndCheckMayRemove(Parameters.getString("id"));
    }

    @Override
    public Station doBusinessLogic() {
        group.remove();
        return VALID;
    }
}

######### end - content of file "group-all/SubmitDeleteHandler.java" #########

######### start - content of file "group-all/SubmitNewHandler.java" #########

package cf.cplace.platform.frontend.handler.group;

public class SubmitNewHandler extends Handler implements PostOnlyHandler {

    Group group;

    final Station VALID = new JsonSuccessStation() {
        @Override
        protected String getTargetUrl() {
            return group.getUrl();
        }

        @Override
        protected Message getConfirmationMessage() {
            return SubmitLine.confirmationMessage;
        }
    };

    final Station INVALID = new Line() {
        @Override
        public void next(Forwarder f) {
            f.goWithId(EditNewHandler.class, group, JsonPage.ERROR_PARAMETER);
        }
    };

    @Override
    public void checkAccess() {
        group = Group.SCHEMA.getEntityAndCheckMayEdit(Parameters.getString("id"));
        checkIsWritableCopy(group);
    }

    @Override
    public Station doBusinessLogic() {
        group.applyParameters();
        if (group.isUiSubmitValidAndNotModifiedAndGenerateErrorMessagesIfNot()) {
            group.persist();
            return VALID;
        } else {
            return INVALID;
        }
    }
}

######### end - content of file "group-all/SubmitNewHandler.java" #########

######### start - content of file "group-all/ViewHandler.java" #########

package cf.cplace.platform.frontend.handler.group;

public class ViewHandler extends Handler implements FullPageHandler, EntityHandler, TitleAndHeadingProvider, ShowTagsAndModificationDate {
    private static final Message targetLabel = new Message() {
    };

    private Group group;
    private boolean showAllMemberships;

    final Station SHOW = new MainPage() {
        @Override
        public Group getScopeObject() {
            return group;
        }

        @Override
        protected void putContentBodySubstitutions(Template template) {
            template.put("showAllMemberships", ConditionalSubstitution.testing(() -> showAllMemberships));
        }
    };

    @Override
    public void checkAccess() {
        group = Group.SCHEMA.getEntityNotNull(Parameters.getString("id"));
    }

    @Override
    public Station doBusinessLogic() {
        showAllMemberships = Parameters.getBoolean(ObjectFunctions.SHOW_ALL_MEMBERSHIPS_PARAM);
        return SHOW;
    }

    @Override
    public Entity getEntity() {
        return group;
    }

    @Override
    public Message getTargetLabel() {
        return targetLabel;
    }

    @Nullable
    @Override
    public String getActionIconName() {
        return "cf-master-detail";
    }

    @Override
    public Message getTitleAndHeading() {
        return Message.dynamicHtmlUnsafeMessage(FunctionsHelper.proxy("titleAndHeading", group.getNamePropertyForQueries()));
    }
}

######### end - content of file "group-all/ViewHandler.java" #########

######### start - content of file "group-all/activate/activateMail.htm" #########
$(hello)$ $personName$,

$(text_1)$ $groupName$ $(text_2)$

$(text_3)$

$groupUrl$

######### end - content of file "group-all/activate/activateMail.htm" #########

######### start - content of file "group-all/activate/activateMailSubject.htm" #########
$(subject)$ $groupName$
######### end - content of file "group-all/activate/activateMailSubject.htm" #########

######### start - content of file "group-all/delete.htm" #########
<form method="post" action="$submitUrl$" class="tricia-edit-form modal-form form-horizontal" cplace-form-provider>
    $[defaultDialogHeader()$
        <h1>$(delete)$</h1>
    $defaultDialogHeader]$
    <div class="modal-body alert-danger">
        <fieldset>
            <p>
            	$[errorMessage$
					<strong>$errorMessage$</strong>
            	$]errorMessage[$
	                <strong>$(delete_confirmation)$</strong>
            	$errorMessage]$
            </p>
    </fieldset>
    </div>
    <div class="modal-footer">
    	$[!errorMessage$
			<a href="#" class="btn btn-primary" cplace-modal-form-submit>$(delete)$</a>
    	$errorMessage]$
        <a href="#" class="btn btn-default" data-dismiss="modal">$(cancel)$</a>
    </div>
</form>

######### end - content of file "group-all/delete.htm" #########

######### start - content of file "group-all/editNew.htm" #########
<form method="post" action="$submitUrl$" class="tricia-edit-form modal-form form-horizontal" cplace-form-provider>
    $[defaultDialogHeader()$
        <h1>$(title)$</h1>
    $defaultDialogHeader]$
    <div class="modal-body">
        $messages()$
        $this.name.edit()$
        $this.tagsDummyProperty.edit()$
        $this.applicationState.edit()$
        $this.notified.edit()$
        $this.administrators.edit()$
        $this.membershipVisibility.edit()$
        $this.allowMembersToSendMails.edit()$
    </div>
    $defaultDialogButtonBar(submit="save",cancel="cancel")$
</form>

######### end - content of file "group-all/editNew.htm" #########

######### start - content of file "group-all/loadGroupChildren.htm" #########
<div>
    $[!membershipsAreVisible$
        $(memberships_are_not_visible)$
    $]membershipsAreVisible[$
        $[children c$
            <div>
                $c.link(expandable)$
            </div>
        $children]$
    $membershipsAreVisible]$
</div>

######### end - content of file "group-all/loadGroupChildren.htm" #########

######### start - content of file "group-all/overview/DefaultActionsAndViews.java" #########

package cf.cplace.platform.frontend.handler.group.overview;

public class DefaultActionsAndViews implements TargetProvider {
    @CplaceInternal
    public static final Message overviewTitle = new Message() {
    };

    final View USERS = new View() {

        @Nonnull
        @Override
        public String getId() {
            return "cf-cplace-platform-users";
        }

        @Override
        public void target(Forwarder f) {
            f.go(UsersHandler.class);
        }
    };

    final View ALL_GROUPS = new View() {

        @Nonnull
        @Override
        public String getId() {
            return "cf-cplace-platform-all-groups";
        }

        @Override
        public void target(Forwarder f) {
            f.go(GroupsHandler.class);
        }
    };

    final View MATRIX = new View() {

        @Nonnull
        @Override
        public String getId() {
            return "cf-cplace-platform-matrix";
        }

        @Override
        public void target(Forwarder f) {
            f.go(ViewHandler.class);
        }
    };

    final View GROUP_IN_GROUP_MATRIX = new View() {

        @Nonnull
        @Override
        public String getId() {
            return "cf-cplace-platform-group-vs-group-matrix";
        }

        @Override
        public void target(Forwarder f) {
            f.go(cf.cplace.platform.frontend.handler.group.overview.groupInGroupMatrix.ViewHandler.class);
        }
    };

    final Action IMPORT_MATRIX = new Action() {

        @Nonnull
        @Override
        public String getId() {
            return "cf-cplace-platform-import-matrix";
        }

        @Override
        public void target(Forwarder f) {
            f.go(ImportFromExcelHandler.class);
        }
    };

    final Action EXPORT_MATRIX = new Action() {

        @Nonnull
        @Override
        public String getId() {
            return "cf-cplace-platform-export-matrix";
        }

        @Override
        public void target(Forwarder f) {
            f.go(Export2ExcelHandler.class);
        }
    };

}

######### end - content of file "group-all/overview/DefaultActionsAndViews.java" #########

######### start - content of file "group-all/overview/GroupsHandler.java" #########

package cf.cplace.platform.frontend.handler.group.overview;

@CplaceApi
public class GroupsHandler extends Handler implements FullPageHandler, TitleAndHeadingProvider, HistoryEntryNameProvider {

    public static final Message targetLabel = new Message() {
    };

    CustomSearchResultTable table;

    final Station SHOW = new MainPage() {
        @Override
        public TargetProvider getViewsProvider() {
            return new DefaultActionsAndViews();
        }

        @SuppressWarnings("Convert2MethodRef")
        @Override
        protected void putContentBodySubstitutions(Template template) {
            template.put("systemGroups", SimpleListSubstitution.forItems(() -> SystemGroup.SCHEMA.getEntities()));
            template.put("table", PrintSubstitution.printing(Escaping.none, () -> Template.getString(table)));
            template.put("groupTypeUrl", PrintSubstitution.printing(Escaping.htmlAttribute, () -> Forwarder.getFullUrl(SettingsHandler.class, Group.getGroupTypeDefinition())));
        }
    };

    @Override
    protected void checkAccess() {
        checkLoggedIn();
    }

    @Override
    public Station doBusinessLogic() {
        table = new CustomSearchResultTable(new FilterGroupsSpecificationHandler());
        return SHOW;
    }

    @Override
    public Message getHistoryEntryName() {
        return targetLabel;
    }

    @Override
    public Message getTargetLabel() {
        return targetLabel;
    }

    @Override
    public Message getTitleAndHeading() {
        return DefaultActionsAndViews.overviewTitle;
    }

    @Nullable
    @Override
    public String getActionIconName() {
        return "fa-users";
    }
}

######### end - content of file "group-all/overview/GroupsHandler.java" #########

######### start - content of file "group-all/overview/UsersHandler.java" #########
package cf.cplace.platform.frontend.handler.group.overview;

@CplaceApi
public class UsersHandler extends Handler implements FullPageHandler, TitleAndHeadingProvider, HistoryEntryNameProvider {

    public static final Message targetLabel = new Message() {
    };

    final Station SHOW = new MainPage() {
        @Override
        public TargetProvider getViewsProvider() {
            return new DefaultActionsAndViews();
        }

        @Override
        protected void putContentBodySubstitutions(Template template) {
            template.put("searchUsersUrl", PrintSubstitution.printing(Escaping.htmlAttribute, () -> {
                Search search = new Search();
                search.add(Filters.entityClass(Person.class));
                return Forwarder.getFullUrl(SearchHandler.class, new NameValue(SearchHandler.PARAMETER_SEARCH_AS_JSON, search.serializeAsJson()));
            }));
            template.put("userTypeUrl", PrintSubstitution.printing(Escaping.htmlAttribute, () ->
                    Forwarder.getFullUrl(SettingsHandler.class, Person.getUserTypeDefinition())));
            template.put("newUserUrl", PrintSubstitution.printing(Escaping.htmlAttribute, () ->
                    Forwarder.getFullUrl(NewHandler.class)));
            template.put("addUserActionExtensions", new SimpleListSubstitution<Action>() {
                @Override
                protected Iterable<Action> getItems() {
                    return AddUserActionExtension.getAvailableActions();
                }

                @Override
                protected void putAdditionalSubstitutions(Template template) {
                    template.put("action", PrintSubstitution.printing(Escaping.none, () -> {
                        final ActionAndHandler actionAndHandler = new ActionAndHandler(getCurrentItem());
                        return FunctionsHelper.proxy("action", actionAndHandler, new NameValue("defaultClasses", "btn btn-primary"));
                    }));
                }
            });
            template.put("table", PrintSubstitution.printing(Escaping.none, () -> Template.getString(table)));
        }
    };

    CustomSearchResultTable table;

    @Override
    protected void checkAccess() {
        checkLoggedIn();
    }

    @Override
    public Station doBusinessLogic() {
        table = new CustomSearchResultTable(new FilterUsersSpecificationHandler());
        return SHOW;
    }

    @Override
    public Message getHistoryEntryName() {
        return targetLabel;
    }

    @Override
    public Message getTargetLabel() {
        return targetLabel;
    }

    @Override
    public Message getTitleAndHeading() {
        return DefaultActionsAndViews.overviewTitle;
    }

    @Nullable
    @Override
    public String getActionIconName() {
        return "fa-user";
    }
}

######### end - content of file "group-all/overview/UsersHandler.java" #########

######### start - content of file "group-all/overview/groupInGroupMatrix/CandidateGroupAndGroupSearch.java" #########

package cf.cplace.platform.frontend.handler.group.overview.groupInGroupMatrix;

/**
 * Search to be utilized to find groups and group memberships of groups according to filters set in the group vs group matrix.
 */
@ParametersAreNonnullByDefault
public class CandidateGroupAndGroupSearch {

    private JSONObject nestedGroupFilters;
    private JSONObject groupFilters;

    public CandidateGroupAndGroupSearch(GroupInGroupMatrixFilters groupInGroupMatrixFilters) {
        this(groupInGroupMatrixFilters.getNestedGroupFilters(), groupInGroupMatrixFilters.getGroupFilters());
    }

    public CandidateGroupAndGroupSearch(@Nullable String nestedGroupFilters, @Nullable String groupFilters) {
        if (nestedGroupFilters != null) {
            this.nestedGroupFilters = new JSONObject(nestedGroupFilters);
        }
        if (groupFilters != null) {
            this.groupFilters = new JSONObject(groupFilters);
        }
    }

    /**
     * Finds groups according to filters set in the group vs group matrix.
     * @return resulting users, groups and group memberships of the users stored in a {@link CandidateGroupsAndGroups}.
     */
    @Nonnull
    public CandidateGroupsAndGroups getNestedGroupsAndGroups() {
        CandidateGroupsAndGroups candidateGroupsResult = new CandidateGroupSearch(groupFilters).getCandidateGroups();
        CandidateGroupsAndGroups candidateNestedGroupsResult = new CandidateGroupSearch(nestedGroupFilters).getCandidateGroups();
        return new CandidateGroupsAndGroups(candidateNestedGroupsResult.getGroupIds(), candidateGroupsResult.getGroupIds());
    }
}

######### end - content of file "group-all/overview/groupInGroupMatrix/CandidateGroupAndGroupSearch.java" #########

######### start - content of file "group-all/overview/groupInGroupMatrix/CandidateGroupSearch.java" #########

package cf.cplace.platform.frontend.handler.group.overview.groupInGroupMatrix;

/**
 * Search to be utilized to find groups according to filters set in the group vs group matrix.
 */
@ParametersAreNonnullByDefault
public class CandidateGroupSearch {

    private JSONObject groupFilters;

    public CandidateGroupSearch() {
    }

    public CandidateGroupSearch(JSONObject groupFilters) {
        this.groupFilters = groupFilters;
    }

    /**
     * Finds groups according to filters set in the group vs group matrix.
     *
     * @return resulting groups stored in a set.
     */
    public Set<String> findAll() {
        Search search = getGroupSearch();
        return doWithElasticSearch(search);
    }

    /**
     * Finds groups according to filters set in the group vs group matrix.
     *
     * @return resulting groups stored in a {@link CandidateGroupsAndGroups}.
     */
    public CandidateGroupsAndGroups getCandidateGroups() {
        return new CandidateGroupsAndGroups(Collections.emptySet(), findAll());
    }

    @Nonnull
    private Search getGroupSearch() {
        Search search = new Search();
        search.add(Filters.entityClass(Group.class));
        FlexiComponentUtils.applyColumnFilters(groupFilters, search);
        search.addAlphabeticalSort();

        // membership visibility filter
        final Set<String> accessTokens = SessionLocal.getAccessTokens();
        final Group group = Group.SCHEMA.prototype();
        final SearchFilter groupVisibleFilter = Filters.and(
                Filters.builtinAttribute(group._membershipVisibility().getName(), Operator.equals, MembershipVisibility.thisGroup.getKey()),
                Filters.or(
                        Filters.builtinAttributeIn(group._administrators().getName(), accessTokens),
                        Filters.builtinAttributeIn(group._id().getName(), accessTokens)
                )
        );

        final SearchFilter allVisible = Filters.or(
                Filters.builtinAttribute(group._membershipVisibility().getName(), Operator.equals, MembershipVisibility.allUsers.getKey()),
                Filters.builtinAttribute(group._membershipVisibility().getName(), Operator.equals, MembershipVisibility.everybody.getKey())
        );
        search.add(Filters.or(allVisible, groupVisibleFilter));
        return search;
    }

    @Nonnull
    private Set<String> doWithElasticSearch(Search search) {
        Set<String> candidateGroups = Sets.newLinkedHashSet();
        search.findAllUids().forEach(uid -> candidateGroups.add(Schema.id(uid)));
        return candidateGroups;
    }
}

######### end - content of file "group-all/overview/groupInGroupMatrix/CandidateGroupSearch.java" #########

######### start - content of file "group-all/overview/groupInGroupMatrix/CandidateGroupsAndGroups.java" #########

package cf.cplace.platform.frontend.handler.group.overview.groupInGroupMatrix;

/**
 * Generic result object for searches (e.g.  {@link CandidateGroupSearch}, {@link CandidateGroupAndGroupSearch}) utilized in the context of the group vs group matrix.
 */
@ParametersAreNonnullByDefault
public class CandidateGroupsAndGroups {
    private final Set<String> nestedGroupIds;
    private final Set<String> groupIds;

    public CandidateGroupsAndGroups(Set<String> nestedGroupIds, Set<String> groupIds) {
        this.nestedGroupIds = nestedGroupIds;
        this.groupIds = groupIds;
    }

    public Set<String> getNestedGroupIds() {
        return nestedGroupIds;
    }

    public Set<String> getGroupIds() {
        return groupIds;
    }

}

######### end - content of file "group-all/overview/groupInGroupMatrix/CandidateGroupsAndGroups.java" #########

######### start - content of file "group-all/overview/groupInGroupMatrix/FilterGroupsSpecificationHandler.java" #########

package cf.cplace.platform.frontend.handler.group.overview.groupInGroupMatrix;

/**
 * Represents the filter dialog on the group dimension in the group vs group matrix.
 * <p>
 */
public class FilterGroupsSpecificationHandler extends TableSpecificationHandler {

    protected void buildSearch() {
        search = new Search();
        search.add(Filters.space(PersonSpace.getPersonSpace()));
        search.add(Filters.type(Group.getGroupTypeDefinition()));
    }

    @Override
    public boolean showActions() {
        return GlobalPermissions.mayEditAllTypes();
    }

    public FilterGroupsSpecificationHandler() {
        buildSearch();
    }

    @Override
    public String getEditNewUrl() {
        return Forwarder.getFullUrl(NewHandler.class);
    }

    @Override
    public boolean isAllowedToCreateNewPage() {
        return false;
    }

    @Override
    public void checkAccess() {
        columnNamesToBeDisplayed.addAll(getDefaultColumnNamesIfNoUserConfig());
        availableColumnNames.addAll(search.getCustomAttributeNames());
        availableColumnNames.addAll(search.getAvailableBuiltinAttributeNamesWithoutDummyAttributes());
    }

    @Override
    public String getFullUrl() {
        return Forwarder.getFullUrl(FilterGroupsSpecificationHandler.class);
    }

    @Override
    protected List<String> getDefaultColumnNamesIfNoUserConfig() {
        return Collections.emptyList();
    }
}

######### end - content of file "group-all/overview/groupInGroupMatrix/FilterGroupsSpecificationHandler.java" #########

######### start - content of file "group-all/overview/groupInGroupMatrix/GroupInGroupMatrixFilters.java" #########

package cf.cplace.platform.frontend.handler.group.overview.groupInGroupMatrix;

/**
 * pojo utilized to store filters set by a user in the group vs group matrix.
 */
public class GroupInGroupMatrixFilters {

    private String nestedGroupFilters;

    private String groupFilters;

    public String getNestedGroupFilters() {
        return nestedGroupFilters;
    }

    public void setNestedGroupFilters(String nestedGroupFilters) {
        this.nestedGroupFilters = nestedGroupFilters;
    }

    public String getGroupFilters() {
        return groupFilters;
    }

    public void setGroupFilters(String groupFilters) {
        this.groupFilters = groupFilters;
    }
}

######### end - content of file "group-all/overview/groupInGroupMatrix/GroupInGroupMatrixFilters.java" #########

######### start - content of file "group-all/overview/groupInGroupMatrix/LoadDataHandler.java" #########

package cf.cplace.platform.frontend.handler.group.overview.groupInGroupMatrix;

@ParametersAreNonnullByDefault
public class LoadDataHandler extends Handler implements PostOnlyHandler {
    public static final int PAGE_SIZE = 50;

    final Station DATA = new GsonAnswerStation() {
        @Override
        protected String getString() {
            return data.toJson();
        }
    };
    private Data data;

    private int groupPage;
    private int nestedGroupPage;
    private int maxNestedGroups;
    private int maxGroups;
    private GroupInGroupMatrixFilters groupInGroupMatrixFilters;
    private CandidateGroupsAndGroups nestedGroupsAndGroups;

    @Override
    public final void checkAccess() {
        groupPage = Parameters.getInt("groupPage", 1);
        nestedGroupPage = Parameters.getInt("nestedGroupPage", 1);

        maxNestedGroups = PAGE_SIZE * nestedGroupPage;
        maxGroups = PAGE_SIZE * groupPage;

        setupMatrixFilters();
    }

    private void setupMatrixFilters() {
        groupInGroupMatrixFilters = new GroupInGroupMatrixFilters();

        groupInGroupMatrixFilters.setNestedGroupFilters(Parameters.getString("nestedGroupFilters", null));
        groupInGroupMatrixFilters.setGroupFilters(Parameters.getString("groupFilters", null));
    }

    @Override
    protected Station doBusinessLogic() {
        nestedGroupsAndGroups = new CandidateGroupAndGroupSearch(groupInGroupMatrixFilters).getNestedGroupsAndGroups();
        Iterable<Group> allGroups = Group.SCHEMA.getEntities();//get all groups for derived membership
        Iterable<Group> groups = Group.SCHEMA.getEntitiesById(nestedGroupsAndGroups.getGroupIds(),false);
        Iterable<Group> nestedGroups = Group.SCHEMA.getEntitiesById(nestedGroupsAndGroups.getNestedGroupIds(), false);
        data = createData(nestedGroups, groups, allGroups, maxNestedGroups, maxGroups);
        data.groupPage = groupPage;
        data.nestedGroupPage = nestedGroupPage;
        return DATA;
    }

    @Nonnull
    private Data createData(Iterable<Group> nestedGroups, Iterable<Group> groups, Iterable<Group> allGroups, int maxNestedGroups, int maxGroups) {
        final Data data = new Data();
        List<Group> selectedNestedGroups = Lists.newArrayList();
        List<Group> selectedGroups = Lists.newArrayList();
        int totalNestedGroupCount = Iterators.size(nestedGroups.iterator());
        int totalGroupCount =  Iterators.size(groups.iterator());

        Map<String, Group> groupId2Group = Maps.newHashMap();
        for (Group group : allGroups) {
            groupId2Group.put(group.getId(), group);
        }
        SetMultimap<String, String> groupMemberships = HashMultimap.create();
        for (Membership membership : Group.getActiveMembershipsOfAllGroupsWithoutReadAccessCheck()) {
            if(membership._member().get() instanceof Group) {
                groupMemberships.put(membership._member().get().getId(), membership._group().get().getId());
            }
        }

        SetMultimap<String, String> immutableGroupMemberships = ImmutableSetMultimap.copyOf(groupMemberships);

        selectDataAndGroups(nestedGroups, totalNestedGroupCount, groups, totalGroupCount, data, selectedNestedGroups, selectedGroups, maxNestedGroups, maxGroups);

        if (totalGroupCount == 0 || totalNestedGroupCount == 0) {
            return data;
        }
        try (TriciaSplit ignored = MonitoringUtilities.start("groupInGroupMatrix.LoadDataHandler.createEdges")) {
            for (Group nestedGroup : allGroups) {
                for (Group group : allGroups) {
                    if ((nestedGroupsAndGroups.getNestedGroupIds().contains(nestedGroup.getId()) && nestedGroupsAndGroups.getGroupIds().contains(group.getId())) ||
                            (nestedGroupsAndGroups.getNestedGroupIds().contains(group.getId()) && nestedGroupsAndGroups.getGroupIds().contains(nestedGroup.getId()))) {
                        Edge edge = getEdge(group.getId(), nestedGroup.getId(), immutableGroupMemberships, groupId2Group);
                        Map<String, Edge> groupId2edge = data.nestedGroupId2groupId2edge.computeIfAbsent(nestedGroup.getId(), k -> Maps.newHashMap());
                        groupId2edge.put(group.getId(), edge);
                    }
                }
            }
        }
        return data;
    }

    private void selectDataAndGroups(Iterable<Group> nestedGroups, int totalNestedGroupCount, Iterable<Group> groups, int totalGroupCount, Data data,
                                            List<Group> selectedNestedGroups, List<Group> selectedGroups, int maxNestedGroups, int maxGroups) {
        data.numberOfFilteredNestedGroups = totalNestedGroupCount;
        data.numberOfFilteredGroups = totalGroupCount;
        int nestedGroupCount = 0;
        for (Group group : nestedGroups) {
            if (nestedGroupCount == maxNestedGroups) {
                data.excessiveData = true;
                data.excessiveDataNestedGroups = true;
                break;
            }
            data.nestedGroups.add(new Node(group));
            selectedNestedGroups.add(group);
            nestedGroupCount++;
        }

        int groupCount = 0;
        for (Group group : groups) {
            if (groupCount == maxGroups) {
                data.excessiveData = true;
                data.excessiveDataGroups = true;
                break;
            }
            data.groups.add(new Node(group));
            selectedGroups.add(group);
            groupCount++;
        }
    }

    @Nullable
    private String getParentFromWhichItDerivesGroup(String groupId, String currentGroupId, SetMultimap<String, String> groupMemberships) {
        try (TriciaSplit ignored = MonitoringUtilities.start("groupInGroupMatrix.LoadDataHandler.getParentFromWhichItDerivesGroup")) {
            return getParentFromWhichItDerivesGroup(groupId, currentGroupId, groupMemberships, new HashSet<>());
        }
    }

    @Nullable
    private String getParentFromWhichItDerivesGroup(String groupId, String currentGroupId, SetMultimap<String, String> groupMemberships, Set<String> nodesChecked) {
        if (nodesChecked.contains(currentGroupId)) {
            return null; //already checked and not there
        }
        if (groupId.equals(currentGroupId)) {
            return null; //group and nested group are the same
        }
        //check all parents first
        for (String parent : groupMemberships.get(currentGroupId)) {
            if (parent.equals(groupId)) {
                return currentGroupId;
            }
        }
        //use recursion to search deeper
        for(String parent : groupMemberships.get(currentGroupId)) {
            String parentGroup =  getParentFromWhichItDerivesGroup(groupId, parent, groupMemberships, nodesChecked);
            if (parentGroup != null) {
                return parentGroup;
            }
        }
        nodesChecked.add(currentGroupId);
        return null;
    }

    @Nullable
    private Edge getEdge(String groupId, String nestedGroupId, SetMultimap<String, String> groupMemberships, Map<String, Group> groupId2Group) {
        if (groupMemberships.get(nestedGroupId).contains(groupId)) {
            return Edge.createDirectMembershipEdge(nestedGroupId, groupId);
        } else {
            String parent = getParentFromWhichItDerivesGroup(groupId, nestedGroupId, groupMemberships);
            if (parent != null) {
                return Edge.createInheritedMembershipEdge(nestedGroupId, groupId2Group.get(parent).getName(), groupId);
            }
        }
        return null;
    }
}

######### end - content of file "group-all/overview/groupInGroupMatrix/LoadDataHandler.java" #########

######### start - content of file "group-all/overview/groupInGroupMatrix/ToggleMembershipHandler.java" #########

package cf.cplace.platform.frontend.handler.group.overview.groupInGroupMatrix;

public class ToggleMembershipHandler extends Handler implements PostOnlyHandler {

    final Station SUCCESS = new GsonAnswerStation() {
        @Override
        protected String getString() {
            return result.toJson();
        }
    };

    Result result = new Result();

    Group group;

    Group nestedGroup;

    private static final Message notAllowed = new Message() {
    };

    private static final Message cycleMembership = new Message() {
    };

    @Override
    public void checkAccess() {
        group = Group.SCHEMA.getEntityNotNull(Parameters.getString("groupId"));
        nestedGroup = Group.SCHEMA.getEntityNotNull(Parameters.getString("nestedGroupId"));
    }

    @Override
    public Station doBusinessLogic() {
        if (group.getEntityPermissions().mayEdit()) {
            Membership membership = Membership.getMembership(group, nestedGroup);
            if (membership == null) {
                if (isCycleMembership()) {
                    result.errorMessage = cycleMembership.get();
                } else {
                    Person.createMembership(nestedGroup, group, null);
                    result.success = true;
                }
            } else {
                if (membership.canBeDeleted() == null) {
                    membership.remove();
                    result.success = true;
                } else {
                    result.errorMessage = notAllowed.get();
                }
            }
        } else {
            result.errorMessage = notAllowed.get();
        }
        return SUCCESS;
    }

    private boolean isCycleMembership() {
        try (TriciaSplit ignored = MonitoringUtilities.start("groupInGroupMatrix.ToggleMembershipHandler.isCycleMembership")) {
            Set<String> parentMemberships = new HashSet<>();
            getDerivedGroups(group.getId(), getAllGroupsMembership(), parentMemberships);
            return parentMemberships.contains(nestedGroup.getId());
        }
    }

    @Nonnull
    private void getDerivedGroups(String groupId, SetMultimap<String, String> allGroupMemberships, Set<String> result) {
        result.add(groupId);
        for (String id : allGroupMemberships.get(groupId)) {
             getDerivedGroups(id, allGroupMemberships, result);
        }
    }

    @Nonnull
    private SetMultimap<String, String> getAllGroupsMembership() {
        SetMultimap<String, String> groupMemberships = HashMultimap.create();
        for (Membership membership : Group.getActiveMembershipsOfAllGroupsWithoutReadAccessCheck()) {
            if (membership._member().get() instanceof Group) {
                groupMemberships.put(membership._member().get().getId(), membership._group().get().getId());
            }
        }
        return groupMemberships;
    }

    public static class Result {

        public String toJson() {
            return GsonUtil.getGsonWithModifiedDateSerializer().toJson(this, this.getClass());
        }

        boolean success = false;

        String errorMessage;
    }
}

######### end - content of file "group-all/overview/groupInGroupMatrix/ToggleMembershipHandler.java" #########

######### start - content of file "group-all/overview/groupInGroupMatrix/ViewHandler.java" #########

package cf.cplace.platform.frontend.handler.group.overview.groupInGroupMatrix;

@CplaceApi
public class ViewHandler extends Handler implements FullPageHandler, TitleAndHeadingProvider, HistoryEntryNameProvider {

    final Station SHOW = new MainPage() {
        @Override
        public TargetProvider getViewsProvider() {
            return new DefaultActionsAndViews();
        }

        @Override
        public TargetProvider getActionsProvider() {
            return new DefaultActionsAndViews();
        }

        @Override
        protected void putContentBodySubstitutions(Template template) {
            template.put("state", PrintSubstitution.printing(Escaping.htmlAttribute, () -> {
                State state = new State();
                return state.toJson();
            }));
        }
    };

    public static final Message title = new Message() {
    };

    @Override
    public void checkAccess() {
        checkLoggedIn();
    }

    @Override
    public Station doBusinessLogic() {
        return SHOW;
    }

    @Override
    public Message getHistoryEntryName() {
        return title;
    }

    @Override
    public Message getTargetLabel() {
        return title;
    }

    @Override
    public Message getTitleAndHeading() {
        return DefaultActionsAndViews.overviewTitle;
    }

    @Nullable
    @Override
    public String getActionIconName() {
        return "fa-check-square-o";
    }
}

######### end - content of file "group-all/overview/groupInGroupMatrix/ViewHandler.java" #########

######### start - content of file "group-all/overview/groupInGroupMatrix/state/Data.java" #########

package cf.cplace.platform.frontend.handler.group.overview.groupInGroupMatrix.state;

public class Data {
    public boolean excessiveData = false;

    public boolean excessiveDataNestedGroups = false;

    public boolean excessiveDataGroups = false;

    public final Map<String, Map<String, Edge>> nestedGroupId2groupId2edge = Maps.newHashMap();

    public final List<Node> nestedGroups = Lists.newArrayList();

    public final List<Node> groups = Lists.newArrayList();

    public int numberOfFilteredNestedGroups = -1;

    public int numberOfFilteredGroups = -1;

    public int groupPage = 1;

    public int nestedGroupPage = 1;

    public String toJson() {
        return GsonUtil.getGsonWithModifiedDateSerializer().toJson(this, this.getClass());
    }
}

######### end - content of file "group-all/overview/groupInGroupMatrix/state/Data.java" #########

######### start - content of file "group-all/overview/groupInGroupMatrix/state/Edge.java" #########

package cf.cplace.platform.frontend.handler.group.overview.groupInGroupMatrix.state;

@ParametersAreNonnullByDefault
public class Edge {

    private static final ParameterizedMessage indirectMembershipInfo = new ParameterizedMessage() {
    };

    public String toJson() {
        return GsonUtil.getGsonWithModifiedDateSerializer().toJson(this, this.getClass());
    }

    String nestedGroupId;

    String groupId;

    boolean directMembership;

    String iconClass;

    String tooltip;

    @Nonnull
    private static Edge createEdge(String nestedGroupId, String groupId) {
        Edge edge = new Edge();
        edge.nestedGroupId = nestedGroupId;
        edge.groupId = groupId;
        return edge;
    }

    @Nonnull
    public static Edge createDirectMembershipEdge(String nestedGroupId, String groupId) {
        final Edge edge = createEdge(nestedGroupId, groupId);
        edge.directMembership = true;
        edge.iconClass = "fa-check";
        return edge;
    }

    @Nonnull
    public static Edge createInheritedMembershipEdge(String nestedGroupId, String indirectGroupName, String groupId) {
        final Edge edge = createEdge(nestedGroupId, groupId);
        edge.directMembership = false;
        edge.tooltip = indirectMembershipInfo.setParameters(indirectGroupName).get();
        edge.iconClass = "fa-check-square";
        return edge;
    }
}

######### end - content of file "group-all/overview/groupInGroupMatrix/state/Edge.java" #########

######### start - content of file "group-all/overview/groupInGroupMatrix/state/Node.java" #########

package cf.cplace.platform.frontend.handler.group.overview.groupInGroupMatrix.state;

@ParametersAreNonnullByDefault
public class Node {
    public final String id;

    public final String name;

    public final String url;

    public Node(Principal p) {
        id = p.getId();
        name = p.getName();
        url = p.getUrl();
    }
}

######### end - content of file "group-all/overview/groupInGroupMatrix/state/Node.java" #########

######### start - content of file "group-all/overview/groupInGroupMatrix/state/State.java" #########

package cf.cplace.platform.frontend.handler.group.overview.groupInGroupMatrix.state;

public class State {

    public Data data;

    public boolean nestedGroupFiltersEnabled = true;

    public final String toggleMembershipUrl = Forwarder.getFullUrl(ToggleMembershipHandler.class);

    public final String filterNestedGroupsDialogUrl = Forwarder.getFullUrl(TableColumnFilterDialogHandler.class,
            new NameValue(NewPageConfig.FLEXI_COMPONENT_IDENTIFIER, Forwarder.getFullUrl(FilterGroupsSpecificationHandler.class)),
            new NameValue("columnName", Group.SCHEMA.prototype()._name().getName())
    );

    public final String filterGroupsDialogUrl = Forwarder.getFullUrl(TableColumnFilterDialogHandler.class,
            new NameValue(NewPageConfig.FLEXI_COMPONENT_IDENTIFIER, Forwarder.getFullUrl(FilterGroupsSpecificationHandler.class)),
            new NameValue("columnName", Group.SCHEMA.prototype()._name().getName())
    );

    public final String loadDataUrl = Forwarder.getFullUrl(LoadDataHandler.class);

    public String toJson() {
        return GsonUtil.getGsonWithModifiedDateSerializer().toJson(this, this.getClass());
    }
}

######### end - content of file "group-all/overview/groupInGroupMatrix/state/State.java" #########

######### start - content of file "group-all/overview/groupInGroupMatrix/view.htm" #########
<div class="cplace-group-user-matrix-wrapper" cplace-group-in-group-matrix="$state$">
    <div class="alert alert-warning" ng-cloak ng-if="matrixCtrl.state.data.excessiveData">
        $[(too_many_entries)$
        {{matrixCtrl.state.data.nestedGroups.length}} $|$ {{matrixCtrl.state.data.numberOfFilteredNestedGroups}} $|$ {{matrixCtrl.state.data.groups.length}} $|$
        {{matrixCtrl.state.data.numberOfFilteredGroups}}
        $too_many_entries]$
    </div>

    <div class="cplace-group-user-matrix">
        <div class="cplace-fixed-pane-scroll" cplace-fixed-pane-scroll>
            <cplace-fixed-pane-corner>
                <div class="info-area">
                    <div class="matrix-legends">
                        <h6>$(legend)$</h6>
                        <ul class="legends">
                            <li>
                                <i class="fa fa-check"></i> $(member)$
                            </li>
                            <li>
                                <i class="fa fa-check-square-o"></i> $(indirect_member)$
                            </li>
                        </ul>
                    </div>
                    <div class="column-title header-title">
                        <div class="column-header">
                            <span><i class="far fa-users"></i> $(group)$</span>
                            <div class="btn-group btn-group-xs pull-right">
                                <a href="" class="btn btn-xs column_filter" ng-click="::matrixCtrl.filterGroups()"
                                   ng-class="matrixCtrl.hasGroupFilters() ? 'btn-primary' : 'btn-default'">
                                    <i class="fa fa-filter"></i>
                                </a>
                            </div>
                        </div>
                    </div>
                    <div class="gap-filler"></div>
                    <div class="row-title header-title">
                        <div class="btn-group btn-group-xs pull-right" ng-if="::matrixCtrl.state.nestedGroupFiltersEnabled">
                            <a href="" class="btn " ng-click="::matrixCtrl.filterNestedGroups()"
                               ng-class="matrixCtrl.hasNestedGroupFilters() ? 'btn-primary' : 'btn-default'">
                                <i class="fa fa-fw fa-filter"></i>
                            </a>
                        </div>
                        <div class="header-user-message">
                            <i class="fa fa-fw fa-users"></i> $(group)$
                        </div>
                        <div class="cell-empty"></div>
                    </div>
                </div>
            </cplace-fixed-pane-corner>
            <cplace-fixed-pane-top>
                <div class="matrix-header-top">
                    <table class="column-headers" cellpadding="0" ng-cloak>
                        <tr>
                            <th ng-repeat="group in matrixCtrl.state.data.groups"
                                cplace-on-finish-render="{{::matrixCtrl.state.data.groups.length}}"
                                after-render-event="{{::matrixCtrl.afterRenderEvent}}">
                                <div class="column-header-wrapper">
                                    <div class="column-header" cplace-tooltipster>
                                        <a ng-href="{{::group.url}}">{{::group.name}}</a>
                                    </div>
                                </div>
                                <div class="text-center helper-arrow">
                                    <i class="fa fa-arrow-up"></i>
                                </div>
                            </th>
                            <th ng-if="matrixCtrl.state.data.excessiveDataGroups">
                                <div class="column-header-wrapper">
                                    <div class="column-header">
                                        <button class="btn btn-xs btn-primary" ng-click="matrixCtrl.loadMore('group')">$(load_more)$</button>
                                    </div>
                                </div>
                            </th>
                        </tr>
                    </table>
                </div>
            </cplace-fixed-pane-top>
            <cplace-fixed-pane-left>
                <div class="matrix-header-left">
                    <table class="row-headers" cellpadding="0" ng-cloak>
                        <tr ng-repeat="nestedGroup in matrixCtrl.state.data.nestedGroups">
                            <th>
                                <div class="row-header" cplace-tooltipster>
                                    <a ng-href="{{::nestedGroup.url}}">{{::nestedGroup.name}}</a>
                                </div>
                            </th>
                            <td class="helper-arrow">
                                <i class="fa fa-arrow-right"></i>
                            </td>
                        </tr>
                        <tr ng-if="matrixCtrl.state.data.excessiveDataNestedGroups">
                            <td colspan="2">
                                <div class="load-more">
                                    <button class="btn btn-xs btn-primary" ng-click="matrixCtrl.loadMore('nestedGroup')">$(load_more)$</button>
                                </div>
                            </td>
                        </tr>
                    </table>
                </div>
            </cplace-fixed-pane-left>
            <cplace-fixed-pane-content>
                <table class="matrix-data" cellpadding="0" ng-cloak>
                    <tr ng-repeat="nestedGroup in matrixCtrl.state.data.nestedGroups">
                        <td class="edge-container" ng-repeat="group in matrixCtrl.state.data.groups"
                            ng-class="matrixCtrl.canBeToggledClass(nestedGroup,group)" ng-click="::matrixCtrl.toggleEdge(nestedGroup, group)">
                            <div class="cell-edge" ng-class="matrixCtrl.getEdge(nestedGroup, group).isAdmin ? 'admin' : ''">
                                <i class="fa"
                                   ng-class="matrixCtrl.getEdge(nestedGroup, group).iconClass"
                                   ng-if="matrixCtrl.getEdge(nestedGroup, group)"
                                   cplace-tooltipster="{{matrixCtrl.getEdge(nestedGroup, group).tooltip}}"></i>

                            </div>
                        </td>
                        <td class="cell-edge" ng-if="matrixCtrl.state.data.excessiveDataGroups">
                            &hellip;
                        </td>
                    </tr>
                    <tr ng-if="matrixCtrl.state.data.excessiveDataNestedGroups">
                        <td class="cell-edge"
                            ng-repeat="group in matrixCtrl.state.data.groups">
                            &vellip;
                        </td>
                        <td class="cell-edge" ng-if="matrixCtrl.state.data.excessiveDataGroups">
                            &#x22F1;
                        </td>
                    </tr>
                </table>
                <div class="loading" ng-if="!matrixCtrl.state.data">
                    <i class="fa fa-spin fa-spinner"></i> <i>$(loading)$</i>
                </div>
            </cplace-fixed-pane-content>
        </div>
    </div>
</div>

######### end - content of file "group-all/overview/groupInGroupMatrix/view.htm" #########

######### start - content of file "group-all/overview/groupUserMatrix/CandidateGroupSearch.java" #########

package cf.cplace.platform.frontend.handler.group.overview.groupUserMatrix;

/**
 * Search to be utilized to find groups according to filters set in the group user matrix.
 */
public class CandidateGroupSearch {

    private JSONObject groupFilters;

    public CandidateGroupSearch() {
    }

    public CandidateGroupSearch(JSONObject groupFilters) {
        this.groupFilters = groupFilters;
    }

    /**
     * Finds groups according to filters set in the group user matrix.
     *
     * @return resulting groups stored in a set.
     */
    public Set<String> findAll() {
        Search search = getGroupSearch();
        return doWithElasticSearch(search);
    }

    /**
     * Finds groups according to filters set in the group user matrix.
     *
     * @return resulting groups stored in a {@link CandidateUsersAndGroups}.
     */
    public CandidateUsersAndGroups getCandidateGroups() {
        return new CandidateUsersAndGroups(Collections.emptySet(), findAll(), HashMultimap.create());
    }

    @Nonnull
    private Search getGroupSearch() {
        Search search = new Search();
        search.add(Filters.entityClass(Group.class));
        FlexiComponentUtils.applyColumnFilters(groupFilters, search);
        search.addAlphabeticalSort();

        // membership visibility filter
        final Set<String> accessTokens = SessionLocal.getAccessTokens();
        final Group group = Group.SCHEMA.prototype();
        final SearchFilter groupVisibleFilter = Filters.and(
                Filters.builtinAttribute(group._membershipVisibility().getName(), Operator.equals, MembershipVisibility.thisGroup.getKey()),
                Filters.or(
                        Filters.builtinAttributeIn(group._administrators().getName(), accessTokens),
                        Filters.builtinAttributeIn(group._id().getName(), accessTokens)
                )
        );

        final SearchFilter allVisible = Filters.or(
                Filters.builtinAttribute(group._membershipVisibility().getName(), Operator.equals, MembershipVisibility.allUsers.getKey()),
                Filters.builtinAttribute(group._membershipVisibility().getName(), Operator.equals, MembershipVisibility.everybody.getKey())
        );
        search.add(Filters.or(allVisible, groupVisibleFilter));
        return search;
    }

    private Set<String> doWithElasticSearch(Search search) {
        Set<String> candidateGroups = Sets.newLinkedHashSet();
        search.findAllUids().forEach(uid -> candidateGroups.add(Schema.id(uid)));
        return candidateGroups;
    }
}

######### end - content of file "group-all/overview/groupUserMatrix/CandidateGroupSearch.java" #########

######### start - content of file "group-all/overview/groupUserMatrix/CandidateUserAndGroupSearch.java" #########

package cf.cplace.platform.frontend.handler.group.overview.groupUserMatrix;

/**
 * Search to be utilized to find users, groups and group memberships of users according to filters set in the group user matrix.
 */
public class CandidateUserAndGroupSearch {

    private JSONObject userFilters;
    private JSONObject groupFilters;

    private boolean onlyUnassignedUsers;
    private boolean filterUsersByGroups;
    private boolean filterGroupsByUsers;

    public CandidateUserAndGroupSearch(GroupUserMatrixFilters groupUserMatrixFilters) {
        this(groupUserMatrixFilters._userFilters().get(),
            groupUserMatrixFilters._groupFilters().get(),
            groupUserMatrixFilters._onlyUnassignedUsers().get(),
            groupUserMatrixFilters._filterUsersByGroups().get(),
            groupUserMatrixFilters._filterGroupsByUsers().get());
    }

    public CandidateUserAndGroupSearch(@Nullable String userFilters, @Nullable String groupFilters, boolean onlyUnassignedUsers, boolean filterUsersByGroups, boolean filterGroupsByUsers) {
        if (userFilters != null) {
            this.userFilters = new JSONObject(userFilters);
        }
        if (groupFilters != null) {
            this.groupFilters = new JSONObject(groupFilters);
        }
        this.onlyUnassignedUsers = onlyUnassignedUsers;
        this.filterUsersByGroups = filterUsersByGroups;
        this.filterGroupsByUsers = filterGroupsByUsers;
    }

    /**
     * Finds users, groups and group memberships of users according to filters set in the group user matrix.
     * @return resulting users, groups and group memberships of the users stored in a {@link CandidateUsersAndGroups}.
     */
    @Nonnull
    public CandidateUsersAndGroups getUsersAndGroups() {
        Set<String> candidateUsers = Sets.newLinkedHashSet();
        Set<String> candidateGroups = Sets.newLinkedHashSet();
        SetMultimap<String, String> userMemberships = HashMultimap.create();

        CandidateUsersAndGroups candidateGroupsResult = new CandidateGroupSearch(groupFilters).getCandidateGroups();
        if (filterUsersByGroups) {
            CandidateUsersAndGroups candidateUsersResult = new CandidateUserSearch(userFilters).getCandidateUsers(candidateGroupsResult.getGroupIds(), false);
            candidateGroups = candidateGroupsResult.getGroupIds();
            candidateUsers = candidateUsersResult.getUserIds();
            userMemberships = candidateUsersResult.getUserMemberships();
        }
        if (filterGroupsByUsers) {
            CandidateUsersAndGroups candidateUsersResult = new CandidateUserSearch(userFilters).getCandidateUsers(null, false);
            if (filterUsersByGroups) {
                candidateGroups = Sets.intersection(candidateUsersResult.getGroupIds(), candidateGroupsResult.getGroupIds());
            } else {
                candidateGroups = candidateUsersResult.getGroupIds();
                candidateUsers = candidateUsersResult.getUserIds();
            }
            userMemberships = candidateUsersResult.getUserMemberships();
        }
        if (!filterUsersByGroups && !filterGroupsByUsers) {
            CandidateUsersAndGroups candidateUsersResult = new CandidateUserSearch(userFilters).getCandidateUsers(null, onlyUnassignedUsers);
            candidateGroups = candidateGroupsResult.getGroupIds();
            candidateUsers = candidateUsersResult.getUserIds();
            userMemberships = candidateUsersResult.getUserMemberships();
        }
        return new CandidateUsersAndGroups(candidateUsers, candidateGroups, userMemberships);
    }
}

######### end - content of file "group-all/overview/groupUserMatrix/CandidateUserAndGroupSearch.java" #########

######### start - content of file "group-all/overview/groupUserMatrix/CandidateUserSearch.java" #########

package cf.cplace.platform.frontend.handler.group.overview.groupUserMatrix;

/**
 * Search to be utilized to find users and group memberships of users according to filters set in the group user matrix.
 */
public class CandidateUserSearch {
    private static final Logger log = LoggerFactory.getLogger(CandidateUserSearch.class);

    private final JSONObject userFilters;

    public CandidateUserSearch(JSONObject userFilters) {
        this.userFilters = userFilters;
    }

    /**
     * Finds users and users group memberships according to filters set in the group user matrix.
     *
     * @param candidateGroups     filter for users who are member in at least one of these groups.
     * @param onlyUnassignedUsers filter for users that are not member in any group.
     * @return resulting users and group memberships of the users stored in a {@link CandidateUsersAndGroups}.
     */
    public CandidateUsersAndGroups getCandidateUsers(Set<String> candidateGroups, boolean onlyUnassignedUsers) {
        Set<String> filteredGroups = Sets.newLinkedHashSet();
        Set<String> filteredUsers = Sets.newLinkedHashSet();
        SetMultimap<String, String> userMemberships = HashMultimap.create();
        Search search = new Search();
        search.add(Filters.entityClass(Person.class));
        FlexiComponentUtils.applyColumnFilters(userFilters, search);
        search.addAlphabeticalSort();

        if (candidateGroups != null && !candidateGroups.isEmpty()) {
            List<SearchFilter> filterGroups = Lists.newArrayList();
            for (String groupId : candidateGroups) {
                filterGroups.add(Filters.builtinAttribute(Person.SCHEMA.prototype()._groupMembershipIds().getName(), Operator.equals, groupId));
            }
            search.add(Filters.or(filterGroups));
        } else if (onlyUnassignedUsers) {
            search.add(Filters.builtinAttribute(Person.SCHEMA.prototype()._isMemberOfAnyGroup().getName(), Operator.equals, BooleanAttribute.EXACT_FALSE));
        }

        final String membershipIdsFieldName = SearchIndexFields.getBuiltinAttributeExactValuesFieldName(Person.SCHEMA.prototype()._groupMembershipIds().getName());
        final var searchScanConfig = new EsClient.SearchScanConfig(600_000, 1000);
        EsClientHolder.getClient().searchScan(SearchableIndex.getIndexName(), search.getElasticSearchCriterion(),
                searchScanConfig, hits -> {
                    for (final var hit : hits) {
                        String userId = Schema.id(hit.getUid());
                        final List<String> values = hit.getStringList(membershipIdsFieldName);
                        if (!values.isEmpty()) {
                            filteredUsers.add(userId);
                            final Set<String> groupIds = new HashSet<>(values);
                            groupIds.remove(userId);
                            filteredGroups.addAll(groupIds);
                            userMemberships.putAll(userId, groupIds);
                        } else {
                            log.warn("A user with id: {} does not have any memberships", userId);
                        }
                    }
                }, new String[]{ SearchIndexFields.FIELD_UID, membershipIdsFieldName }, search.getSortBuilders());

        return new CandidateUsersAndGroups(filteredUsers, filteredGroups, userMemberships);
    }
}

######### end - content of file "group-all/overview/groupUserMatrix/CandidateUserSearch.java" #########

######### start - content of file "group-all/overview/groupUserMatrix/CandidateUsersAndGroups.java" #########

package cf.cplace.platform.frontend.handler.group.overview.groupUserMatrix;

/**
 * Generic result object for searches (e.g.  {@link CandidateUserSearch}, {@link CandidateGroupSearch}, {@link CandidateUserAndGroupSearch}) utilized in the context of the group user matrix.
 */
public class CandidateUsersAndGroups {
    private final Set<String> userIds;
    private final Set<String> groupIds;
    private final SetMultimap<String, String> userMemberships;

    public CandidateUsersAndGroups(Set<String> userIds, Set<String> groupIds, SetMultimap<String, String> userMemberships) {
        this.userIds = userIds;
        this.groupIds = groupIds;
        this.userMemberships = userMemberships;
    }

    public Set<String> getUserIds() {
        return userIds;
    }

    public Set<String> getGroupIds() {
        return groupIds;
    }

    public SetMultimap<String, String> getUserMemberships() {
        return userMemberships;
    }
}

######### end - content of file "group-all/overview/groupUserMatrix/CandidateUsersAndGroups.java" #########

######### start - content of file "group-all/overview/groupUserMatrix/FilterGroupsSpecificationHandler.java" #########

package cf.cplace.platform.frontend.handler.group.overview.groupUserMatrix;

/**
 * Represents the filter dialog on the group dimension in the user and group matrix.
 * <p>
 * See {@link FilterUsersSpecificationHandler} for the filter dialog on the user dimension.
 */
public class FilterGroupsSpecificationHandler extends TableSpecificationHandler {

    protected void buildSearch() {
        search = new Search();
        search.add(Filters.space(PersonSpace.getPersonSpace()));
        TypeDefinition groupTypeDefinition = Group.getGroupTypeDefinition();
        search.add(Filters.type(groupTypeDefinition));
    }

    @Override
    public boolean showActions() {
        return GlobalPermissions.mayEditAllTypes();
    }

    public FilterGroupsSpecificationHandler() {
        buildSearch();
    }

    @Override
    public String getEditNewUrl() {
        return Forwarder.getFullUrl(NewHandler.class);
    }

    @Override
    public boolean isAllowedToCreateNewPage() {
        return true;
    }

    @Override
    public void checkAccess() {
        columnNamesToBeDisplayed.addAll(getDefaultColumnNamesIfNoUserConfig());
        availableColumnNames.addAll(search.getCustomAttributeNames());
        availableColumnNames.addAll(search.getAvailableBuiltinAttributeNamesWithoutDummyAttributes());
    }

    @Override
    public String getFullUrl() {
        return Forwarder.getFullUrl(FilterGroupsSpecificationHandler.class);
    }

    @Override
    protected List<String> getDefaultColumnNamesIfNoUserConfig() {
        return Collections.emptyList();
    }
}

######### end - content of file "group-all/overview/groupUserMatrix/FilterGroupsSpecificationHandler.java" #########

######### start - content of file "group-all/overview/groupUserMatrix/FilterUsersSpecificationHandler.java" #########

package cf.cplace.platform.frontend.handler.group.overview.groupUserMatrix;

/**
 * Represents the filter dialog on the user dimension in the user and group matrix.
 * <p>
 * See {@link FilterGroupsSpecificationHandler} for the filter dialog on the group dimension.
 */
@CplaceApi
public class FilterUsersSpecificationHandler extends TableSpecificationHandler {

    protected void buildSearch() {
        search = new Search();
        search.add(Filters.space(PersonSpace.getPersonSpace()));
        TypeDefinition userTypeDefinition = Person.getUserTypeDefinition();
        search.add(Filters.type(userTypeDefinition));
    }

    @Override
    public boolean showActions() {
        return GlobalPermissions.mayEditAllTypes();
    }

    @Nullable
    @Override
    public Class<? extends AbstractActionHandler> getActionsHandlerIfShown() {
        return UsersActionsHandler.class;
    }

    public FilterUsersSpecificationHandler() {
        buildSearch();
    }

    @Override
    public void checkAccess() {
        columnNamesToBeDisplayed.addAll(getDefaultColumnNamesIfNoUserConfig());
        availableColumnNames.addAll(search.getCustomAttributeNames());
        availableColumnNames.addAll(search.getAvailableBuiltinAttributeNamesWithoutDummyAttributes());
    }

    @Override
    public String getFullUrl() {
        return Forwarder.getFullUrl(FilterUsersSpecificationHandler.class);
    }

    @Override
    protected List<String> getDefaultColumnNamesIfNoUserConfig() {
        return Collections.emptyList();
    }
}

######### end - content of file "group-all/overview/groupUserMatrix/FilterUsersSpecificationHandler.java" #########

######### start - content of file "group-all/overview/groupUserMatrix/LoadDataHandler.java" #########

package cf.cplace.platform.frontend.handler.group.overview.groupUserMatrix;

public class LoadDataHandler extends Handler implements PostOnlyHandler {
    public static final int PAGE_SIZE = 50;
    private static final Pattern WHITESPACE = Pattern.compile("\\s");

    final Station DATA = new GsonAnswerStation() {
        @Override
        protected String getString() {
            return data.toJson();
        }
    };
    private Data data;

    private int groupPage;
    private int userPage;
    public int maxUsers;
    public int maxGroups;
    protected GroupUserMatrixFilters groupUserMatrixFilters;

    @Override
    public final void checkAccess() {
        groupPage = Parameters.getInt("groupPage", 1);
        userPage = Parameters.getInt("userPage", 1);

        maxUsers = PAGE_SIZE * userPage;
        maxGroups = PAGE_SIZE * groupPage;

        setupMatrixFilters();
        additionalCheckAccess();
    }

    protected void additionalCheckAccess() {
    }

    private void setupMatrixFilters() {
        groupUserMatrixFilters = GroupUserMatrixFilters.SCHEMA.createRegisteredSessionEntity();

        groupUserMatrixFilters._userFilters().set(Parameters.getString("userFilters", ""));
        groupUserMatrixFilters._groupFilters().set(Parameters.getString("groupFilters", ""));
        groupUserMatrixFilters._onlyUnassignedUsers().set(Parameters.getBoolean("onlyUnassignedUsers", false));
        groupUserMatrixFilters._filterGroupsByUsers().set(Parameters.getBoolean("filterGroupsByUsers", false));
        groupUserMatrixFilters._filterUsersByGroups().set(Parameters.getBoolean("filterUsersByGroups", false));
    }

    @Override
    protected Station doBusinessLogic() {
        CandidateUsersAndGroups usersAndGroups = new CandidateUserAndGroupSearch(groupUserMatrixFilters).getUsersAndGroups();

        Iterable<Group> groups = Group.SCHEMA.getEntitiesById(usersAndGroups.getGroupIds(), false);
        Iterable<Person> persons = Person.SCHEMA.getEntitiesById(usersAndGroups.getUserIds(), false);
        data = createData(persons, usersAndGroups.getUserIds().size(), groups, usersAndGroups.getGroupIds().size(), usersAndGroups.getUserMemberships(), maxUsers, maxGroups);
        data.groupPage = groupPage;
        data.userPage = userPage;
        return DATA;
    }

    public static Data createData(Iterable<Person> users, int totalUserCount, Iterable<Group> groups, int totalGroupCount, SetMultimap<String, String> userMemberships, int maxUsers, int maxGroups) {
        final Data data = new Data();
        List<Person> selectedPersons = Lists.newArrayList();
        List<Group> selectedGroups = Lists.newArrayList();
        selectDataAndGroups(users, totalUserCount, groups, totalGroupCount, data, selectedPersons, selectedGroups, maxUsers, maxGroups);

        if (totalGroupCount == 0 || totalUserCount == 0) {
            return data;
        }

        for (Person user : selectedPersons) {
            final Set<String> userGroups = userMemberships.get(user.getId());
            for (Group group : selectedGroups) {
                Edge edge = getEdge(group, user, userGroups);
                String userId = user.getId();
                Map<String, Edge> groupId2edge = data.userId2groupId2edge.computeIfAbsent(userId, k -> Maps.newHashMap());
                groupId2edge.put(group.getId(), edge);
            }
        }
        return data;
    }

    private static void selectDataAndGroups(Iterable<Person> users, int totalUserCount, Iterable<Group> groups, int totalGroupCount, Data data,
                                            List<Person> selectedPersons, List<Group> selectedGroups, int maxUsers, int maxGroups) {
        data.numberOfFilteredUsers = totalUserCount;
        data.numberOfFilteredGroups = totalGroupCount;
        int userCount = 0;
        for (Person person : users) {
            if (userCount == maxUsers) {
                data.excessiveData = true;
                data.excessiveDataUsers = true;
                break;
            }
            data.users.add(new Node(person));
            selectedPersons.add(person);
            userCount++;
        }

        int groupCount = 0;
        for (Group group : groups) {
            if (groupCount == maxGroups) {
                data.excessiveData = true;
                data.excessiveDataGroups = true;
                break;
            }
            data.groups.add(new Node(group));
            selectedGroups.add(group);
            groupCount++;
        }
    }

    public static Edge getEdge(Group group, Person user, Set<String> userGroups) {
        boolean isGroupAdmin = false;
        if (group.isAdministratorOfThisGroup(user)) {
            isGroupAdmin = true;
        }
        if (group.isActiveMemberInThisGroup(user)) {
            return Edge.createDirectMembershipEdge(user, group, isGroupAdmin);
        } else {
            if (userGroups.contains(group.getId())) {
                Iterable<Group.MemberInGroup> allActivePersonsAndInWhichGroupTheyAreMember;
                allActivePersonsAndInWhichGroupTheyAreMember = group.getAllActivePersonsAndInWhichGroupTheyAreMember();
                for (Group.MemberInGroup memberInGroup : allActivePersonsAndInWhichGroupTheyAreMember) {
                    if (Objects.equals(memberInGroup.member, user)) {
                        return Edge.createInheritedMembershipEdge(user, memberInGroup.group, group, isGroupAdmin);
                    }
                }
            }
        }

        if (isGroupAdmin) {
            return Edge.createIsAdminEdge(user, group);
        }
        return null;
    }

    public static Map<String, Edge> getGroupId2Edge(Person user) {
        Map<String, Edge> groupId2edge = Maps.newHashMap();
        final String idsString = user._groupMembershipIds().get();
        if (idsString == null) {
            return groupId2edge;
        }
        Set<String> userGroups = Sets.newHashSet(WHITESPACE.split(idsString));
        userGroups.remove(user.getId());
        for (Group group : Group.SCHEMA.getEntities()) {
            Edge edge = getEdge(group, user, userGroups);
            if (edge != null) {
                groupId2edge.put(group.getId(), edge);
            }
        }
        return groupId2edge;
    }
}

######### end - content of file "group-all/overview/groupUserMatrix/LoadDataHandler.java" #########

######### start - content of file "group-all/overview/groupUserMatrix/ToggleMembershipHandler.java" #########
package cf.cplace.platform.frontend.handler.group.overview.groupUserMatrix;

public class ToggleMembershipHandler extends Handler implements PostOnlyHandler {

    final Station SUCCESS = new GsonAnswerStation() {
        @Override
        protected String getString() {
            return result.toJson();
        }
    };

    Result result = new Result();

    Group group;

    Person user;

    private static final Message notAllowed = new Message() {
    };

    @Override
    public void checkAccess() {
        group = Group.SCHEMA.getEntityNotNull(Parameters.getString("groupId"));
        user = Person.SCHEMA.getEntityNotNull(Parameters.getString("userId"));
    }

    @Override
    public Station doBusinessLogic() {
        if (group.getEntityPermissions().mayEdit()) {
                Membership membership = Membership.getMembership(group, user);
                if (membership == null) {
                    Person.createMembership(user, group, null);
                    result.groupId2edge = LoadDataHandler.getGroupId2Edge(user);
                    result.success = true;
                } else {
                    if (membership.canBeDeleted() == null) {
                        membership.remove();
                        result.groupId2edge = LoadDataHandler.getGroupId2Edge(user);
                        result.success = true;
                    } else {
                        result.errorMessage = notAllowed.get();
                    }
                }
        } else {
            result.errorMessage = notAllowed.get();
        }
        return SUCCESS;
    }

    public static class Result {

        public String toJson() {
            return GsonUtil.getGsonWithModifiedDateSerializer().toJson(this, this.getClass());
        }

        boolean success = false;

        Map<String, Edge> groupId2edge = Maps.newHashMap();

        String errorMessage;
    }
}

######### end - content of file "group-all/overview/groupUserMatrix/ToggleMembershipHandler.java" #########

######### start - content of file "group-all/overview/groupUserMatrix/UserExcelSheetDefinition.java" #########

package cf.cplace.platform.frontend.handler.group.overview.groupUserMatrix;

/**
 * Allows to configure the excel to be created by the {@link Export2ExcelJob}
 * and provides utility functions for the creation of the excel.
 */
public class UserExcelSheetDefinition {

    public static final Message nameLabel = new Message() {
    };
    @VisibleForTesting
    @CplaceInternal
    public static final Message ldapLabel = new Message() {
    };
    @VisibleForTesting
    @CplaceInternal
    public static final Message emailLabel = new Message() {
    };

    enum UserExcelSheetColumn {
        NAME(0, nameLabel, p -> Strings.nullToEmpty(p._name().get())),
        LDAP(1, ldapLabel, p -> Strings.nullToEmpty(p._externalId().get())),
        EMAIL(2, emailLabel, p -> Strings.nullToEmpty(p._login().get()));

        public final int index;
        public final Message label;
        public final Function<Person, String> informationMapper;

        UserExcelSheetColumn(int index, Message label, Function<Person, String> informationMapper) {
            this.index = index;
            this.label = label;
            this.informationMapper = informationMapper;
        }
    }

    /**
     * Sets the width of all columns containing information about a user e.g. name, LDAP and email (excluding columns that contain group membership information).
     * @param sheet the sheet in the excel that contains the respective user information columns.
     */
    public void setUserInfoColumnWidth(Sheet sheet) {
        Arrays.stream(UserExcelSheetColumn.values())
                .forEach(column -> sheet.setColumnWidth(column.index, 10000));
    }

    /**
     * Creates the header cells of all columns containing information about a user e.g. name, LDAP and email (excluding columns that contain group membership information).
     * @param row the row to contain the header cells.
     * @param cellStyle the style of the header cells.
     */
    public void createHeaderCells(Row row, CellStyle cellStyle) {
        Arrays.stream(UserExcelSheetColumn.values())
            .forEach(column -> createHeaderCellFor(row, cellStyle, column));
    }

    /**
     * For a given user creates the cells in all columns containing information about the user e.g. name, LDAP and email (excluding columns that contain group membership information).
     * @param row the row to contain the user information cells.
     * @param cellStyle the style of the user information cells.
     * @param person the user for which the user information cells shall be created.
     */
    public void createUserCells(Row row, CellStyle cellStyle, Person person) {
        Arrays.stream(UserExcelSheetColumn.values())
            .forEach(column -> createUserCellFor(row, cellStyle, person, column));
    }

    /**
     * Returns the index of the last column that contains information about the user e.g. name, LDAP and email.
     * @return the index of the last column that contains information about the user.
     */
    public int getLastColumnIndex(){
        return UserExcelSheetColumn.values()[UserExcelSheetColumn.values().length - 1].index;
    }

    private void createHeaderCellFor(Row row, CellStyle cellStyle, UserExcelSheetColumn column) {
        final Cell userNameCell = row.createCell(column.index);
        userNameCell.setCellStyle(cellStyle);
        userNameCell.setCellValue(column.label.get());
    }

    private void createUserCellFor(Row row, CellStyle cellStyle, Person person, UserExcelSheetColumn column) {
        final Cell userNameCell = row.createCell(column.index);
        userNameCell.setCellStyle(cellStyle);
        userNameCell.setCellValue(column.informationMapper.apply(person));
    }
}

######### end - content of file "group-all/overview/groupUserMatrix/UserExcelSheetDefinition.java" #########

######### start - content of file "group-all/overview/groupUserMatrix/ViewHandler.java" #########
package cf.cplace.platform.frontend.handler.group.overview.groupUserMatrix;

@CplaceApi
public class ViewHandler extends Handler implements FullPageHandler, TitleAndHeadingProvider, HistoryEntryNameProvider {

    private static final ParameterizedMessage htmlUnsafe_filtered = new ParameterizedMessage() {
    };

    final Station SHOW = new MainPage() {
        @Override
        public TargetProvider getViewsProvider() {
            return new DefaultActionsAndViews();
        }

        @Override
        public TargetProvider getActionsProvider() {
            return new DefaultActionsAndViews();
        }

        @Override
        protected void putContentBodySubstitutions(Template template) {
            template.put("state", PrintSubstitution.printing(Escaping.htmlAttribute, () -> {
                State state = new State();
                return state.toJson();
            }));
            template.put("filteredMessage", PrintSubstitution.printingMessageHtml(() -> {
                if (usersToBeFiltered.size() > 0) {
                    return htmlUnsafe_filtered.setParameters(Forwarder.getFullUrl(ViewHandler.class));
                } else {
                    return null;
                }
            }));
        }
    };

    public static final Message title = new Message() {
    };

    Set<Person> usersToBeFiltered = Sets.newHashSet();

    @Override
    public void checkAccess() {
        checkLoggedIn();
    }

    @Override
    public Station doBusinessLogic() {
        String userIdsJson = Parameters.getString("userIds");
        if (!Strings.isNullOrEmpty(userIdsJson)) {
            UserIds userIds = new Gson().fromJson(Preconditions.checkNotNull(userIdsJson, "json"), UserIds.class);
            for (String userId : userIds.userIds) {
                Person user = Person.SCHEMA.getEntity(userId);
                if (user != null) {
                    usersToBeFiltered.add(user);
                }
            }
        }
        return SHOW;
    }

    @Override
    public Message getHistoryEntryName() {
        return title;
    }

    @Override
    public Message getTargetLabel() {
        return title;
    }

    @Override
    public Message getTitleAndHeading() {
        return DefaultActionsAndViews.overviewTitle;
    }

    @CplaceApi
    public static class UserIds {

        public String toJson() {
            return GsonUtil.getGsonWithModifiedDateSerializer().toJson(this, this.getClass());
        }

        public List<String> userIds = Lists.newArrayList();
    }

    @Nullable
    @Override
    public String getActionIconName() {
        return "fa-check-square-o";
    }
}

######### end - content of file "group-all/overview/groupUserMatrix/ViewHandler.java" #########

######### start - content of file "group-all/overview/groupUserMatrix/exporting/Export2ExcelHandler.java" #########

package cf.cplace.platform.frontend.handler.group.overview.groupUserMatrix.exporting;

/**
 * Entry point for the export of group memberships. Shows the user a modal that allows a user to only export memberships in groups in which the user is admin.
 * Subsequently forwards to the {@link SubmitExportHandler}.
 */
public class Export2ExcelHandler extends Handler implements PostOnlyHandler {

    private static final Message label = new Message() {
    };

    private static final Message notAllowedToExport = new Message() {
    };

    final Station SHOW = new JsonPage() {
        @Override
        public void putSubstitutions(Template template) {
            template.put("submitUrl", PrintSubstitution.printing(Escaping.htmlAttribute, () -> Forwarder.getFullUrl(
                SubmitExportHandler.class,
                NameValue.fromInt("groupPage", Parameters.getInt("groupPage", 1)),
                NameValue.fromInt("userPage", Parameters.getInt("userPage", 1)),
                NameValue.fromBoolean("onlyUnassignedUsers", Parameters.getBoolean("onlyUnassignedUsers", false)),
                NameValue.fromBoolean("filterGroupsByUsers", Parameters.getBoolean("filterGroupsByUsers", false)),
                NameValue.fromBoolean("filterUsersByGroups", Parameters.getBoolean("filterUsersByGroups", false)),
                NameValue.fromParameter("mayExportGroupMemberships")
            )));
            template.put("userFilters", PrintSubstitution.printing(Escaping.htmlAttribute, () -> NameValue.fromParameter("userFilters").getValue()));
            template.put("groupFilters", PrintSubstitution.printing(Escaping.htmlAttribute, () -> NameValue.fromParameter("groupFilters").getValue()));
        }
    };

    @Override
    public void checkAccess() {
        SessionLocal.checkLoggedIn();
        if (!GlobalPermissions.mayExportGroupMemberships()) {
            throw new ProtectedActionException(notAllowedToExport.get());
        }
    }

    @Override
    public Station doBusinessLogic() {
        return SHOW;
    }

    @Override
    public String getActionIconName() {
        return "fa-download";
    }

    @Override
    public Message getTargetLabel() {
        return label;
    }
}

######### end - content of file "group-all/overview/groupUserMatrix/exporting/Export2ExcelHandler.java" #########

######### start - content of file "group-all/overview/groupUserMatrix/exporting/Export2ExcelJob.java" #########

package cf.cplace.platform.frontend.handler.group.overview.groupUserMatrix.exporting;

/**
 * Exports direct memberships of the group user matrix to an excel file.
 * The excel can be configured via {@link UserExcelSheetDefinition}.
 */
public class Export2ExcelJob extends QueuedBatchJob {

    private static final Message jobName = new Message() {
    };
    static final Message groupMembershipsTabName = new Message() {
    };
    private static final Message excelFileName = new Message() {
    };

    final UserExcelSheetDefinition userExcelSheetDefinition = new UserExcelSheetDefinition();

    @Nonnull
    @Override
    public DistributionType getDistributionType(@Nullable String parameter) {
        return DistributionType.DISTRIBUTED;
    }

    @Nullable
    @Override
    protected Message getJobName(String parameter) {
        return jobName;
    }

    private static class JobParameters extends Gsonable {
        @Nullable
        String userFilters;
        @Nullable
        String groupFilters;
        boolean onlyUnassignedUsers;
        boolean filterUsersByGroups;
        boolean filterGroupsByUsers;
        boolean filterForGroupAdmin;

        public static JobParameters fromJson(@Nonnull String serialized) {
            return GsonUtil.getGsonWithModifiedDateSerializer().fromJson(serialized, JobParameters.class);
        }
    }

    @Override
    public boolean isUserJob() {
        return true;
    }

    @Override
    protected void execute(PersistentJob job) throws Exception {
        final JobParameters params = JobParameters.fromJson(job._parameter().getNotEmpty());

        try (final SXSSFWorkbook wb = new SXSSFWorkbook()) {
            try {
                final ExcelExporter exporter = new ExcelExporter();

                wb.setCompressTempFiles(true);
                final Sheet sheetUsersGroupsMatrix = wb.createSheet(groupMembershipsTabName.get());
                userExcelSheetDefinition.setUserInfoColumnWidth(sheetUsersGroupsMatrix);

                final CandidateUsersAndGroups usersAndGroups = new CandidateUserAndGroupSearch(params.userFilters, params.groupFilters, params.onlyUnassignedUsers, params.filterUsersByGroups, params.filterGroupsByUsers).getUsersAndGroups();

                final List<Group> groups = Streams.stream(Group.SCHEMA.getEntitiesById(usersAndGroups.getGroupIds(), false))
                    .filter(params.filterForGroupAdmin ? group -> group.isAdministratorOfThisGroup(SessionLocal.getUser()) : group -> true)
                    .collect(Collectors.toList());
                Iterator<Person> persons = Person.SCHEMA.getEntitiesById(usersAndGroups.getUserIds(), false).iterator();

                createFirstRowWithGroupNames(sheetUsersGroupsMatrix, groups, getHeaderStyle(wb));

                for (int rowNumber = 1; persons.hasNext(); rowNumber++) {
                    Person user = persons.next();
                    final Row personMembershipRow = sheetUsersGroupsMatrix.createRow(rowNumber);
                    personNameInFirstCellsOfRow(personMembershipRow, user, getHeaderStyle(wb));
                    personMembershipsInRow(personMembershipRow, groups, user);
                }
                exporter.writeToWorkbook(wb);
                final File exportedFile = writeToFile(wb);

                PersistentEntity.doOnWritableCopyAndPersistIfModified(job, j -> j._downloadFileName().set(exportedFile.getAbsolutePath()));
                job.logHtml(Template.getString(DownloadExportHelper.downloadLink(job, exportedFile.getName())));
            } finally {
                wb.dispose();
            }
        }
    }

    @Nonnull
    private File writeToFile(Workbook wb) throws IOException {
        File dir = TenantResources.INSTANCE().makeTemporaryUploadFolder();
        File excel = Utilities.getPathFile(dir, excelFileName.get() + '.' + XSSFWorkbookType.XLSX.getExtension());
        try (FileOutputStream fileOutputStream = new FileOutputStream(excel)) {
            wb.write(fileOutputStream);
        }
        return excel;
    }

    private void createFirstRowWithGroupNames(Sheet sheetUsersGroupMatrix, List<Group> groups, CellStyle rowStyle) {
        headerCells(sheetUsersGroupMatrix.createRow(0), groups, rowStyle);
    }

    /**
     * Creates and starts an {@link Export2ExcelJob} in a separate thread.
     * @param userFilters set in the group user matrix
     * @param groupFilters set in the group user matrix
     * @param onlyUnassignedUsers filter set in the group user matrix
     * @param filterUsersByGroups filter set in the group user matrix
     * @param filterGroupsByUsers filter set in the group user matrix
     * @param filterForGroupAdmin allows to filter for groups in the export in which the user who triggered the export is admin.
     * @return the started {@link Export2ExcelJob} job.
     */
    @Nonnull
    public static PersistentJob createJobAndStartInSeparateThread(@Nullable String userFilters, @Nullable String groupFilters, boolean onlyUnassignedUsers, boolean filterUsersByGroups, boolean filterGroupsByUsers, boolean filterForGroupAdmin) {
        return PersistentJob.createJobAndStartInSeparateThread(Export2ExcelJob.class, encodeParams(userFilters, groupFilters, onlyUnassignedUsers, filterUsersByGroups, filterGroupsByUsers, filterForGroupAdmin));
    }
    /**
     * Encodes the job parameters.
     * @param userFilters set in the group user matrix
     * @param groupFilters set in the group user matrix
     * @param onlyUnassignedUsers filter set in the group user matrix
     * @param filterUsersByGroups filter set in the group user matrix
     * @param filterGroupsByUsers filter set in the group user matrix
     * @param filterForGroupAdmin allows to filter for groups in the export in which the user who triggered the export is admin.
     * @return created {@link JobParameters} as Json.
     */
    @Nonnull
    public static String encodeParams(@Nullable String userFilters, @Nullable String groupFilters, boolean onlyUnassignedUsers, boolean filterUsersByGroups, boolean filterGroupsByUsers, boolean filterForGroupAdmin) {
        final JobParameters params = new JobParameters();
        params.userFilters = userFilters;
        params.groupFilters = groupFilters;
        params.onlyUnassignedUsers = onlyUnassignedUsers;
        params.filterUsersByGroups = filterUsersByGroups;
        params.filterGroupsByUsers = filterGroupsByUsers;
        params.filterForGroupAdmin = filterForGroupAdmin;
        return params.toJson();
    }

    private void headerCells(Row row, List<Group> groups, CellStyle style) {
        userExcelSheetDefinition.createHeaderCells(row, style);
        int lastUserColumnIndex = userExcelSheetDefinition.getLastColumnIndex() + 1;
        for (int i = 0; i < groups.size(); i++) {
            Cell c = row.createCell(i + lastUserColumnIndex);
            c.setCellStyle(style);
            c.setCellValue(groups.get(i)._name().get());
        }
    }

    private void personNameInFirstCellsOfRow(Row row, Person person, CellStyle style) {
        userExcelSheetDefinition.createUserCells(row, style, person);
    }

    private void personMembershipsInRow(Row row, List<Group> groups, Person user) {
        int index = userExcelSheetDefinition.getLastColumnIndex() + 1;
        for (Group group : groups) {
            Cell singleMembership = row.createCell(index++);
            activeDirectPersonMembership(user, group, singleMembership);
        }
    }

    private void activeDirectPersonMembership(Person user, Group group, Cell singleMembership) {
        if (group.isActiveMemberInThisGroup(user)) {
            singleMembership.setCellValue(Boolean.TRUE);
        }
    }

    private CellStyle getHeaderStyle(SXSSFWorkbook wb) {
        Font font = wb.createFont();
        font.setBold(true);
        CellStyle cellStyle = wb.createCellStyle();
        cellStyle.setWrapText(true);
        cellStyle.setFont(font);
        cellStyle.setAlignment(HorizontalAlignment.CENTER);
        cellStyle.setVerticalAlignment(VerticalAlignment.BOTTOM);
        return cellStyle;
    }

}

######### end - content of file "group-all/overview/groupUserMatrix/exporting/Export2ExcelJob.java" #########

######### start - content of file "group-all/overview/groupUserMatrix/exporting/SubmitExportHandler.java" #########

package cf.cplace.platform.frontend.handler.group.overview.groupUserMatrix.exporting;

/**
 * Subsequently to the {@link Export2ExcelHandler}, creates and starts the {@link Export2ExcelJob}.
 */
public class SubmitExportHandler extends LoadDataHandler {

    private static final Message label = new Message() {
    };

    private Station EXPORT = new JobCreatedJsonPage() {
        @Override
        protected PersistentJob getJob() {
            return job;
        }
    };

    private PersistentJob job;

    @Override
    protected void additionalCheckAccess() {
        SessionLocal.checkLoggedIn();
        if (!GlobalPermissions.mayExportGroupMemberships()) {
            throw new ProtectedActionException();
        }
    }

    @Override
    public Station doBusinessLogic() {
        boolean filterForGroupAdmin = Parameters.getBoolean("filterForGroupAdmin", false);
        job = Export2ExcelJob.createJobAndStartInSeparateThread(groupUserMatrixFilters._userFilters().isEmpty() ? null : groupUserMatrixFilters._userFilters().get(),
            groupUserMatrixFilters._groupFilters().isEmpty() ? null : groupUserMatrixFilters._groupFilters().get(),
            groupUserMatrixFilters._onlyUnassignedUsers().get(),
            groupUserMatrixFilters._filterUsersByGroups().get(),
            groupUserMatrixFilters._filterGroupsByUsers().get(),
            filterForGroupAdmin);
        return EXPORT;
    }

    @Nullable
    @Override
    public Message getTargetLabel() {
        return label;
    }

    @Nullable
    @Override
    public String getActionIconName() {
        return "fa-download";
    }
}

######### end - content of file "group-all/overview/groupUserMatrix/exporting/SubmitExportHandler.java" #########

######### start - content of file "group-all/overview/groupUserMatrix/exporting/export2Excel.htm" #########
<form method="post" action="$submitUrl$" class="tricia-edit-form modal-form form-horizontal" cplace-form-provider>
    $[defaultDialogHeader()$
    <h1>$(title)$</h1>
    $defaultDialogHeader]$
    <div class="modal-body">
        <cplace-control-component-boolean name="filterForGroupAdmin"></cplace-control-component-boolean>
        $(filterForGroupAdminHelp)$
        <input type="hidden" name="userFilters" value="$userFilters$" id="userFilters"/>
        <input type="hidden" name="groupFilters" value="$groupFilters$" id="groupFilters"/>
    </div>
    $defaultDialogButtonBar(submit="next",cancel="cancel")$
</form>

######### end - content of file "group-all/overview/groupUserMatrix/exporting/export2Excel.htm" #########

######### start - content of file "group-all/overview/groupUserMatrix/importing/ImportFromExcelHandler.java" #########

package cf.cplace.platform.frontend.handler.group.overview.groupUserMatrix.importing;

/**
 * Entry point for the import of group memberships. Shows the user a modal that allows a user to select an excel file to be imported.
 * Subsequently forwards to the {@link SubmitImportHandler}.
 */
public class ImportFromExcelHandler extends Handler {

    private static final Message label = new Message() {
    };

    private static final Message notAllowedToImport = new Message() {
    };

    final Station SHOW = new JsonPage() {
        @Override
        public void putSubstitutions(Template template) {
            template.put("submitUrl", PrintSubstitution.printing(Escaping.htmlAttribute, () -> Forwarder.getFullUrl(SubmitImportHandler.class)));
        }
    };

    @Override
    public void checkAccess() {
        SessionLocal.checkLoggedIn();
        if (!GlobalPermissions.mayImportGroupMemberships()) {
            throw new ProtectedActionException(notAllowedToImport.get());
        }
    }

    @Override
    public Station doBusinessLogic() {
        return SHOW;
    }

    @Override
    public Message getTargetLabel() {
        return label;
    }

    @Nullable
    @Override
    public String getActionIconName() {
        return "fa-upload";
    }
}

######### end - content of file "group-all/overview/groupUserMatrix/importing/ImportFromExcelHandler.java" #########

######### start - content of file "group-all/overview/groupUserMatrix/importing/ImportFromExcelJob.java" #########

package cf.cplace.platform.frontend.handler.group.overview.groupUserMatrix.importing;

/**
 * Imports direct group memberships from an excel file.
 * The format of the excel file to be imported is described in {@link UserExcelSheetDefinition}.
 */
public class ImportFromExcelJob extends QueuedBatchJob {

    private static final Message jobName = new Message() {
    };
    private static final ParameterizedMessage notAllowed = new ParameterizedMessage() {
    };
    private static final long TIME_STEPS_IN_MILLIS = 5_000;
    private static final int COUNT_STEPS = 1;
    private static final String PATH_KEY = "path";

    private final UserExcelSheetDefinition userExcelSheetDefinition = new UserExcelSheetDefinition();

    private PersistentJob job;

    private List<@SafeHtml String> messagesToAppend =  new ArrayList<>();

    @Nullable
    @Override
    protected Message getJobName(String parameter) {
        return jobName;
    }

    @Nonnull
    @Override
    public DistributionType getDistributionType(@Nullable String parameter) {
        return DistributionType.DISTRIBUTED;
    }

    /**
     * Encodes the job parameters.
     * @param pathToExcel path to the excel file that contains users, groups and group memberships to be imported. The file will be deleted at the end of the job, so only provide temporary files!
     * @return created string containing the parameters formated as Json.
     */
    @Nonnull
    public static String paramsAsJson(String pathToExcel) {
        JSONObject jo = new JSONObject();
        jo.put(PATH_KEY, pathToExcel);
        return jo.toString();
    }

    @Override
    protected void execute(PersistentJob job) throws Exception {
        this.job = job;
        this.job.logText("Info: Reading input file...");
        JSONObject jo = new JSONObject(job._parameter().get());
        final File importFile = new File(jo.getString(PATH_KEY));

        try(final Workbook wb = ExcelUtilities.createWorkbookFromFileWithType(importFile, ExcelUtilities.WORKBOOK_TYPE_XSSF)) {
            final Sheet firstSheet = wb.getSheetAt(0);

            final Map<String, Group> groupsMatrixMap = getGroups(firstSheet);
            final Map<String, Person> personsMatrixMap = getPersons(firstSheet);
            final Map<String, List<String>> personWithMemberships = createPersonsWithMemberships(firstSheet, personsMatrixMap);

            this.job.logText(String.format("Info: Updating memberships: Looking at '%s' memberships...", groupsMatrixMap.entrySet().size() * personsMatrixMap.entrySet().size()));
            CountAndThrottleLog countAndThrottleLog = new CountAndThrottleLog(TIME_STEPS_IN_MILLIS, COUNT_STEPS);
            personsMatrixMap.values().forEach(person -> updateGroupMembershipsForPerson(groupsMatrixMap, personWithMemberships, countAndThrottleLog, person));
            if (countAndThrottleLog.hasUnloggedInc()) {
                this.job.logHtml(String.format("Processed %s memberships in total: Changes done: <br>%s", countAndThrottleLog.getCount(), String.join("<br>", messagesToAppend)));
            }
        } finally {
            importFile.delete();
        }
    }

    private void updateGroupMembershipsForPerson(Map<String, Group> groupsMatrixMap, Map<String, List<String>> personWithMemberships, CountAndThrottleLog countAndThrottleLog, Person person) {
        final Set<String> groupsWithMembership = new HashSet<>(personWithMemberships.get(person.getUid()));
        groupsMatrixMap.values().forEach(group -> {
            membershipUpdate(person, groupsWithMembership, group, countAndThrottleLog);
        });
    }

    @Override
    public boolean isUserJob() {
        return true;
    }

    @Nonnull
    @Override
    public ShutdownCancellationType getShutdownCancellationType(@Nullable String parameter) {
        return ShutdownCancellationType.NOT_SUPPORTED;
    }

    @Nonnull
    private Map<String, List<String>> createPersonsWithMemberships(Sheet firstSheet, Map<String, Person> personsMatrixMap) {
        final Row headerRowWithGroupNames = firstSheet.getRow(0);
        final Iterator<Row> rowIterator = firstSheet.rowIterator();
        skipRowWithGroupNames(rowIterator);
        Map<String, List<String>> personWithMemberships = Maps.newHashMap();
        // for each row - were row is list of memberships for user
        while (rowIterator.hasNext()) {
            Row rowWithMemberships = rowIterator.next();
            Optional.ofNullable(getPersonEmail(rowWithMemberships)).map(personsMatrixMap::get).ifPresent(person -> {
                final List<String> userMemberships = collectSinglePersonMemberships(headerRowWithGroupNames, rowWithMemberships, person.getName());
                personWithMemberships.put(person.getUid(), userMemberships);
            });
        }
        return personWithMemberships;
    }

    @Nullable
    private String getPersonEmail(Row rowWithMemberships) {
        return Optional
                .ofNullable(rowWithMemberships
                        .getCell(userExcelSheetDefinition.getLastColumnIndex()))
                .map(Cell::getStringCellValue)
                .map(String::trim)
                .orElse(null);
    }

    @Nonnull
    private List<String> collectSinglePersonMemberships(Row headerRowWithGroupNames, Row rowWithMemberships, String personName) {
        final List<String> activeUserMemberships = Lists.newArrayList();
        final Iterator<Cell> cellsWithMemberships = rowWithMemberships.iterator();
        skipUserItems(cellsWithMemberships);
        while (cellsWithMemberships.hasNext()) {
            final Cell membershipValue = cellsWithMemberships.next();
            final int columnIndex = membershipValue.getColumnIndex();
            final Cell groupName = headerRowWithGroupNames.getCell(columnIndex);
            boolean isMember;
            try {
                isMember = membershipValue.getBooleanCellValue();
            } catch (IllegalStateException e) {
                this.job.logText(String.format("Error: Membership cell for user: '%s' and group: '%s' contains an invalid value. Please enter a valid value", personName, groupName != null ? groupName.getStringCellValue() : "undefined"));
                throw e;
            }
            if (groupName != null && isMember) {
                activeUserMemberships.add(groupName.getStringCellValue());
            }
        }
        return activeUserMemberships;
    }

    private void membershipUpdate(Person person, Set<String> groupsWithMembership, Group group, CountAndThrottleLog countAndThrottleLog) {
        final String groupName = group.getName();
        final String personName = person.getName();
        if (group.getEntityPermissions().mayEdit()) {
            final Membership existingMembership = Membership.getMembership(group, person);
            final boolean shouldBecomeDirectMember = groupsWithMembership.contains(groupName);

            if (shouldBecomeDirectMember && existingMembership == null) {
                Person.createMembership(person, group, "Imported from excel");
                messagesToAppend.add(String.format("Created: %s to: %s", Escaping.html.escape(personName), Escaping.html.escape(groupName)));
            } else if (!shouldBecomeDirectMember && existingMembership != null && existingMembership.canBeDeleted() == null) {
                messagesToAppend.add(String.format("Removed: %s from: %s", Escaping.html.escape(personName), Escaping.html.escape(groupName)));
                existingMembership.remove();
            }
        } else {
            messagesToAppend.add(notAllowed.setParameters(groupName).getHtmlSafe());
        }
        if (countAndThrottleLog.incAndShouldLog()) {
            this.job.logHtml(String.format("Processed %s memberships in total: Changes done: <br>%s", countAndThrottleLog.getCount() - 1, String.join("<br>", messagesToAppend)));
            messagesToAppend.clear();
        }
    }

    @Nonnull
    private Map<String, Group> getGroups(Sheet firstSheet) {
        final Row headerRowWithGroupNames = firstSheet.getRow(0);
        final List<String> groupsNamesFromExcel = groupNamesFromExcel(headerRowWithGroupNames);
        final List<Group> existingGroupsFromExcel = new ArrayList<>();
        for (Iterable<String> batch : Iterables.partition(groupsNamesFromExcel, PersistentSchema.QUERY_ENTITIES_BATCH_SIZE)) {
            existingGroupsFromExcel.addAll(Group.SCHEMA.createQuery().where(Group.SCHEMA.prototype()._name().isIn(Lists.newArrayList(batch))).findList());
        }
        final Set<String> allVisibleForCurrentUser = new CandidateGroupSearch().findAll();
        Person user = SessionLocal.getUser();
        if (user == null) {
            this.job.logText("Error: Session has no user defined");
            throw new IllegalStateException("Session has no user defined");
        }
        final List<Group> filteredGroups = existingGroupsFromExcel.stream()
                .filter(group -> allVisibleForCurrentUser.contains(group.getId()))
                .filter(group -> group.isAdministratorOfThisGroup(user))
                .collect(Collectors.toList());
        final Map<String, Group> groupsMatrixMap = mapToNameOrdered(filteredGroups, group -> group._name().get());
        validateExcelGroups(groupsNamesFromExcel, groupsMatrixMap);

        return groupsMatrixMap;
    }

    @Nonnull
    private Map<String, Person> getPersons(Sheet firstSheet) {
        final List<String> personEmailFromExcel = personEmailFromExcel(firstSheet);
        final List<Person> existingPersonsFromExcel = new ArrayList<>();
        for (Iterable<String> batch : Iterables.partition(personEmailFromExcel, PersistentSchema.QUERY_ENTITIES_BATCH_SIZE)) {
            existingPersonsFromExcel.addAll(Person.SCHEMA.createQuery().where(Person.SCHEMA.prototype()._login().isIn(Lists.newArrayList(batch))).findList());
        }
        final Map<String, Person> personsMatrixMap = mapToNameOrdered(existingPersonsFromExcel, person -> person._login().get());
        validateExcelPersons(personEmailFromExcel, personsMatrixMap);
        return personsMatrixMap;
    }

    @Nonnull
    private List<String> personEmailFromExcel(Sheet firstSheet) {
        final Iterator<Row> rowIterator = firstSheet.rowIterator();
        skipRowWithGroupNames(rowIterator);
        return Streams.stream(rowIterator)
                .map(row -> row.getCell(userExcelSheetDefinition.getLastColumnIndex()))
                .filter(Objects::nonNull)
                .map(Cell::getStringCellValue).filter(StringUtils::isNotBlank)
                .map(String::trim)
                .collect(Collectors.toList());
    }

    @Nonnull
    private List<String> groupNamesFromExcel(Row headerRowWithGroupNames) {
        List<String> groupsNamesFromExcel = Lists.newArrayList();

        final Iterator<Cell> hederRowCellsIterator = headerRowWithGroupNames.iterator();
        // skip first cell in first row
        skipUserItems(hederRowCellsIterator);

        while (hederRowCellsIterator.hasNext()) {
            Cell cellWithGroupName = hederRowCellsIterator.next();
            final String groupName = cellWithGroupName.getStringCellValue().trim();
            if (StringUtils.isNotBlank(groupName))
                groupsNamesFromExcel.add(groupName);
        }
        return groupsNamesFromExcel;
    }

    private void skipRowWithGroupNames(Iterator<?> item) {
        if(item.hasNext())
            item.next();
    }

    private void skipUserItems(Iterator<?> item) {
        for(int i = 0; i <= userExcelSheetDefinition.getLastColumnIndex() && item.hasNext(); ++i)
            item.next();
    }

    @Nonnull
    private <T extends Principal> Map<String, T> mapToNameOrdered(List<T> itemsToMap, Function<T, String> functor) {
        return itemsToMap.stream()
                .sorted(Comparator.comparing(functor))
                .collect(MoreCollectors.toLinkedMap(functor, i -> i));
    }

    private void validateExcelGroups(List<String> groupsFromExcel, final Map<String, Group> groupsMatrixMap) {
        if (groupsFromExcel.stream().distinct().count() != groupsFromExcel.size()) {
            this.job.logText("Error: Multiple entries in the excel for same group are not allowed");
            throw new IllegalStateException("Multiple entries in the excel for same group are not allowed");
        }
        if (groupsFromExcel.size() != groupsMatrixMap.size()) {
            job.logText("Following groups doesn't exist or are misspelled or your are not permitted: ");
            final List<String> notValid = validate(groupsFromExcel, groupsMatrixMap);
            if (!notValid.isEmpty()) {
                job.logHtmlWithoutTimestamp(notValid.stream().map(Escaping.html::escape).collect(Collectors.joining("<br/>")));
            }
        }
    }

    private void validateExcelPersons(List<String> personsFromExcel, final Map<String, Person> personsMatrixMap) {
        if (personsFromExcel.stream().distinct().count() != personsFromExcel.size()) {
            this.job.logText("Error: Multiple entries in the excel for same login are not allowed");
            throw new IllegalStateException("Multiple entries in the excel for same login are not allowed");
        }
        if (personsFromExcel.size() != personsMatrixMap.size()) {
            job.logText("Following persons doesn't exist or are misspelled: ");
            final List<String> notValid = validate(personsFromExcel, personsMatrixMap);
            if (!notValid.isEmpty()) {
                job.logHtmlWithoutTimestamp(notValid.stream().map(Escaping.html::escape).collect(Collectors.joining("<br/>")));
            }
        }
    }

    @Nonnull
    private List<String> validate(List<String> personsFromExcel, final Map<String, ?> personsMatrixMap) {
        return personsFromExcel.stream()
            .filter(Predicates.not(personsMatrixMap::containsKey))
            .collect(Collectors.toList());
    }
}

######### end - content of file "group-all/overview/groupUserMatrix/importing/ImportFromExcelJob.java" #########

######### start - content of file "group-all/overview/groupUserMatrix/importing/SubmitImportHandler.java" #########

package cf.cplace.platform.frontend.handler.group.overview.groupUserMatrix.importing;

/**
 * Subsequently to the {@link ImportFromExcelHandler}, creates and starts the {@link ImportFromExcelJob}.
 */
public class SubmitImportHandler extends Handler implements PostOnlyHandler {

    private static final Message noFile = new Message() {
    };

    final Station SUCCESS = new JobCreatedJsonPage() {
        @Override
        protected PersistentJob getJob() {
            return job;
        }

        @Override
        protected String getTargetUrl() {
            return Forwarder.getFullUrl(ViewHandler.class);
        }
    };
    final Station INVALID = new Line() {
        @Override
        public void next(Forwarder f) {
            f.go(ImportFromExcelHandler.class);
        }
    };

    private MultipartFile uploadedFile;

    private PersistentJob job;

    @Override
    public void checkAccess() {
        uploadedFile = RequestLocal.getUploadedFile();
    }

    @Override
    public Station doBusinessLogic() {
        if (!isValidAndAddGenerateErrorMessagesIfNot()) {
            return INVALID;
        }

        String name = String.format("group_membership_import_%s.%s", Utilities.randomId(), XSSFWorkbookType.XLSX.getExtension());
        File destinationFile = new File(TenantResources.INSTANCE().getOrCreateUploadDirectory(), name);

        try {
            uploadedFile.transferTo(destinationFile.toPath());
        } catch (IOException e) {
            throw new IllegalStateException("failed to copy uploaded file", e);
        }

        job = PersistentJob.createJobAndStartInSeparateThread(ImportFromExcelJob.class, ImportFromExcelJob.paramsAsJson(destinationFile.getAbsolutePath()));
        return SUCCESS;

    }

    private static final Message wrongType = new Message() {
    };

    private boolean isValidAndAddGenerateErrorMessagesIfNot() {
        if (uploadedFile == null) {
            RequestLocal.addErrorMessage(noFile.get());
            return false;
        }

        if (!uploadedFile.getOriginalFilename().endsWith(".xlsx")) {
            RequestLocal.addErrorMessage(wrongType.get());
            return false;
        }
        return true;
    }
}

######### end - content of file "group-all/overview/groupUserMatrix/importing/SubmitImportHandler.java" #########

######### start - content of file "group-all/overview/groupUserMatrix/importing/importFromExcel.htm" #########
<form method="post" action="$submitUrl$" enctype="multipart/form-data" class="tricia-edit-form modal-form form-horizontal" cplace-validated-form cplace-form-provider>
	$[defaultDialogHeader()$
		<h1>$(title)$</h1>
	$defaultDialogHeader]$
	<div class="modal-body">
		$messages()$
		$showPart1()$
			$(excelFile)$
		$showPart2()$
			<input type="file" name="file" size="40" style="max-width:315px;" class="required" accept=".xlsx"/>
		$showPart3()$
	</div>
	$defaultDialogButtonBar(submit="save",cancel="cancel")$
</form>

######### end - content of file "group-all/overview/groupUserMatrix/importing/importFromExcel.htm" #########

######### start - content of file "group-all/overview/groupUserMatrix/state/Data.java" #########

package cf.cplace.platform.frontend.handler.group.overview.groupUserMatrix.state;

public class Data {
    public boolean excessiveData = false;

    public boolean excessiveDataUsers = false;

    public boolean excessiveDataGroups = false;

    public final Map<String, Map<String, Edge>> userId2groupId2edge = Maps.newHashMap();

    public final List<Node> users = Lists.newArrayList();

    public final List<Node> groups = Lists.newArrayList();

    public int numberOfFilteredUsers = -1;

    public int numberOfFilteredGroups = -1;

    public int groupPage = 1;

    public int userPage = 1;

    public String toJson() {
        return GsonUtil.getGsonWithModifiedDateSerializer().toJson(this, this.getClass());
    }
}

######### end - content of file "group-all/overview/groupUserMatrix/state/Data.java" #########

######### start - content of file "group-all/overview/groupUserMatrix/state/Edge.java" #########

package cf.cplace.platform.frontend.handler.group.overview.groupUserMatrix.state;

public class Edge {

    private static final Message isAdminInfo = new Message() {
    };

    private static final ParameterizedMessage indirectMembershipInfo = new ParameterizedMessage() {
    };

    public String toJson() {
        return GsonUtil.getGsonWithModifiedDateSerializer().toJson(this, this.getClass());
    }

    String userId;

    String groupId;

    boolean directMembership;

    String iconClass;

    String tooltip;

    boolean isAdmin;

    private static Edge createEdge(Person user, Group group, boolean isGroupAdmin) {
        Edge edge = new Edge();
        edge.userId = user.getId();
        edge.groupId = group.getId();
        edge.isAdmin = isGroupAdmin;
        return edge;
    }

    @Nonnull
    public static Edge createDirectMembershipEdge(Person user, Group group, boolean isGroupAdmin) {
        final Edge edge = createEdge(user, group, isGroupAdmin);
        edge.directMembership = true;
        edge.iconClass = "fa-check";
        return edge;
    }

    @Nonnull
    public static Edge createIsAdminEdge(Person user, Group group) {
        final Edge edge = createEdge(user, group, true);
        edge.directMembership = false;
        edge.iconClass = "";
        edge.isAdmin = true;
        edge.tooltip = isAdminInfo.get();
        return edge;
    }

    @Nonnull
    public static Edge createInheritedMembershipEdge(Person user, Group indirectGroup, Group group, boolean isGroupAdmin) {
        final Edge edge = createEdge(user, group, isGroupAdmin);
        edge.directMembership = false;
        edge.isAdmin = isGroupAdmin;
        edge.tooltip = indirectMembershipInfo.setParameters(indirectGroup.getName()).get();
        edge.iconClass = "fa-check-square";
        return edge;
    }
}

######### end - content of file "group-all/overview/groupUserMatrix/state/Edge.java" #########

######### start - content of file "group-all/overview/groupUserMatrix/state/Node.java" #########

package cf.cplace.platform.frontend.handler.group.overview.groupUserMatrix.state;

public class Node {
    public final String id;

    public final String name;

    public final String url;

    public boolean active = false;

    public Node(Principal p) {
        id = p.getId();
        name = p.getName();
        url = p.getUrl();
        if (p instanceof Person person) {
            active = person.isActiveAccount();
        }
    }
}

######### end - content of file "group-all/overview/groupUserMatrix/state/Node.java" #########

######### start - content of file "group-all/overview/groupUserMatrix/state/State.java" #########

package cf.cplace.platform.frontend.handler.group.overview.groupUserMatrix.state;

public class State {

    public Data data;

    public boolean userFiltersEnabled = true;

    public final String toggleMembershipUrl = Forwarder.getFullUrl(ToggleMembershipHandler.class);

    public final String filterUsersDialogUrl = Forwarder.getFullUrl(TableColumnFilterDialogHandler.class,
            new NameValue(NewPageConfig.FLEXI_COMPONENT_IDENTIFIER, Forwarder.getFullUrl(FilterUsersSpecificationHandler.class)),
            new NameValue("columnName", Person.SCHEMA.prototype()._name().getName())
    );

    public final String filterGroupsDialogUrl = Forwarder.getFullUrl(TableColumnFilterDialogHandler.class,
            new NameValue(NewPageConfig.FLEXI_COMPONENT_IDENTIFIER, Forwarder.getFullUrl(FilterGroupsSpecificationHandler.class)),
            new NameValue("columnName", Group.SCHEMA.prototype()._name().getName())
    );

    public final String loadDataUrl = Forwarder.getFullUrl(LoadDataHandler.class);

    public final String exportDataUrl = Forwarder.getFullUrl(Export2ExcelHandler.class);

    public final boolean mayExportGroupMemberships = ReadProtected.sessionUserMatchesOneOfThese(Application.getApplication()._mayExportGroupMemberships().getAssets());

    public String toJson() {
        return GsonUtil.getGsonWithModifiedDateSerializer().toJson(this, this.getClass());
    }
}

######### end - content of file "group-all/overview/groupUserMatrix/state/State.java" #########

######### start - content of file "group-all/overview/groupUserMatrix/view.htm" #########
<div class="cplace-group-user-matrix-wrapper" cplace-group-user-matrix="$state$">
    <div class="alert alert-warning" ng-cloak ng-if="matrixCtrl.state.data.excessiveData">
        $[(too_many_entries)$
        {{matrixCtrl.state.data.users.length}} $|$ {{matrixCtrl.state.data.numberOfFilteredUsers}} $|$ {{matrixCtrl.state.data.groups.length}} $|$
        {{matrixCtrl.state.data.numberOfFilteredGroups}}
        $too_many_entries]$
    </div>

    <div class="cplace-group-user-matrix">
        <div class="cplace-fixed-pane-scroll" cplace-fixed-pane-scroll>
            <cplace-fixed-pane-corner>
                <div class="info-area">
                    <div class="matrix-legends">
                        <h6>$(legend)$</h6>
                        <ul class="legends">
                            <li>
                                <i class="fa fa-check"></i> $(member)$
                            </li>
                            <li>
                                <i class="fa fa-check-square-o"></i> $(indirect_member)$
                            </li>
                            <li>
                                <i class="fa fa-square"></i> $(group_admin)$
                            </li>
                        </ul>
                    </div>
                    <div class="column-title header-title">
                        <div class="column-header">
                            <span><i class="far fa-users"></i> $(group)$</span>
                            <div class="btn-group btn-group-xs pull-right">
                                <a href="" class="btn btn-xs column_filter" ng-click="::matrixCtrl.filterGroups()"
                                   ng-class="matrixCtrl.hasGroupFilters() ? 'btn-primary' : 'btn-default'">
                                    <i class="fa fa-filter"></i>
                                </a>
                                <a href="" class="btn btn-xs column_filter" ng-click="::matrixCtrl.filterGroupsForSelectedUsers()"
                                   ng-class="matrixCtrl.filterGroupsByUsers ? 'btn-primary' : 'btn-default'"
                                   cplace-tooltipster="$(filter_groups_for_selected_users)$">
                                <span class="cf-stack">
                                    <i class="far fa-users main"></i>
                                    <i class="fa fa-filter stacked"></i>
                                </span>
                                </a>
                            </div>
                        </div>
                    </div>
                    <div class="gap-filler"></div>
                    <div class="row-title header-title">
                        <div class="btn-group btn-group-xs pull-right" ng-if="::matrixCtrl.state.userFiltersEnabled">
                            <a href="" class="btn " ng-click="::matrixCtrl.filterUsers()"
                               ng-class="matrixCtrl.hasUserFilters() ? 'btn-primary' : 'btn-default'">
                                <i class="fa fa-fw fa-filter"></i>
                            </a>
                            <a href="" class="btn" ng-click="::matrixCtrl.toggleOnlyUnassignedUsers()"
                               ng-class="matrixCtrl.onlyUnassignedUsers ? 'btn-primary' : 'btn-default'"
                               cplace-tooltipster="$(only_unassigned_users)$">
                                <i class="fa fa-fw fa-user-times"></i>
                            </a>
                            <a href="" class="btn" ng-click="::matrixCtrl.filterUsersForSelectedGroups()"
                               ng-class="matrixCtrl.filterUsersByGroups ? 'btn-primary' : 'btn-default'"
                               cplace-tooltipster="$(filter_users_for_selected_groups)$">
                                    <span class="cf-stack">
                                            <i class="fa fa-fw fa-user main"></i>
                                            <i class="fa fa-fw fa-filter stacked"></i>
                                        </span>
                            </a>
                            <a href="" class="btn btn-warning btn-xs export-button"
                               ng-show="matrixCtrl.showExportMembershipsButton()"
                               ng-click="::matrixCtrl.exportData()"
                               ng-cloak
                               cplace-tooltipster="$(export_memberships_tooltip)$">
                                <i class="fa fa-fw fa-download"></i>
                            </a>
                        </div>
                        <div class="header-user-message">
                            <i class="fa fa-fw fa-user"></i> $(user)$
                        </div>
                        <div class="cell-empty"></div>
                    </div>
                </div>
            </cplace-fixed-pane-corner>
            <cplace-fixed-pane-top>
                <div class="matrix-header-top">
                    <table class="column-headers" cellpadding="0" ng-cloak>
                        <tr>
                            <th ng-repeat="group in matrixCtrl.state.data.groups"
                                cplace-on-finish-render="{{::matrixCtrl.state.data.groups.length}}"
                                after-render-event="{{::matrixCtrl.afterRenderEvent}}">
                                <div class="column-header-wrapper">
                                    <div class="column-header" cplace-tooltipster>
                                        <a ng-href="{{::group.url}}">{{::group.name}}</a>
                                    </div>
                                </div>
                                <div class="text-center helper-arrow">
                                    <i class="fa fa-arrow-up"></i>
                                </div>
                            </th>
                            <th ng-if="matrixCtrl.state.data.excessiveDataGroups">
                                <div class="column-header-wrapper">
                                    <div class="column-header">
                                        <button class="btn btn-xs btn-primary" ng-click="matrixCtrl.loadMore('group')">$(load_more)$</button>
                                    </div>
                                </div>
                            </th>
                        </tr>
                    </table>
                </div>
            </cplace-fixed-pane-top>
            <cplace-fixed-pane-left>
                <div class="matrix-header-left">
                    <table class="row-headers" cellpadding="0" ng-cloak>
                        <tr ng-repeat="user in matrixCtrl.state.data.users">
                            <th>
                                <div class="row-header" cplace-tooltipster>
                                    <a ng-href="{{::user.url}}">{{::user.name}}
                                        <span class="tricia-user-disabled" cplace-tooltipster="$(disabled)$" ng-if="!user.active">
	                                        <i class="fa fa-times"></i>
                                        </span>
                                    </a>
                                </div>
                            </th>
                            <td class="helper-arrow">
                                <i class="fa fa-arrow-right"></i>
                            </td>
                        </tr>
                        <tr ng-if="matrixCtrl.state.data.excessiveDataUsers">
                            <td colspan="2">
                                <div class="load-more">
                                    <button class="btn btn-xs btn-primary" ng-click="matrixCtrl.loadMore('user')">$(load_more)$</button>
                                </div>
                            </td>
                        </tr>
                    </table>
                </div>
            </cplace-fixed-pane-left>
            <cplace-fixed-pane-content>
                <table class="matrix-data" cellpadding="0" ng-cloak>
                    <tr ng-repeat="user in matrixCtrl.state.data.users">
                        <td class="edge-container" ng-repeat="group in matrixCtrl.state.data.groups"
                            ng-class="matrixCtrl.canBeToggledClass(user,group)" ng-click="::matrixCtrl.toggleEdge(user, group)">
                            <div class="cell-edge" ng-class="matrixCtrl.getEdge(user, group).isAdmin ? 'admin' : ''">
                                <i class="fa"
                                   ng-class="matrixCtrl.getEdge(user, group).iconClass"
                                   ng-if="matrixCtrl.getEdge(user, group)"
                                   cplace-tooltipster="{{matrixCtrl.getEdge(user, group).tooltip}}"></i>

                            </div>
                        </td>
                        <td class="cell-edge" ng-if="matrixCtrl.state.data.excessiveDataGroups">
                            &hellip;
                        </td>
                    </tr>
                    <tr ng-if="matrixCtrl.state.data.excessiveDataUsers">
                        <td class="cell-edge"
                            ng-repeat="group in matrixCtrl.state.data.groups">
                            &vellip;
                        </td>
                        <td class="cell-edge" ng-if="matrixCtrl.state.data.excessiveDataGroups">
                            &#x22F1;
                        </td>
                    </tr>
                </table>
                <div class="loading" ng-if="!matrixCtrl.state.data">
                    <i class="fa fa-spin fa-spinner"></i> <i>$(loading)$</i>
                </div>
            </cplace-fixed-pane-content>
        </div>
    </div>
</div>

######### end - content of file "group-all/overview/groupUserMatrix/view.htm" #########

######### start - content of file "group-all/overview/groups.htm" #########
$[mayEditAllTypes()$
	<div class="btn-group">
		<a href="$groupTypeUrl$" class="btn btn-primary cplace-pjax-link">
			<i class="fa fa-pencil"></i> $(edit_group_type)$
		</a>
	</div>
$mayEditAllTypes]$

$[widgetLight()$
	$(all_groups)$
	$|$

	$table$
$widgetLight]$

$[widgetLight()$
	$(system_groups)$
	$|$
	<ul>
		$[systemGroups g$
			<li>
				$g.link(hideIcon)$
			</li>
		$systemGroups]$
	</ul>
$widgetLight]$

######### end - content of file "group-all/overview/groups.htm" #########

######### start - content of file "group-all/overview/users.htm" #########
$[widgetLight()$
    $(user)$
    $|$
    <div class="row">
        <div class="col-xs-12 col-sm-6 col-md-4">
            <div class="input-group">
                <input class="form-control tricia-do-not-focus"
                       type="text"
                       cplace-quick-search="tricia-invite-users-search-wrapper"
                       data-other-kind="person" data-extraction-enabled="false">
                <span class="input-group-btn">
                    <a href="$searchUsersUrl$" class="btn btn-default">
                        <i class="fa fa-search"></i> $(search_users)$
                    </a>
                </span>
            </div>
        </div>
    </div>
    <div class="btn-toolbar">
        $[mayCreateAndEditPersons()$
        <br>
        $[addUserActionExtensions ext$
        <div class="btn-group">
            $ext.action$
        </div>
        $addUserActionExtensions]$
        <div class="btn-group">
            <button data-toggle="link-modal" href="$newUserUrl$" class="btn btn-primary">
                <i class="fa fa-envelope"></i> $(invite_users)$
            </button>
        </div>
        $mayCreateAndEditPersons]$
        $[mayEditAllTypes()$
        <div class="btn-group">
            <a href="$userTypeUrl$" class="btn btn-primary cplace-pjax-link">
                <i class="fa fa-pencil"></i> $(edit_user_type)$
            </a>
        </div>
        $mayEditAllTypes]$
    </div>
$widgetLight]$

$[widgetLight()$
    $(all_users)$
    $|$
    $table$
$widgetLight]$

######### end - content of file "group-all/overview/users.htm" #########

######### start - content of file "group-all/view.htm" #########
$[this.isTechnicalGroup()$
<div class="alert alert-info">
    <p>$(technicalGroupInfo)$</p>
</div>
$isTechnicalGroup]$

<p>
    $this.description.show(noLabel,modalEditing="false")$
<p>

    $[widgetLight()$
    $(members)$
    $|$
$[this.isReader()$
    $[showAllMemberships$
        $this.membershipsForViewAndEdit.show(noInPlaceEditing,noLabel,showAllMemberships)$
    $]showAllMemberships[$
        $this.membershipsForViewAndEdit.show(noInPlaceEditing,noLabel)$
    $showAllMemberships]$
$]isReader[$
    $(members_not_visible)$
$isReader]$
$widgetLight]$

    $[widgetLight()$
    $(subGroups)$
    $|$
    $this.dummyGroupMemberships.show(noLabel,noInPlaceEditing)$
$widgetLight]$

    $[widgetLight()$
    $(attributes)$
$|$
    $this.attributes(includeRichStringAttributes="true",hideReadOnlyAttributes="false",includeHiddenInAttributesWidgetAttributes="false")$
$widgetLight]$

    $[widgetLight()$
    $(settings)$
    $|$
    $this.editableBlock(functionName="settings")$
$widgetLight]$

$[this.widgetLightWithLazyLoading(collapsed="true",functionName="permissions")$
    $(permissions)$
$widgetLightWithLazyLoading]$

######### end - content of file "group-all/view.htm" #########


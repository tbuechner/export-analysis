{
    "type": "custom_attribute",
    "code": "/**\n * HIGHCHART\n * @customType cf.cplace.solution.safe.currentIterationDashboard\n * @layout cf.cplace.solution.safe.iterationStatistics\n * @author Bastian Rang\n * @version 1.0\n * @description\n */\n\nconst DEBUG = false;\n\nconst PROGRAM_INCREMENT = {\n    TYPE: \"cf.cplace.solution.safe.programIncrement\",\n    ATTR: {\n        START_DATE: \"cf.cplace.solution.safe.startDate\",\n        END_DATE: \"cf.cplace.solution.safe.endDate\",\n        STATISTICS: \"cf.cplace.solution.safe.statsJson\",\n    },\n};\n\nconst CAPABILITY = {\n    TYPE: \"cf.cplace.solution.safe.capability\",\n    ATTR: {\n        STATUS: \"\",\n    },\n    STATUS: {\n        DRAFT: \"#10 - Draft\",\n        FUNNEL: \"#15 - Funnel\",\n        DEFINING: \"#25 - Analyzing\",\n        REDAY: \"#35 - Backlog\",\n        IMPLEMENTING: \"#45 - Implementing\",\n        READYFORTESTING: \"#55 - Validating\",\n        INTEGRATING: \"#65 - Deploying\",\n        READY: \"#75 - Releasing\",\n        DONE: \"#85 - Done\",\n        OBSOLETE: \"#95 - Obsolete\",\n    },\n    STATUS_MAP: {\n        \"#10 - Draft\": \"Draft\",\n        \"#15 - Funnel\": \"Funnel\",\n        \"#25 - Analyzing\": \"Analyzing\",\n        \"#35 - Backlog\": \"Backlog\",\n        \"#45 - Implementing\": \"Implementing\",\n        \"#55 - Validating\": \"Validating\",\n        \"#65 - Deploying\": \"Deploying\",\n        \"#75 - Releasing\": \"Releasing\",\n        \"#85 - Done\": \"Done\",\n        \"#95 - Obsolete\": \"Obsolete\",\n    },\n    CLASSIFICATION: {\n        ENABLER: \"#15 - enabler\",\n        STORY: \"#25 - story\",\n        MAINTENANCE: \"#35 - maintenance\",\n    },\n};\n\nconst pi = Array.from(pages)[0];\n\nif (pi?.getBuiltinFeatureValue(\"customType\") !== PROGRAM_INCREMENT.TYPE) {\n    throw new Error(\"Please provide a single program increment in the chart search.\");\n}\n\nconst startDate = pi.get(PROGRAM_INCREMENT.ATTR.START_DATE).withTimeAtStartOfDay();\nconst endDate = pi.get(PROGRAM_INCREMENT.ATTR.END_DATE).withTimeAtStartOfDay();\n\nlet statistics = null;\ntry {\n    statistics = JSON.parse(pi.get(PROGRAM_INCREMENT.ATTR.STATISTICS));\n    DEBUG && cplace.log(statistics);\n} catch (e) {\n    // @ts-ignore\n    return {\n        title: {\n            text: null,\n        },\n    };\n}\n\nif (!statistics || !statistics.archive || !statistics.current) {\n    // @ts-ignore\n    return {\n        title: {\n            text: null,\n        },\n    };\n}\n\nconst today = DateTime.parse(statistics.current.date).withTimeAtStartOfDay();\n\n// Define the data for Release Burndown\n/**\n * @type {Array}\n */\nlet data = statistics.archive.map((element) => {\n    const currentDate = DateTime.parse(element.date);\n\n    const currentData = {\n        day: currentDayNumber(startDate, currentDate),\n    };\n\n    DEBUG && cplace.log(element.cumulativeFlow);\n    Object.values(CAPABILITY.STATUS).forEach((statusName) => (currentData[statusName] = element.cumulativeFlow[statusName] || 0));\n\n    return currentData;\n});\n\nDEBUG && cplace.log(data);\n\ndata = sortByKey(data, \"day\");\n\nconst series = [];\n\nObject.values(CAPABILITY.STATUS).forEach((statusName) => {\n    series.push({\n        name: CAPABILITY.STATUS_MAP[statusName],\n        data: data.map((e) => e[statusName]),\n    });\n});\n\n// Create the chart\n// @ts-ignore\nreturn {\n    chart: {\n        type: \"area\",\n    },\n    title: {\n        text: \"Cumulative Flow Diagram\",\n    },\n    xAxis: {\n        categories: data.map((data) => data.day),\n    },\n    yAxis: {\n        title: {\n            text: \"Number of Capabilities\",\n        },\n    },\n    plotOptions: {\n        area: {\n            stacking: \"normal\",\n        },\n    },\n    series: series,\n};\n\nfunction sortByKey(array, key) {\n    return array.sort(function (a, b) {\n        var x = a[key];\n        var y = b[key];\n        return x < y ? -1 : x > y ? 1 : 0;\n    });\n}\n\nfunction currentDayNumber(startDate, currentDate) {\n    return Days.daysBetween(startDate.withTimeAtStartOfDay(), currentDate.withTimeAtStartOfDay()).getDays();\n}",
    "attributes": null,
    "type_name": null,
    "counter": 29
}
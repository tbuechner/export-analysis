{
    "type": "custom_attribute",
    "code": "/**\n * Identifier: highchart-programIncrement-progress\n * Type of chart: multi pie chart\n * Type of search pages: cf.cplace.solution.safe.team, cf.cplace.solution.safe.story\n * Functionality: visualizes different kinds of kpis\n * \n * INSTRUCTIONS TO ADD CHARTS\n * 1. Increase TOTAL_NUMBER_OF_KPIS +1\n * 2. Define Following Values\n *      - CX_TITLE \n *      - CX_ACTUAL\n *      - CX_ACTUAL_PERCENTAGE\n *      - CX_DISPLAY_NUMBER \n *      - CX_DISPLAY_TEXT \n *      - CX_COLOR \n * 3. Create chart\n *      - createChart(CX_TITLE, CX_ACTUAL_PERCENTAGE, CX_DISPLAY_NUMBER, CX_DISPLAY_TEXT, CX_COLOR) {\n * \n * \n * @author Lukas Scheiring (cF)\n * Last edited: 18.08.2022\n */\n\n//--------------------------------------------------------------------------------------//\n//                                       LOG AND DEBUG                                  //\n//--------------------------------------------------------------------------------------//\nconst DEBUG = false;\ncplace.setLogName('highchart-programIncrement-progress');\n\n//--------------------------------------------------------------------------------------//\n//                                       CONFIGURATION                                  //\n//--------------------------------------------------------------------------------------//\n\n//CHART COLOURS\nconst COLOURS = {\n    TEXT_COLOR : '#003653',\n    BACKGROUND_COLOR : '#ffffff',\n    GREY : 'gray',\n    RED: '#f30000',\n    DARK_RED : '#9e0000',\n    YELLOW: '#ffc700',\n    GREEN: '#5ab500',\n    BLUE : '#A6CAD8'\n}\n\n//CHART SETTINGS\nconst TOTAL_NUMBER_OF_KPIS = 4\nconst Y_POSITION = '40%'\n\n//LANGUAGE SETTINGS\nconst NAMINGS = {\n    de: {\n        CHART_TITLE: '',\n    },\n    en: {\n        CHART_TITLE: '',\n    }\n};\n\n//PLACEHOLDER\nconst PROGRAM_INCREMENT = {\n    TYPE : 'cf.cplace.solution.safe.programIncrement',\n    ATTR : {\n        TITLE : 'cf.cplace.solution.safe.title',\n        PROGRAM : 'cf.cplace.solution.safe.program',\n        START_DATE : 'cf.cplace.solution.safe.startDate',\n        END_DATE : 'cf.cplace.solution.safe.endDate',\n        PREDECESSOR : 'cf.cplace.solution.safe.predecessor',\n        PERIOD_STATUS : 'cf.cplace.solution.safe.periodStatus',\n        CAPACITY : 'cf.cplace.solution.safe.capacity'\n    }\n}\n\nconst TEAM = {\n    TYPE : 'cf.cplace.solution.safe.team',\n    ATTR : {\n        VELOCITY : 'cf.cplace.solution.safe.velocity',\n        CAPACITY : 'cf.cplace.solution.safe.capacity',\n    }\n}\n\nconst STORY = {\n    TYPE : 'cf.cplace.solution.safe.story',\n    ATTR : {\n        ITERATION : 'cf.cplace.solution.safe.iteration',\n        STATUS : 'cf.cplace.solution.safe.status',\n        STORY_POINTS : 'cf.cplace.solution.safe.storyPoints'\n    },\n    ENUM_STATUS : {\n        ANALYSIS : '#10 - analysis',\n        BACKLOG : '#20 - backlog',\n        IN_PROGRESS : '#40 - in progress',\n        DONE : '#50 - done',\n        OBSOLETE : '#60 - obsolete'\n    }\n}\n\nconst ITERATION = {\n    TYPE : 'cf.cplace.solution.safe.iteration',\n    ATTR: {\n        ITERATION : 'cf.cplace.solution.safe.iteration',\n        PI: 'cf.cplace.solution.safe.programIncrement',\n    }\n}\n\n\n\n//--------------------------------------------------------------------------------------//\n//                                       INITIALIZATION                                 //\n//--------------------------------------------------------------------------------------//\nlog('Start...')\nlet currentUser = cplace.utils().getCurrentUser()\nconst userLanguage = currentUser.getUserLanguage()\nlet programIncrement = embeddingPage;\nlet chartIndex = 0\n\n//Container\nlet teams = []\nlet stories = []\n\nlet series = []\nlet yAxis = []\nlet pane = []\n\n//Dates\nlet piStartDate = programIncrement.get(PROGRAM_INCREMENT.ATTR.START_DATE).withTimeAtStartOfDay()\nlet piEndDate = programIncrement.get(PROGRAM_INCREMENT.ATTR.END_DATE).withTimeAtStartOfDay()\nlet today = new DateTime().withTimeAtStartOfDay()\n\n//KPIs\nlet totalDaysOfPI = Days.daysBetween(piStartDate,piEndDate).getDays();\nlet passedDaysOfPI = getPassedDays (piStartDate, piEndDate, today, totalDaysOfPI)\n\n\n\n//let totalCapacity = 0;\nlet velocityOfLastPI = 0\nlet totalLoad = 0\nlet spDone = 0\n\n\n//--------------------------------------------------------------------------------------//\n//                                       PROCESSING STAGE                               //\n//--------------------------------------------------------------------------------------//\n\n//Group pages\ncplace.each(pages, page => {\n    switch (page.getBuiltinFeatureValue('customType')) {\n        case TEAM.TYPE:\n            teams.push(page)\n            break;\n        case STORY.TYPE:\n            stories.push(page)\n            break;\n        default:\n            break;\n    }\n})\n\n//calculate velocity\nlet lastPI = programIncrement.get(PROGRAM_INCREMENT.ATTR.PREDECESSOR)\nif (lastPI) {\n    log('Last PI: ' + lastPI.getName())\n    let iterations = lastPI.getIncomingPages(ITERATION.TYPE, ITERATION.ATTR.PI)\n    cplace.each(iterations, iteration => {\n        log('Check iteration: ' + iteration.getName())\n        let storiesOfIteration = iteration.getIncomingPagesFromAllSpaces(STORY.TYPE, STORY.ATTR.ITERATION)\n        cplace.each(storiesOfIteration, storyOfIteration => {\n            log('Check story: ' + storyOfIteration.getName())\n            if (storyOfIteration.get(STORY.ATTR.STATUS) === STORY.ENUM_STATUS.DONE) {\n                velocityOfLastPI += (storyOfIteration.get(STORY.ATTR.STORY_POINTS) || 0)\n            }\n        })\n    })\n}\n\n\n\n\n//Load + SP done\ncplace.each(stories, story => {\n    let storyPoints = story.get(STORY.ATTR.STORY_POINTS) || 0\n    totalLoad += storyPoints\n\n    if (story.get(STORY.ATTR.STATUS) === STORY.ENUM_STATUS.DONE) {\n        spDone += storyPoints\n    }\n\n})\n\n\n\n//--------------------------------------------------------------------------------------//\n//                                       KPIs & CHART                                   //\n//--------------------------------------------------------------------------------------//\n\n//Chart 1 - passed days\nconst C1_TITLE = 'Days passed'\nconst C1_ACTUAL = passedDaysOfPI\nconst C1_ACTUAL_PERCENTAGE = Math.round((passedDaysOfPI / totalDaysOfPI) * 100)  ? Math.round((passedDaysOfPI / totalDaysOfPI) * 100) : 0;\nconst C1_DISPLAY_NUMBER = C1_ACTUAL_PERCENTAGE + '%'\nconst C1_DISPLAY_TEXT = '<b>DAYS PASSED</b><br>' + passedDaysOfPI + '/' + totalDaysOfPI\nconst C1_COLOR = COLOURS.GREEN\n\ncreateChart(C1_TITLE, C1_ACTUAL_PERCENTAGE, C1_DISPLAY_NUMBER, C1_DISPLAY_TEXT, C1_COLOR)\n\n\n//KPI 2 - Load vs Capacity\n//Capacity + Velocity\nlet totalCapacity = programIncrement.get(PROGRAM_INCREMENT.ATTR.CAPACITY);\nif(totalCapacity){\nconst C2_TITLE = 'Load vs. Capacity'\nconst C2_ACTUAL = totalLoad\nconst C2_ACTUAL_PERCENTAGE= Math.round((totalLoad / totalCapacity) * 100) || 0\nconst C2_DISPLAY_NUMBER = C2_ACTUAL_PERCENTAGE + '%'\nconst C2_DISPLAY_TEXT = '<b>LOAD VS. CAPACITY</b><br>' + totalLoad + '/' + totalCapacity\n\nlet c2_color = COLOURS.GREEN\nif (Math.round((totalLoad / totalCapacity) * 100) >= 90) {\n    c2_color = COLOURS.YELLOW\n    if (Math.round((totalLoad / totalCapacity) * 100) > 100) {\n        c2_color = COLOURS.RED\n    }    \n}    \n\ncreateChart(C2_TITLE, C2_ACTUAL_PERCENTAGE, C2_DISPLAY_NUMBER, C2_DISPLAY_TEXT, c2_color)\n}\n\n//KPI 3 - Story Points done\nconst C3_TITLE = 'Done SP'\nconst C3_ACTUAL = spDone\nconst C3_ACTUAL_PERCENTAGE = Math.round((spDone / totalLoad) * 100) || 0\nconst C3_DISPLAY_NUMBER = C3_ACTUAL_PERCENTAGE + '%'\nconst C3_DISPLAY_TEXT = '<b>DONE SP</b><br>' + spDone + '/' + totalLoad\nconst C3_COLOR = COLOURS.GREEN\n\ncreateChart(C3_TITLE, C3_ACTUAL_PERCENTAGE, C3_DISPLAY_NUMBER, C3_DISPLAY_TEXT, C3_COLOR)\n\n\n//KPI 4 - Velocity\nconst C4_TITLE = 'Velocity of Last PI'\nconst C4_ACTUAL = 100\nconst C4_ACTUAL_PERCENTAGE = 100\nconst C4_DISPLAY_NUMBER = Math.round(velocityOfLastPI)\nconst C4_DISPLAY_TEXT = '<b>VELOCITY OF LAST PI</b><br>over all Teams'\nconst C4_COLOR = COLOURS.BLUE\n\ncreateChart(C4_TITLE, C4_ACTUAL_PERCENTAGE, C4_DISPLAY_NUMBER, C4_DISPLAY_TEXT, C4_COLOR)\n\n\n\n\nlog('End...')\nreturn {\n    chart: {\n        type: 'solidgauge',\n    },\n    \n    title: {\n        text: NAMINGS[userLanguage].CHART_TITLE\n    },\n    series: series,\n    yAxis: yAxis,\n    pane: pane,\n    tooltip : {\n        enabled: false\n    },\n    plotOptions: {\n        solidgauge : {\n            enableMouseTracking: false,\n        }\n    },\n}\n\n\n//--------------------------------------------------------------------------------------//\n//                                       BUSINESS FUNCTIONS                             //\n//--------------------------------------------------------------------------------------//\n\nfunction createChart(title, actualRel, displayNumber, displayText, color) {\n    series.push(getSeriesObject(title, actualRel, displayNumber, chartIndex, color))\n    yAxis.push(getYAxisObject(displayText, chartIndex, 0, 100))\n    pane.push(getPaneObject(getXAxisPosition(chartIndex), Y_POSITION))\n    chartIndex++;\n}\n\nfunction getXAxisPosition (kpiIndex) {\n    return 120 * (kpiIndex + 1) / (TOTAL_NUMBER_OF_KPIS + 1) -10 + '%'\n}\n\nfunction getPassedDays (piStartDate, piEndDate, today, totalDaysOfPI) {\n    if (today.isBefore(piStartDate)) {\n        return 0\n    }\n    if (piEndDate.isBefore(today)) {\n        return totalDaysOfPI\n    }\n    return Days.daysBetween(piStartDate,today).getDays()\n}\n\nfunction getSeriesObject (title, actual, label, index, color) {\n    return {\n        name : title,\n        data : [{\n            name : title,\n            color : color,\n            y : actual,\n            innerRadius: '80%',\n            radius: '100%',\n            dataLabels : {\n                format :  '<h1 style=\"font-size:13\">' + label+ '</h1>',\n                borderWidth: 0,\n                color: COLOURS.GREY,\n                verticalAlign: 'middle',\n                useHTML: true\n            },\n        }],\n        yAxis: index,\n    }\n}\n\n\nfunction getYAxisObject (axisTitle, index, min, max) {\n    return {\n        min: min,\n        max: max,\n        pane : index,\n        title: {\n            text: axisTitle,\n            useHTML: true,\n            y: 110,\n        },\n        labels: {\n            enabled : false\n        },\n        /*stops: [\n            [0.1, COLOURS.GREEN], // green\n            [0.9, COLOURS.YELLOW], // yellow\n            [0.99, COLOURS.RED] // red\n        ],*/\n        lineWidth: 0,\n        tickWidth: 0,\n        tickAmount : 0,\n        minorTickWidth: 0\n    }\n}\n\nfunction getPaneObject (xPosition, yPosition) {\n    return {\n        center: [xPosition, yPosition],\n        size: '50%',\n        startAngle: 0,\n        endAngle: 360,\n        background: {\n            backgroundColor: '#EEE',\n            borderColor: null,\n            innerRadius: '80%',\n            outerRadius: '100%',\n            shape: 'arc'\n        }\n    }\n}\n\n//--------------------------------------------------------------------------------------//\n//                                       HELPER FUNCTIONS                               //\n//--------------------------------------------------------------------------------------//\n\n\n/**\n * Log to cplace\n * @param {any} text \n */\nfunction log(text) {\n    if (!DEBUG) {\n        return\n    }\n    let logOutput = (typeof text !== 'string') ? JSON.stringify(text) : text;\n\n    cplace.log(logOutput);\n}\n\n/**\n * \n * @param {any} msg \n * @returns \n */\nfunction timeSinceStart(msg) {\n    if (!DEBUG) {\n        return\n    }\n    let now = new Date().getTime();\n    cplace.log([(now - START_TIME) + 'ms', (now - LAST_TIME) + 'ms', msg].join(' -- '))\n    LAST_TIME = now;\n}",
    "attributes": null,
    "type_name": null,
    "counter": 34
}
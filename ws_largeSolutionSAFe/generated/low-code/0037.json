{
    "type": "custom_attribute",
    "code": "/**\n * HIGHCHART\n * @customType cf.cplace.solution.safe.solution\n * @layout default layout\n * @author Christopher W\u00f6lfle <christopher.woelfle@cplace.com>\n * @version 1.0\n * @description Displays the timeline with Programm Increments, Safe Events and Safe Milestones. Chart is zoomable and draggable\n */\n\n// set the distinguishing log name\ncplace.setLogName(\"Highcharts - Timeline Overview\");\n\n/***** Start configuration *****/\nconst chartBackgroundColor = \"#FFFFFF\";\nconst lineColor = \"#303038\";\n\nconst piColor = \"#dddddd\";\nconst safeMilestoneColor = \"#3D8F8C\";\nconst eventColor = \"#366C81\";\n\nconst milestonePlotBandColor = \"#E2F3F2\";\nconst eventPlotBandColor = \"#E2EEF3\";\nconst todayPlotline = \"lightgrey\";\n\nconst showMonthsBeforeToday = 3;\nconst showMonthsAfterToday = 9;\n/***** End configuration *****/\n\nconst MILESTONE = {\n    TYPE: \"cf.milestone\",\n    ATTR: {\n        SCHEDULE: \"containingSchedule\",\n        DATE: \"date\",\n        FEATURE_DEPENDENCY: \"cf.cplace.solution.safe.dependency\",\n        TASKCLASS: \"activityClass\",\n    },\n};\nconst FEATURE = {\n    TYPE: \"cf.cplace.solution.safe.feature\",\n    ATTR: {\n        PROGRAM: \"cf.cplace.solution.safe.program\",\n    },\n};\nconst SCHEDULE = {\n    TYPE: \"cf.schedule\",\n    ATTR: {},\n};\nconst TASK_CLASS = {\n    TYPE: \"cf.activityClass\",\n    ATTR: {\n        COLOR: \"barColor\",\n        BORDERCOLOR: \"borderColor\",\n        SHAPE: \"milestoneShape\",\n    },\n};\nconst SAFE_MILESTONE = {\n    TYPE: \"cf.cplace.solution.safe.safeMilestone\",\n    ATTR: {\n        DATE: \"cf.cplace.solution.safe.date\",\n    },\n};\nconst PI = {\n    TYPE: \"cf.cplace.solution.safe.programIncrement\",\n    ATTR: {\n        START: \"cf.cplace.solution.safe.startDate\",\n        END: \"cf.cplace.solution.safe.endDate\",\n    },\n};\nconst EVENT = {\n    TYPE: \"cf.cplace.solution.safe.event\",\n    ATTR: {\n        START_DATE: \"cf.cplace.solution.safe.startDate\",\n        END_DATE: \"cf.cplace.solution.safe.endDate\",\n        SOLUTION: \"cf.cplace.solution.safe.solution\",\n    },\n};\n\nconst CAPABILITY = ({\n    TYPE: \"cf.cplace.solution.safe.capability\",\n    ATTR: {\n        SOLUTION: \"cf.cplace.solution.safe.solution\",\n    },\n});\n\nfunction main() {\n    /** @type {ChartContext} */\n    const context = {\n        today: new Date(),\n        start: getStartDate(showMonthsBeforeToday),\n        end: getEndDate(showMonthsAfterToday),\n        solution: embeddingPage.get(CAPABILITY.ATTR.SOLUTION),\n        schedules: [],\n        programIncrements: [],\n        events: [],\n        safeMilestones: [],\n        series: [],\n        plotlines: [],\n        categories: [\"<b>Program Increments</b>\", \"<b>Events</b>\", \"<b>SAFe Milestones</b>\"],\n        yIndex: 0,\n    };\n\n    categorizeData(pages, context);\n    createPiSeries(context);\n    createEventSeries(context);\n    createMilestoneSeries(context);\n    //create plotline between SAFe parts and schedules\n    //ctx.plotLines.push(createPlotline(yIndex - 0.5, 1.25));\n    createScheduleSeries(context);\n\n    return createChartConfig(context);\n}\n\n/**\n * Sort pages by their type and them to the context\n * @param {Page[]} pages\n * @param {ChartContext} ctx\n */\nfunction categorizeData(pages, ctx) {\n    cplace.each(pages, (page) => {\n        let type = page.getBuiltinFeatureValue(\"customType\");\n        if (type === SCHEDULE.TYPE) {\n            ctx.schedules.push(page);\n        } else if (type === PI.TYPE) {\n            ctx.programIncrements.push(page);\n        } else if (type === SAFE_MILESTONE.TYPE) {\n            ctx.safeMilestones.push(page);\n        } else if (type === EVENT.TYPE) {\n            ctx.events.push(page);\n        }\n    });\n}\n\n/**\n * Create pi series\n * @param {ChartContext} ctx\n */\nfunction createPiSeries(ctx) {\n    const piData = [];\n    cplace.each(ctx.programIncrements, (pi) => {\n        piData.push(createDataItem(pi.getName(), pi.get(PI.ATTR.START), pi.get(PI.ATTR.END), ctx.yIndex, piColor));\n    });\n    ctx.yIndex++;\n    ctx.series.push({\n        name: \"Program Increments\",\n        showInLegend: false,\n        tooltip: {\n            headerFormat: \"<b>{point.key}</b><br>\",\n            pointFormat: \"Start: {point.x: %Y-%m-%d}<br/> End: {point.x2: %Y-%m-%d}\",\n        },\n        data: piData,\n        dataLabels: {\n            enabled: true,\n            format: \"<b>{point.name}</b>\",\n        },\n        states: {\n            inactive: {\n                opacity: 1,\n            },\n        },\n    });\n    return piData;\n}\n\n/**\n * Create event series\n * @param {ChartContext} ctx\n */\nfunction createEventSeries(ctx) {\n    let eventData = [];\n    cplace.each(ctx.events, (event) => {\n        eventData.push(\n            createDataItem(\n                event.getName(),\n                event.get(EVENT.ATTR.START_DATE),\n                event.get(EVENT.ATTR.END_DATE),\n                ctx.yIndex,\n                eventColor\n            )\n        );\n    });\n    ctx.yIndex++;\n    ctx.series.push({\n        name: \"Events\",\n        showInLegend: false,\n        tooltip: {\n            headerFormat: \"<b>{point.key}</b><br>\",\n            pointFormat: \"Start: {point.x: %Y-%m-%d}<br/> End: {point.x2: %Y-%m-%d}\",\n        },\n        data: eventData,\n        dataLabels: {\n            enabled: true,\n            format: \"<b>{point.name}</b>\",\n        },\n        states: {\n            inactive: {\n                opacity: 1,\n            },\n        },\n    });\n}\n\n/**\n * Create safe milestone series\n * @param {ChartContext} ctx\n */\nfunction createMilestoneSeries(ctx) {\n    let safeMilestoneData = [];\n    cplace.each(ctx.safeMilestones, (safeMilestone) => {\n        safeMilestoneData.push(\n            createMilestoneDataItem(\n                safeMilestone.getName(),\n                safeMilestone.get(SAFE_MILESTONE.ATTR.DATE),\n                ctx.yIndex,\n                safeMilestoneColor,\n                safeMilestoneColor\n            )\n        );\n    });\n    ctx.yIndex++;\n    ctx.series.push(createMilestoneSerie(\"SAFe Milestones\", safeMilestoneData));\n}\n/**\n * Create Chart configuration\n * @param {ChartContext} ctx\n * @returns\n */\nfunction createChartConfig(ctx) {\n    return {\n        chart: {\n            type: \"xrange\",\n            backgroundColor: chartBackgroundColor,\n            panning: true,\n            panKey: \"shift\",\n            zoomType: \"x\",\n        },\n        title: {\n            text: \"\",\n        },\n        yAxis: {\n            title: {\n                text: \"\",\n            },\n            categories: ctx.categories,\n            reversed: true,\n            type: \"category\",\n            plotBands: [\n                {\n                    color: eventPlotBandColor,\n                    from: 0.5,\n                    to: 1.5,\n                    borderColor: \"white\",\n                    borderWidth: 2,\n                    zIndex: 0,\n                },\n                {\n                    color: milestonePlotBandColor,\n                    from: 1.5,\n                    to: 2.5,\n                    borderColor: \"white\",\n                    borderWidth: 2,\n                    zIndex: 0,\n                },\n            ],\n        },\n        xAxis: {\n            type: \"datetime\",\n            min: Date.UTC(ctx.start.getFullYear(), ctx.start.getMonth(), ctx.start.getDate(), 0, 0, 0, 0),\n            max: Date.UTC(ctx.end.getFullYear(), ctx.end.getMonth(), ctx.end.getDate(), 23, 59, 59, 59),\n            plotLines: [\n                {\n                    dashStyle: \"dash\",\n                    color: todayPlotline,\n                    width: 2,\n                    value: Date.UTC(ctx.today.getFullYear(), ctx.today.getMonth(), ctx.today.getDate(), 0, 0, 0, 0),\n                    zIndex: 1,\n                },\n                ...ctx.plotlines,\n            ],\n        },\n        tooltip: {\n            enabled: true,\n        },\n        series: ctx.series,\n    };\n}\n\n/**\n * Create schedule series\n * @param {ChartContext} ctx\n */\nfunction createScheduleSeries(ctx) {\n    cplace.each(ctx.schedules, (schedule) => {\n        let relevantSchedule = false;\n        let scheduleData = [];\n        let milestones = schedule.getIncomingPages(MILESTONE.TYPE, MILESTONE.ATTR.SCHEDULE);\n        cplace.each(milestones, (milestone) => {\n            let featureDependency = milestone.get(MILESTONE.ATTR.FEATURE_DEPENDENCY);\n            let isProgramRelevant = false;\n            cplace.each(featureDependency, (feature) => {\n                let featureProgram = feature.get(FEATURE.ATTR.PROGRAM);\n                if (featureProgram && featureProgram.getId() === ctx.solution.getId()) {\n                    isProgramRelevant = true;\n                }\n            });\n            if (isProgramRelevant) {\n                relevantSchedule = true;\n                scheduleData.push(createScheduleMilestoneDataItem(milestone, ctx.yIndex));\n            }\n        });\n        if (relevantSchedule) {\n            ctx.categories.push(createCategory(schedule));\n            ctx.series.push(createMilestoneSerieSchedule(schedule.getName(), scheduleData));\n            ctx.yIndex++;\n        }\n    });\n}\n\n//FUNCTIONS\nfunction createDataItem(name, start, end, y, color) {\n    let startDate = new Date(start);\n    let endDate = new Date(end);\n    return {\n        name: name,\n        x: Date.UTC(startDate.getFullYear(), startDate.getMonth(), startDate.getDate(), 0, 0, 0, 0),\n        x2: Date.UTC(endDate.getFullYear(), endDate.getMonth(), endDate.getDate(), 23, 59, 59, 99),\n        y: y,\n        color: color,\n    };\n}\n\nfunction getMilestoneShape(milestoneShape) {\n    if (milestoneShape === \"Diamond\") return \"diamond\";\n    if (milestoneShape === \"Arrow Up\") return \"diamond\";\n    if (milestoneShape === \"Arrow Down\") return \"diamond\";\n    if (milestoneShape === \"Triangle Up\") return \"triangle\";\n    if (milestoneShape === \"Triangle Down\") return \"triangle-down\";\n    if (milestoneShape === \"Triangle Left\") return \"triangle\";\n    if (milestoneShape === \"Triangle Right\") return \"triangle\";\n    if (milestoneShape === \"Circle\") return \"circle\";\n    if (milestoneShape === \"Square\") return \"square\";\n    if (milestoneShape === \"Star\") return \"diamond\";\n    if (milestoneShape === \"Ramp Down\") return \"diamond\";\n    if (milestoneShape === \"Ramp Up\") return \"diamond\";\n}\n\nfunction createMilestoneDataItem(name, date, y, color, borderColor) {\n    let milestoneDate = new Date(date);\n    return {\n        name: name,\n        x: Date.UTC(milestoneDate.getFullYear(), milestoneDate.getMonth(), milestoneDate.getDate(), 0, 0, 0, 0),\n        y: y,\n        marker: {\n            fillColor: color,\n            lineColor: borderColor,\n            lineWidth: 1,\n        },\n    };\n}\n\nfunction createScheduleMilestoneDataItem(milestone, y) {\n    let name = milestone.getName();\n    let milestoneDate = new Date(milestone.get(MILESTONE.ATTR.DATE));\n    let color = milestone.getOptional(MILESTONE.ATTR.TASKCLASS).get(TASK_CLASS.ATTR.COLOR);\n    let borderColor = milestone.getOptional(MILESTONE.ATTR.TASKCLASS).get(TASK_CLASS.ATTR.BORDERCOLOR);\n    let milestoneShape = getMilestoneShape(milestone.getOptional(MILESTONE.ATTR.TASKCLASS).get(TASK_CLASS.ATTR.SHAPE));\n    let features = milestone.get(MILESTONE.ATTR.FEATURE_DEPENDENCY);\n    let featureList = \"<b>Requested Features:</b>\";\n    cplace.each(features, (feature) => {\n        featureList = featureList + \"<br>\" + feature.getName();\n    });\n\n    return {\n        name: name,\n        x: Date.UTC(milestoneDate.getFullYear(), milestoneDate.getMonth(), milestoneDate.getDate(), 0, 0, 0, 0),\n        y: y,\n        features: featureList,\n        marker: {\n            fillColor: color,\n            lineColor: borderColor,\n            lineWidth: 1,\n            symbol: milestoneShape,\n        },\n    };\n}\n\nfunction createMilestoneSerie(name, dataSeries) {\n    return {\n        name: name,\n        type: \"scatter\",\n        //stickyTracking: false,\n        showInLegend: false,\n        marker: {\n            enabled: true,\n            symbol: \"diamond\",\n            lineWidth: 5,\n            radius: 12,\n        },\n        tooltip: {\n            headerFormat: \"<b>{point.key}</b><br>\",\n            pointFormat: \"{point.x: %Y-%m-%d}\",\n        },\n        data: dataSeries,\n        states: {\n            inactive: {\n                opacity: 1,\n            },\n        },\n    };\n}\n\nfunction createMilestoneSerieSchedule(name, dataSeries) {\n    return {\n        name: name,\n        type: \"scatter\",\n        //stickyTracking: false,\n        showInLegend: false,\n        marker: {\n            enabled: true,\n            symbol: \"diamond\",\n            lineWidth: 5,\n            radius: 12,\n        },\n        tooltip: {\n            useHTML: true,\n            headerFormat: \"<b>{point.key}</b><br>\",\n            pointFormat: \"{point.x: %Y-%m-%d}<br>{point.features}\",\n        },\n        data: dataSeries,\n        states: {\n            inactive: {\n                opacity: 1,\n            },\n        },\n    };\n}\n\nfunction createPlotline(value, width) {\n    return {\n        color: lineColor,\n        width: width,\n        value: value,\n        dashStyle: \"solid\",\n    };\n}\n\nfunction getStartDate(months) {\n    let today = new Date();\n    let startDate = today;\n    startDate.setMonth(today.getMonth() - months);\n    return startDate;\n}\n\nfunction getEndDate(months) {\n    let today = new Date();\n    let endDate = today;\n    endDate.setMonth(today.getMonth() + months);\n    return endDate;\n}\n\nfunction createCategory(object) {\n    let name = object.getName();\n    let url = object.getUrl();\n    return '<a href=\"' + url + '\">' + name + \"</a>\";\n}\n\n/**\n * Object containing context information for the chart.\n * @typedef {Object} ChartContext\n * @property {Date} today - The current date.\n * @property {Date} start - The start date for the chart.\n * @property {Date} end - The end date for the chart.\n * @property {Page} solution - The embeddingPage object representing the current solution.\n * @property {Page[]} schedules - An array of pages representing schedules.\n * @property {Page[]} programIncrements - An array of pages representing program increments.\n * @property {Page[]} events - An array of pages representing events.\n * @property {Page[]} safeMilestones - An array of pages representing SAFe milestones.\n * @property {any[]} series - An array of series\n * @property {any[]} plotlines - An array of plotlines\n * @property {string[]} categories - An array of categories\n * @property {number} yIndex - y-index\n */\n\n// @ts-ignore\nreturn main();",
    "attributes": null,
    "type_name": null,
    "counter": 37
}
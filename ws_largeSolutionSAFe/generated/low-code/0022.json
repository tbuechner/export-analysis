{
    "type": "cf.cplace.platform.ChangeListener",
    "code": "/**\n * CHANGE LISTENER\n * @customType cf.cplace.solution.safe.dependency\n * @attribute cf.cplace.solution.safe.status\n * @author Christopher W\u00f6lfle <christopher.woelfle@cplace.com>\n * @version 1.0\n * @description Sync the dependendy status to the capabilities\n */\ncplace.setLogName(\"listener_syncConflicStateToCapabilities\");\n\nfunction main() {\n    /** @type {Page<'cf.cplace.solution.safe.dependency'>} */\n    const dependency = changeEvent.getEntity();\n\n    const predecessor = dependency.get(\"cf.cplace.solution.safe.predecessor\");\n    const successor = dependency.get(\"cf.cplace.solution.safe.successor\");\n\n    if (!predecessor || !successor) {\n        cplace.log(\"No predecessor or successor found for dependency \" + dependency.getName());\n        return;\n    }\n    cplace.log(\"Updating predecessor\");\n    updateCapabilityConflictState(dependency, predecessor);\n    cplace.log(\"Updating successor\");\n    updateCapabilityConflictState(dependency, successor);\n}\n\n/**\n * Set the cf.cplace.solution.safe.conflictState parameter of the capabilities that are dependent\n * @param {Page<'cf.cplace.solution.safe.dependency'>} dependency\n * @param {Page<\"cf.cplace.solution.safe.capability\" | \"cf.cplace.solution.safe.safeMilestone\">} capabilityOrMilestone\n * @returns\n */\nfunction updateCapabilityConflictState(dependency, capabilityOrMilestone) {\n    const dependencyStatus = dependency.get(\"cf.cplace.solution.safe.status\");\n    /** @type {CplaceTypes[\"cf.cplace.solution.safe.capability\"][\"cf.cplace.solution.safe.conflictState\"]} */\n    let newConflictState;\n    const isCapability =\n        capabilityOrMilestone?.getBuiltinFeatureValue(\"customType\") === \"cf.cplace.solution.safe.capability\";\n\n    if (!isCapability) {\n        // Only the capability has the conflictState\n        return;\n    }\n\n    if (dependencyStatus === \"25 - conflict\") {\n        newConflictState = \"#25 - conflict\";\n    } else {\n        // No conflict\n        newConflictState = null;\n    }\n\n    cplace.actions().updatePage(capabilityOrMilestone, {\n        customAttributes: {\n            \"cf.cplace.solution.safe.conflictState\": newConflictState,\n        },\n    });\n    capabilityOrMilestone.registerAttributeForRefresh(\"cf.cplace.solution.safe.conflictState\");\n}\n\nmain();",
    "attributes": [
        "cf.cplace.solution.safe.status"
    ],
    "type_name": "cf.cplace.solution.safe.dependency",
    "counter": 22
}
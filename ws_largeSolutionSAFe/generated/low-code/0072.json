{
    "type": "custom_attribute",
    "code": "/**\n * @author Rakshit Midha\n * @description Creates Flow Time highchart\n */\n\n//--------------------------------------------------------------------------------------//\n//                                       LOG AND DEBUG                                  //\n//--------------------------------------------------------------------------------------//\ncplace.setLogName('highchart-flow-time');\n\n\n//--------------------------------------------------------------------------------------//\n//                                       CONFIGURATION                                  //\n//--------------------------------------------------------------------------------------//\n\nconst CAPABILITY = {\n  TYPE: 'cf.cplace.solution.safe.capability',\n  ATTR: {\n    'FLOW_TIME': 'cf.cplace.solution.safe.flowTime'\n  }\n};\n\nconst COLUMN_COLOR = '#26285d';\n\n//--------------------------------------------------------------------------------------//\n//                                       INITIALIZATION                                 //\n//--------------------------------------------------------------------------------------//\nconst flowTimeData = getFlowTimeData(pages);\nconst sortedFlowTimeData = sortFlowTimeData(flowTimeData);\nconst seriesData = createSeriesData(sortedFlowTimeData);\nconst averageCapabilities = calculateAverageCapabilities(seriesData)\n\nconst config = {\n  title: {\n    text: 'Flow Time'\n  },\n  legend: {enabled: false},\n  chart: {\n    type: 'column',\n    spacingBottom: 25,\n    spacingTop: 20\n  },\n  tooltip: {\n    headerFormat: null,\n    pointFormat: 'Capability Count: {point.y}'\n  },\n  xAxis: {\n    plotLines: [{\n      color: 'red',\n      value: averageCapabilities,\n      width: '1',\n      dashStyle: 'LongDash',\n      zIndex: 4,\n      label: {\n        x: -15,\n        text: '<span style=\"font-size:12px;\">Average: ' + averageCapabilities + '</span>'\n      },\n    }],\n    title: {\n      text: 'Flow Time (days)'\n    },\n    gridLineColor: '#68686CFF',\n    gridLineWidth: 0.3,\n    tickLength: 0,\n    tickInterval: 5,\n  },\n  yAxis: {\n    title: {\n      text: 'Capability Count'\n    },\n    allowDecimals: false\n  },\n  plotOptions: {\n    series: {\n      pointWidth: 30,\n      color: COLUMN_COLOR\n    }\n  },\n  series: [{\n    data: Object.values(seriesData)\n  }]\n}\n\nreturn config;\n\n/**\n * Creates a map of Flow Time values along with the number of occurrences\n * @returns An object with Flow Time values as keys and number of occurrences as values\n */\nfunction getFlowTimeData(pages) {\n  let data = {};\n  cplace.each(pages, page => {\n    const flowTime = round5(page.get(CAPABILITY.ATTR.FLOW_TIME));\n    if (flowTime) {\n      let value = data[flowTime];\n\n      if (value) {\n        data[flowTime] = ++value;\n      } else {\n        data[flowTime] = 1;\n      }\n    }\n  });\n  return data;\n}\n\n/**\n * Round the number to the previous multiple of 5\n */\nfunction round5(x) {\n  return Math.ceil(x / 5) * 5;\n}\n\n/**\n * Sorts the Flow Time data in ascending order\n */\nfunction sortFlowTimeData(flowTimeData) {\n  return Object.keys(flowTimeData).sort().reduce(\n    (obj, key) => {\n      obj[key] = flowTimeData[key];\n      return obj;\n    },\n    {}\n  );\n}\n\n/**\n * Creates the series data for the highchart\n */\nfunction createSeriesData(data) {\n  const formattedData = [];\n  let keys = Object.keys(data), len = keys[keys.length - 1];\n\n  for (let i = 0; i <= len; i++) {\n    if (data[i]) {\n      formattedData.push(data[i])\n    } else {\n      formattedData.push(0)\n    }\n  }\n\n  return formattedData;\n}\n\nfunction calculateAverageCapabilities(transformedSeries) {\n  let totalDays = 0;\n  let capabilities = 0;\n  Object.values(transformedSeries).forEach(seriesData => {\n    if(seriesData) {\n      totalDays++;\n      capabilities+=seriesData;\n    }\n  });\n\n  return (Math.round(capabilities/totalDays * 100) / 100).toFixed(2);\n}",
    "attributes": null,
    "type_name": null,
    "counter": 72
}
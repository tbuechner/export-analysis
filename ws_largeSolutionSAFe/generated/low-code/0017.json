{
    "type": "cf.cplace.platform.Validator",
    "code": "/**\n * VALIDATOR\n * @customType cf.cplace.solution.safe.capability\n * @attribute cf.cplace.solution.safe.state\n * @author Christopher W\u00f6lfle <christopher.woelfle@cplace.com>\n * @version 1.1\n * @description Checks if a state transition is allowed (a capability has to go through every state one-by-one, jumping, e.g., from \"Funnel\" to \"Done\" is not allowed)\n */\n\nconst DEBUG = false;\n\nconst SOLUTION = {\n    TYPE: \"cf.cplace.solution.safe.solution\",\n};\n\nconst CAPABILITY = /** @type {const} */ ({\n    TYPE: \"cf.cplace.solution.safe.capability\",\n    ATTR: {\n        STATE: \"cf.cplace.solution.safe.state\",\n    },\n});\n/** Mapping of previous and next state */\nconst STATUS_MAP = /** @type {const} */ ({\n    \"#10 - Draft\": \"#15 - Funnel\",\n    \"#15 - Funnel\": \"#25 - Analyzing\",\n    \"#25 - Analyzing\": \"#35 - Backlog\",\n    \"#35 - Backlog\": \"#45 - Implementing\",\n    \"#45 - Implementing\": \"#55 - Validating\",\n    \"#55 - Validating\": \"#65 - Deploying\",\n    \"#65 - Deploying\": \"#75 - Releasing\",\n    \"#75 - Releasing\": \"#85 - Done\",\n});\n\nconst WIP_MAP = /** @type {const} */ ({\n    \"#15 - Funnel\": \"cf.cplace.solution.safe.funnelWIPLimit\",\n    \"#25 - Analyzing\": \"cf.cplace.solution.safe.analyzingWIPLimit\",\n    \"#35 - Backlog\": \"cf.cplace.solution.safe.backlogWIPLimit\",\n    \"#45 - Implementing\": \"cf.cplace.solution.safe.implementingWIPLimit\",\n    \"#55 - Validating\": \"cf.cplace.solution.safe.validatingWIPLimit\",\n    \"#65 - Deploying\": \"cf.cplace.solution.safe.deployingWIPLimit\",\n    \"#75 - Releasing\": \"cf.cplace.solution.safe.releasingWIPLimit\",\n});\n\n/**\n *\n * @param {Page<'cf.cplace.solution.safe.capability'>} page\n * @returns\n */\nfunction checkIfTransitionIsAllowed(page) {\n    /**\n     * don't run on view only\n     */\n    if (!!page.getBuiltinFeatureValue(\"creator\") && page.getId() === page.getRealId()) {\n        return;\n    }\n\n    const newStatus = page.get(CAPABILITY.ATTR.STATE);\n\n    DEBUG && cplace.log(page.getBuiltinFeatureValue(\"creator\"));\n\n    if (!page.getBuiltinFeatureValue(\"creator\")) {\n        // If page is created, only the draft state is allowed\n        DEBUG && cplace.log(\"creation dialog: \" + newStatus);\n        if (newStatus === \"#10 - Draft\") {\n            return;\n        }\n        return messages.get(\"creation-state-not-allowed\");\n    }\n\n    DEBUG && cplace.log(\"New Status: \" + newStatus);\n\n    // Get the real page (with previous values)\n    const search = new Search();\n    search.add(Filters.uid(page.getRealId()));\n    const realPage = Iterables.getFirst(search.findAllPages(), null);\n\n    if (realPage === null) {\n        return;\n    }\n    const currentStatus = realPage.get(CAPABILITY.ATTR.STATE);\n    DEBUG && cplace.log(currentStatus);\n\n    /**\n     * Status hasn't changed\n     */\n    if (currentStatus === newStatus) {\n        return;\n    }\n    if (newStatus === \"#85 - Done\") {\n        return;\n    }\n    // If the new status is not defined as successor in the STATUS MAP, then return an error\n    if (newStatus !== STATUS_MAP[currentStatus]) {\n        return messages.get(\"statechange-not-allowed\");\n    }\n    /** @type {number|null} */\n    const wipLimit = getSolution(page.getSpaceId()).get(WIP_MAP[newStatus]);\n\n    if (wipLimit === null) {\n        // No WIP limit set\n        return;\n    }\n\n    const numberOfCapabilities = getNumberOfCapabilitiesInState(newStatus);\n    if (wipLimit - numberOfCapabilities <= 0) {\n        return messages.get(\"statechange-not-allowed\");\n    }\n}\n\n/**\n *\n * @param {string} workspace\n * @returns {Page<'cf.cplace.solution.safe.solution'>}\n */\nfunction getSolution(workspace) {\n    const result = new Search().add(Filters.type(SOLUTION.TYPE)).add(Filters.space(workspace)).findAllPages();\n    return Iterables.getFirst(result, null);\n}\n\n/**\n * @param {CplaceTypes['cf.cplace.solution.safe.capability'][\"cf.cplace.solution.safe.state\"]} state\n */\nfunction getNumberOfCapabilitiesInState(state) {\n    const numberOfCapabilities = new Search()\n        .add(Filters.type(CAPABILITY.TYPE))\n        .add(Filters.customAttribute(CAPABILITY.ATTR.STATE).eq(state))\n        .getHitCount();\n    return numberOfCapabilities;\n}\n\nreturn checkIfTransitionIsAllowed(page);",
    "attributes": null,
    "type_name": "cf.cplace.solution.safe.state",
    "counter": 17
}
{
    "type": "custom_attribute",
    "code": "/**\n * HIGHCHART\n * @customType cf.cplace.solution.safe.metricsDashboard\n * @layout cf.cplace.solution.safe.layout.flowEfficiency\n * @author Christopher W\u00f6lfle <christopher.woelfle@cplace.com>\n * @version 1.0\n * @description Displays a dummy flow efficiency chart\n */\n\nconst SEED = 1234;\n\nfunction generateDummyData() {\n    const efficiencies = [];\n    // Generate numbers in 0.05 intervals from 0 to 1\n    for (let i = 0; i <= 20; i++) {\n        efficiencies.push(i * 0.05);\n    }\n    const data = efficiencies.map((e) => ({\n        x: e*100,\n        y: getRandomNumber(0, Math.round(20 * (e + 0.01))),\n    }));\n\n    return data;\n}\n\nfunction main() {\n    const data = generateDummyData();\n    return generateConfig(data);\n}\n\nfunction generateConfig(data) {\n    return {\n        chart: {\n            type: \"column\",\n        },\n        title: {\n            text: \"Flow Efficiency\",\n        },\n        xAxis: {\n            title: {\n                text: \"Flow Efficiency\",\n            },\n            labels: {format: \"{value:.1f}%\"}\n        },\n        yAxis: {\n            title: {\n                text: \"Number of Capabilities\",\n            },\n            \n        },\n        tooltip: {\n            headerFormat: \"\",\n            pointFormat: \"<b>{point.y}</b><br/>capabilities with a flow efficiency of {point.x:.1f}%\",\n        },\n        plotOptions: {\n            series: {\n                borderWidth: 0,\n                dataLabels: {\n                    enabled: true,\n                    format: \"{point.y}\",\n                },\n            },\n        },\n        series: [{ name: \"Flow Efficiency\", data }],\n    };\n}\n\nclass PseudoRandomNumberGenerator {\n    constructor(seed) {\n        this.a = 1664525;\n        this.c = 1013904223;\n        this.m = Math.pow(2, 32);\n        this.seed = seed;\n    }\n\n    random() {\n        this.seed = (this.a * this.seed + this.c) % this.m;\n        return this.seed / this.m;\n    }\n}\n\nconst prng = new PseudoRandomNumberGenerator(SEED);\n\nfunction getRandomNumber(min, max) {\n    // Calculate the range of the random number\n    const range = max - min;\n\n    // Generate a random number within the range\n    const randomNumber = prng.random() * range + min;\n\n    // Round the random number to the nearest integer\n    const roundedNumber = Math.round(randomNumber);\n\n    return roundedNumber;\n}\n\n// @ts-ignore\nreturn main();",
    "attributes": null,
    "type_name": null,
    "counter": 70
}
{
    "type": "custom_attribute",
    "code": "/**\n * @author Rakshit Midha\n * @description Creates Flow Velocity highchart\n */\n\n//--------------------------------------------------------------------------------------//\n//                                       LOG AND DEBUG                                  //\n//--------------------------------------------------------------------------------------//\ncplace.setLogName('highchart-flow-velocity');\n\n\n//--------------------------------------------------------------------------------------//\n//                                       CONFIGURATION                                  //\n//--------------------------------------------------------------------------------------//\n\nconst CAPABILITY = {\n  TYPE: 'cf.cplace.solution.safe.capability',\n  ATTR: {\n    PROGRAM_INCREMENT: 'cf.cplace.solution.safe.programIncrement',\n  }\n};\n\nconst COLUMN_COLOR = '#26285d';\n\n//--------------------------------------------------------------------------------------//\n//                                       INITIALIZATION                                 //\n//--------------------------------------------------------------------------------------//\nconst flowDistributionSeries = getFlowVelocitySeries(pages);\nconst categories = getCategories(flowDistributionSeries);\nconst transformedSeries = transformSeries(flowDistributionSeries);\nconst averageCapabilities = calculateAverageCapabilities(transformedSeries);\n\nconst config = {\n  title: {\n    text: 'Flow Velocity'\n  },\n  chart: {\n    type: 'column',\n    spacingBottom: 25,\n    spacingTop: 20\n  },\n  legend: {enabled: false},\n  tooltip: {\n    headerFormat: '<b>{point.x}</b><br/>',\n    pointFormat: 'Capabilities: {point.y}'\n  },\n  xAxis: {\n    categories: categories,\n    title: {\n      text: 'Program Iteration'\n    }\n  },\n  yAxis: {\n    plotLines: [{\n      color: 'red',\n      value: averageCapabilities,\n      width: '1',\n      dashStyle: 'LongDash',\n      zIndex: 4,\n      label: {\n        text: '<span style=\"font-size:12px;\">Average Velocity: ' + averageCapabilities + '</span>'\n      },\n    }],\n    title: {\n      text: 'Capabilities'\n    },\n    allowDecimals: false,\n  },\n  plotOptions: {\n    series: {\n      pointWidth: 40,\n      color: COLUMN_COLOR\n    },\n    column: {\n      dataLabels: {\n        enabled: true,\n        crop: false,\n        overflow: 'none'\n      }\n    }\n  },\n  series: [{\n    data: transformedSeries\n  }]\n}\n\nreturn config;\n\n/**\n * Creates an array of a map of Program Iteration names and Capability count\n */\nfunction getFlowVelocitySeries(pages) {\n  let series = [];\n  cplace.each(pages, programIncrement => {\n    const capabilities = programIncrement.getIncomingPages(CAPABILITY.TYPE, CAPABILITY.ATTR.PROGRAM_INCREMENT);\n    let capabilitiesCount = 0;\n    cplace.each(capabilities, () => capabilitiesCount++);\n\n    let seriesObject = {};\n    seriesObject['name'] = programIncrement.getName();\n    seriesObject['count'] = capabilitiesCount;\n    series.push(seriesObject);\n  });\n\n  return series.sort(function (a, b) {\n    let x = a['name'];\n    let y = b['name'];\n    return ((x < y) ? -1 : ((x > y) ? 1 : 0));\n  });\n}\n\n/**\n * Computes the name of all Program Iterations\n */\nfunction getCategories(flowDistributionSeries) {\n  let categories = [];\n  flowDistributionSeries.forEach(seriesObject => {\n    categories.push(seriesObject['name']);\n  })\n  return categories;\n}\n\n/**\n * Transforms the Flow Velocity series to count of Capabilities\n */\nfunction transformSeries(sortedFlowDistributionSeries) {\n  let transformedSeries = [];\n  sortedFlowDistributionSeries.forEach(seriesObject => {\n    transformedSeries.push(seriesObject['count']);\n  });\n  return transformedSeries;\n}\n\nfunction calculateAverageCapabilities(transformedSeries) {\n  return (Math.round(transformedSeries.reduce( ( p, c ) => p + c, 0 ) / transformedSeries.length * 100) / 100).toFixed(2);\n}",
    "attributes": null,
    "type_name": null,
    "counter": 73
}
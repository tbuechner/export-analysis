{
    "type": "custom_attribute",
    "code": "/**\n * @author Nepomuk Heimberger\n * @description Creates Flow Predictability highchart\n */\n\n//--------------------------------------------------------------------------------------//\n//                                       LOG AND DEBUG                                  //\n//--------------------------------------------------------------------------------------//\ncplace.setLogName('highchart-flow-predictability');\n\n\n//--------------------------------------------------------------------------------------//\n//                                       CONFIGURATION                                  //\n//--------------------------------------------------------------------------------------//\n\nconst OBJECTIVE = {\n  TYPE: 'cf.cplace.solution.safe.objective',\n  ATTR: {\n    PROGRAM_INCREMENT: 'cf.cplace.solution.safe.timebox',\n    BUSINESS_VALUE: 'cf.cplace.solution.safe.businessValue',\n    ACTUAL_VALUE: 'cf.cplace.solution.safe.actualValue',\n    COMMITMENT: {\n      INTERNAL_NAME: 'cf.cplace.solution.safe.commitment',\n      ENUM_VALUES: {\n        COMMITTED: '#15 - Committed',\n        UNCOMMITTED: '#25 - Uncommitted'\n      }\n    },\n     SAFE_LEVEL: {\n      INTERNAL_NAME: 'cf.cplace.solution.safe.SAFeLevel',\n      ENUM_VALUES: {\n        SOLUTION: '#15 - Solution',\n        PROGRAM: '#25 - Program',\n        TEAM: '#35 - Team'\n      }\n    }\n  }\n};\n\n\nconst COLUMN_COLOR1 = '#26285d';\nconst COLUMN_COLOR2 = '#b8d4fa';\nconst LINE_COLOR = '#368F8B';\nconst LINE_COLOR_2 = '#155451';\n\n//--------------------------------------------------------------------------------------//\n//                                       INITIALIZATION                                 //\n//--------------------------------------------------------------------------------------//\n\nconst flowPredictabilitySeries = getFlowPredictabilitySeries(pages);\nconst sortedSeries = sortSeriesByName(flowPredictabilitySeries);\nconst categories = getCategories(sortedSeries);\nconst transformedSeries = transformSeries(sortedSeries);\n\nconst config = {\n  title: {\n    text: 'Flow Predictability Measure'\n  },\n  xAxis: {\n    categories: categories,\n    title: {\n      text: ''\n    }\n  },\n  yAxis: [{\n    title: {\n      text: 'Objectives Achieved'\n    },\n    allowDecimals: false,\n  },\n  {\n    title: {\n      text: 'Predictability',\n      style: {\n        color: LINE_COLOR\n      },\n    },\n    labels: {\n      style: {\n        color: LINE_COLOR\n      },\n    },    \n    plotLines: [{\n      color: LINE_COLOR_2,\n      value: 80,\n      width: '1',\n      dashStyle: 'LongDash',\n      zIndex: 4\n    },\n    {\n      color: LINE_COLOR_2,\n      value: 100,\n      width: '1',\n      dashStyle: 'LongDash',\n      zIndex: 4\n    }],\n    opposite: true\n  }],\n  plotOptions: {\n    series: {\n      pointWidth: 50\n    }\n  },\n  colors: [COLUMN_COLOR1, COLUMN_COLOR2],\n  series: Object.values(transformedSeries)\n}\n\nreturn config;\n\n\n\n/**\n * Creates an array of a map of Program Iteration names and program predictability measure\n */\nfunction getFlowPredictabilitySeries(pages) {\n  let piSeries = []; //[{'name': '', 'values': []}]\n\n  cplace.each(pages, programIncrement => {\n    const objectives = programIncrement.getIncomingPages(OBJECTIVE.TYPE, OBJECTIVE.ATTR.PROGRAM_INCREMENT);\n    let totalBusinessValue = 0\n    let totalActualValue = 0\n    cplace.each(objectives, objective => {\n      const safeLevel = objective.get(OBJECTIVE.ATTR.SAFE_LEVEL.INTERNAL_NAME);\n      if (safeLevel === OBJECTIVE.ATTR.SAFE_LEVEL.ENUM_VALUES.SOLUTION) {\n        const commitment = objective.get(OBJECTIVE.ATTR.COMMITMENT.INTERNAL_NAME);\n        if (commitment === OBJECTIVE.ATTR.COMMITMENT.ENUM_VALUES.COMMITTED) {\n          totalBusinessValue += objective.get(OBJECTIVE.ATTR.BUSINESS_VALUE);\n        }\n        totalActualValue += objective.get(OBJECTIVE.ATTR.ACTUAL_VALUE);\n      }\n    });\n\n    let seriesObject = {};\n    seriesObject['name'] = programIncrement.getName();\n    const flowPredictabilityMeasure = totalBusinessValue ? Math.round((totalActualValue / totalBusinessValue) * 100) * 100 / 100 : 0;\n    seriesObject['values'] = [flowPredictabilityMeasure, totalBusinessValue, totalActualValue]\n    piSeries.push(seriesObject);\n  });\n\n  return piSeries;\n}\n/**\n * Computes the name of all Program Iterations\n */\nfunction getCategories(flowDistributionSeries) {\n  let categories = [];\n  flowDistributionSeries.forEach(seriesObject => {\n    categories.push(seriesObject['name']);\n  })\n  return categories;\n}\n\n/**\n * Transforms the array of series objects to the actual highchart configuration series\n */\nfunction transformSeries(series) {\n  let flowPredictabilitySeries = {\n    flowPredictabilityMeasure: {type: 'spline', 'name': 'Flow Predictability Measure', yAxis:1, data: [],tooltip: {valueSuffix: ' %'}, color: LINE_COLOR},\n    totalBusinessValue: {type: 'column', name: 'Planned Business Value', yAxis:0, data: []},\n    actualBusinessValue: {type: 'column', name: 'Actual Business Value', yAxis:0, data: []},\n    // percentageDottedLine80: {type: 'spline', dashStyle: 'shortdot', data: []},\n    // percentageDottedLine100: {type: 'spline', dashStyle: 'shortdot', data: []}\n  };\n\n  series.forEach(seriesObject => {\n    flowPredictabilitySeries['flowPredictabilityMeasure']['data'].push(seriesObject['values'][0]);\n    flowPredictabilitySeries['totalBusinessValue']['data'].push(seriesObject['values'][1]);\n    flowPredictabilitySeries['actualBusinessValue']['data'].push(seriesObject['values'][2]);\n    // flowPredictabilitySeries['percentageDottedLine80']['data'].push(80);\n    // flowPredictabilitySeries['percentageDottedLine100']['data'].push(100);\n  });\n\n  return flowPredictabilitySeries;\n}\n\n/**\n * Sorts the series by name\n */\nfunction sortSeriesByName(series) {\n  return series.sort(function (a, b) {\n    let x = a['name'];\n    let y = b['name'];\n    return ((x < y) ? -1 : ((x > y) ? 1 : 0));\n  });\n}\n/**\n * Returns an array of all IDs of the pages\n */\nfunction getPagesUids(pages) {\n    let pagesUids = [];\n    cplace.each(pages, page => {\n        pagesUids.push(page.getId())\n    })\n    return pagesUids;\n}",
    "attributes": null,
    "type_name": null,
    "counter": 71
}
{
    "type": "custom_attribute",
    "code": "/**\n * LOWCODE BUTTON\n * @customType cf.cplace.solution.safe.solution\n * @author Christopher W\u00f6lfle <christopher.woelfle@cplace.com>\n * @version 1.0\n * @description Set previous current and next pi\n */\n\ncplace.setLogName(\"lowcodebutton_setAsCurrentPi\");\n\nconst DEBUG = true;\n\nconst PROGRAMM_INCREMENT = /** @type {const} */ ({\n    TYPE: \"cf.cplace.solution.safe.programIncrement\",\n    ATTR: {\n        SOLUTION: \"cf.cplace.solution.safe.solution\",\n        START_DATE: \"cf.cplace.solution.safe.startDate\",\n        END_DATE: \"cf.cplace.solution.safe.endDate\",\n        PERIOD_STATUS: \"cf.cplace.solution.safe.periodStatus\",\n        PREDECESSOR: \"cf.cplace.solution.safe.predecessor\",\n    },\n    ENUM: {\n        PERIOD_STATUS: {\n            DONE: \"#15 - done\",\n            ACTIVE: \"#25 - active\",\n        },\n    },\n});\n\nconst SOLUTION = /** @type {const} */ ({\n    TYPE: \"cf.cplace.solution.safe.solution\",\n});\n\nfunction checkAccess() {\n    return true;\n}\n\nfunction call() {\n    const newState = {\n        \"cf.cplace.solution.safe.previousPi\": {},\n        \"cf.cplace.solution.safe.currentPi\": {},\n        \"cf.cplace.solution.safe.nextPi\": {},\n    };\n    /** @type {Page<'cf.cplace.solution.safe.solution'> | null} */\n    const solution = Iterables.getFirst(pages, null);\n    if (!solution) {\n        DEBUG && cplace.log(\"No solution provided\");\n        return {\n            message: {\n                de: \"Keine Solution in der Suche gefunden\",\n                en: \"No solution provided via Search\",\n            },\n        };\n    }\n\n    const currentPi = solution.get(\"cf.cplace.solution.safe.currentPi\");\n    if (!currentPi) {\n        DEBUG && cplace.log(\"No current PI\");\n        log.logText({\n            de: \"Kein aktuelles PI gesetzt\",\n            en: \"No current PI\",\n        });\n        return;\n    }\n\n    const newPreviousPi = currentPi;\n    let newCurrentPi = solution.get(\"cf.cplace.solution.safe.nextPi\");\n\n    if (!newCurrentPi) {\n        // If we don't have a next PI specified yet on the solution, we try to get the next PI where the predecessor is set to the current PI (newPreviousPi)\n        newCurrentPi = getNextPi(newPreviousPi);\n        if (!newCurrentPi) {\n            DEBUG && cplace.log(\"No next PI defined\");\n            log.logText({\n                de: \"Kein n\u00e4chstes PI definiert\",\n                en: \"No next PI defined\",\n            });\n            return;\n        }\n    }\n    const newNextPi = getNextPi(newCurrentPi);\n\n    if (!newNextPi) {\n        DEBUG && cplace.log(\"No next PI defined\");\n        log.logText({\n            de: \"Kein \u00fcbern\u00e4chstes PI definiert\",\n            en: \"No PI defined after next PI\",\n        });\n        return;\n    }\n    cplace.log(`New next PI: ${newNextPi.getName()}`);\n\n    newState[\"cf.cplace.solution.safe.previousPi\"] = newPreviousPi;\n    newState[\"cf.cplace.solution.safe.currentPi\"] = newCurrentPi;\n    newState[\"cf.cplace.solution.safe.nextPi\"] = newNextPi;\n\n    cplace.actions().updatePage(solution, {\n        customAttributes: newState,\n    });\n\n    // Set new previous PI to done\n    cplace.actions().updatePage(currentPi, {\n        customAttributes: {\n            [PROGRAMM_INCREMENT.ATTR.PERIOD_STATUS]: PROGRAMM_INCREMENT.ENUM.PERIOD_STATUS.DONE,\n        },\n    });\n\n    // Set new current PI to active\n    cplace.actions().updatePage(newCurrentPi, {\n        customAttributes: {\n            [PROGRAMM_INCREMENT.ATTR.PERIOD_STATUS]: PROGRAMM_INCREMENT.ENUM.PERIOD_STATUS.ACTIVE,\n        },\n    });\n    cplace.actions().refresh();\n\n    return {\n        message: {\n            de: `Das n\u00e4chste PI wurde erfolgreich auf ${newCurrentPi.getName()} gesetzt`,\n            en: `Successfully set the current PI to ${newCurrentPi.getName()}`,\n        },\n    };\n}\n\n/**\n *\n * @param {Page<'cf.cplace.solution.safe.programIncrement'>} programIncrement\n */\nfunction getNextPi(programIncrement) {\n    /** @type {Page<'cf.cplace.solution.safe.programIncrement'>[]} */\n    const results = Array.from(\n        programIncrement.getIncomingPages(PROGRAMM_INCREMENT.TYPE, PROGRAMM_INCREMENT.ATTR.PREDECESSOR)\n    );\n\n    if (results.length > 1) {\n        log.logText({\n            de: `Es gibt mehr als ein PI (${results\n                .map((pi) => pi.getName())\n                .join(\", \")}) bei dem der Vorg\u00e4nger ${programIncrement.getName()} ist`,\n            en: `There is more than one PI (${results\n                .map((pi) => pi.getName())\n                .join(\", \")}) where the predecessor is: ${programIncrement.getName()}`,\n        });\n        return null;\n    }\n    if (results.length === 0) {\n        return null;\n    }\n    return results[0];\n}\n\n\nreturn { checkAccess, call };",
    "attributes": null,
    "type_name": null,
    "counter": 66
}
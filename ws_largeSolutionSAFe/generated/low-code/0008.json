{
    "type": "cf.cplace.platform.ChangeListener",
    "code": "/**\n * CHANGE LISTENER\n * @customType cf.cplace.solution.safe.programIncrement\n * @attribute cf.cplace.solution.safe.title\n * @author Christopher W\u00f6lfle <christopher.woelfle@cplace.com>\n * @version 1.0\n * @description Automatically set the predecessor of a Program Increment upon creation\n */\n\ncplace.setLogName(\"listener_setPredecessorOnCreation\");\n\nconst DEBUG = true;\n\nconst PROGRAMM_INCREMENT = /** @type {const} */ ({\n    TYPE: \"cf.cplace.solution.safe.programIncrement\",\n    ATTR: {\n        SOLUTION: \"cf.cplace.solution.safe.solution\",\n        START_DATE: \"cf.cplace.solution.safe.startDate\",\n        END_DATE: \"cf.cplace.solution.safe.endDate\",\n        PERIOD_STATUS: \"cf.cplace.solution.safe.periodStatus\",\n        PREDECESSOR: \"cf.cplace.solution.safe.predecessor\",\n    },\n    ENUM: {\n        PERIOD_STATUS: {\n            DONE: \"#15 - done\",\n            ACTIVE: \"#25 - active\",\n        },\n    },\n});\n\nfunction main() {\n    if (!changeEvent.isNew()) {\n        return;\n    }\n    /** @type {Page<'cf.cplace.solution.safe.programIncrement'>} */\n    const programmIncrement = changeEvent.getEntity();\n\n    const predecessor = getPreviousPiByDate(programmIncrement);\n\n    if (!predecessor) {\n        DEBUG && cplace.log(\"No predecessor found\");\n        return;\n    }\n\n    DEBUG && cplace.log(\"Predecessor: \" + predecessor);\n\n    cplace.actions().updatePage(programmIncrement, {\n        customAttributes: {\n            [PROGRAMM_INCREMENT.ATTR.PREDECESSOR]: predecessor,\n        },\n    });\n    programmIncrement.registerAttributeForRefresh(PROGRAMM_INCREMENT.ATTR.PREDECESSOR);\n}\n\n/**\n * Get the previous PI by date\n * @param {Page<'cf.cplace.solution.safe.programIncrement'>} programIncrement\n */\nfunction getPreviousPiByDate(programIncrement) {\n    const solution = programIncrement.get(\"cf.cplace.solution.safe.solution\");\n    if (!solution) {\n        return null;\n    }\n    const startDate = programIncrement.get(PROGRAMM_INCREMENT.ATTR.START_DATE);\n    if (!startDate) {\n        return null;\n    }\n\n    /** @type {Page<'cf.cplace.solution.safe.programIncrement'>[]} */\n    const pisOfSolution = Array.from(\n        solution.getIncomingPages(PROGRAMM_INCREMENT.TYPE, PROGRAMM_INCREMENT.ATTR.SOLUTION)\n    );\n\n    const piDateMap = {};\n    pisOfSolution.forEach((pi) => {\n        if (pi.getId() == programIncrement.getId()) {\n            return;\n        }\n        piDateMap[pi.getId()] = { date: pi.get(PROGRAMM_INCREMENT.ATTR.START_DATE), page: pi };\n    });\n\n    let closestDateDiff = Infinity;\n    let closestPageId = null;\n\n    // Find the closest previous PI to the startDate of the programmIncrement\n    for (const [pageId, data] of Object.entries(piDateMap)) {\n        const pageDate = data.date;\n        const dateDiff = Days.daysBetween(pageDate.withTimeAtStartOfDay(), startDate.withTimeAtStartOfDay()).getDays();\n\n        if (dateDiff > 0 && dateDiff < closestDateDiff) {\n            closestDateDiff = dateDiff;\n            closestPageId = pageId;\n        }\n    }\n    if (!closestPageId) {\n        return null;\n    }\n\n    return piDateMap[closestPageId].page;\n}\n\nmain();",
    "attributes": [
        "cf.cplace.solution.safe.title"
    ],
    "type_name": "cf.cplace.solution.safe.programIncrement",
    "counter": 8
}
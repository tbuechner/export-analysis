{
    "type": "custom_attribute",
    "code": "/**\n * Displays all work items of the backlog as Pie grouped by the classification of their type\n *\n * @author Daniel Fader\n * @version 12.07.2023\n */\n\n//--------------------------------------------------------------------------------------//\n//                                       LOG AND DEBUG                                  //\n//--------------------------------------------------------------------------------------//\nconst DEBUG = false;\ncplace.setLogName('highchart_capacity-allocation');\n\n//--------------------------------------------------------------------------------------//\n//                                       CONFIGURATION                                  //\n//--------------------------------------------------------------------------------------//\nconst COLORS = {\n    TYPE_CLASSIFICATION: {\n        CAPABILITIY: '#61a89d',\n        ENABLER: '#ffb600'\n    }\n};\n\nconst NAMES = {\n    TYPE_CLASSIFICATION: {\n        CAPABILITY: 'Capability',\n        ENABLER: 'Enabler'\n    }\n};\n\nconst CAPABILITIY = /** @type {const} */ ({\n    TYPE: 'cf.cplace.solution.safe.capability',\n    ATTR: {\n        TITLE: 'cf.cplace.solution.safe.title',\n        TYPE: 'cf.cplace.solution.safe.capabilityType', // TYPE_WORK_ITEM_TYPE\n        STATE: 'cf.cplace.solution.safe.state' // ENUM\n    },\n    ENUMS: {\n        STATUS: {\n            DRAFT: \"#10 - Draft\",\n            FUNNEL: \"#15 - Funnel\",\n            DEFINING: \"#25 - Analyzing\",\n            REDAY: \"#35 - Backlog\",\n            IMPLEMENTING: \"#45 - Implementing\",\n            READYFORTESTING: \"#55 - Validating\",\n            INTEGRATING: \"#65 - Deploying\",\n            READY: \"#75 - Releasing\",\n            DONE: \"#85 - Done\",\n            OBSOLETE: \"#95 - Obsolete\",\n        },\n        TYPE: {\n            ENABLER: 'enabler',\n            CAPABILITY: 'capability',\n        }\n    }\n});\n\n\n\n//--------------------------------------------------------------------------------------//\n//                                       INITIALIZATION                                 //\n//--------------------------------------------------------------------------------------//\nconst items = Array.from(pages);\n\n//--------------------------------------------------------------------------------------//\n//                                       PROCESSING STAGE                               //\n//--------------------------------------------------------------------------------------//\nconst series = createPieSeries(items);\n\nconst chart = {\n    chart: {\n        type: 'pie'\n    },\n    title: {\n        text: null,\n    },\n    legend: {\n        enabled: false,\n    },\n    tooltip: {\n        useHTML: true,\n        followPointer: false,\n    },\n    plotOptions: {\n        series: {\n            borderColor: '#ffffff',\n            borderWidth: 2,\n            stickyTracking: false,\n            tooltip: {\n                headerFormat: '',\n                pointFormat: '<b>{point.name}</b><br>{point.y} ({point.custom.percent:.0f} %)',\n                findNearestPointBy: 'xy'\n            }\n        }\n    },\n    series: [series]\n};\n\n// noinspection JSAnnotator\nreturn chart;\n\n//--------------------------------------------------------------------------------------//\n//                                       BUSINESS FUNCTIONS                             //\n//--------------------------------------------------------------------------------------//\n/**\n * @param {Page<'cf.cplace.solution.safe.capability'>[]} items\n * @return {Object}\n */\nfunction createPieSeries(items) {\n    const classifications = Object.keys(CAPABILITIY.ENUMS.TYPE);\n    const data = classifications.map(classification => {\n        const itemsWithClassification = items.filter(item => {\n            const itemType = item.get(CAPABILITIY.ATTR.TYPE);\n            return itemType && itemType === CAPABILITIY.ENUMS.TYPE[classification];\n        });\n        const percent = Math.min(100, (itemsWithClassification.length === 0 || items.length === 0) ? 0 : (itemsWithClassification.length / items.length * 100));\n        return {\n            name: NAMES.TYPE_CLASSIFICATION[classification],\n            color: COLORS.TYPE_CLASSIFICATION[classification],\n            y: itemsWithClassification.length,\n            custom: {\n                percent: percent\n            }\n        };\n    });\n    return {\n        name: 'Work items by classification',\n        data: data\n    };\n}\n\n/**\n * Log to cplace\n * @param {any} text\n */\nfunction log(text) {\n    if (!DEBUG) {\n        return;\n    }\n    const logOutput = typeof text !== 'string' ? JSON.stringify(text) : text;\n    cplace.log(logOutput);\n}",
    "attributes": null,
    "type_name": null,
    "counter": 28
}
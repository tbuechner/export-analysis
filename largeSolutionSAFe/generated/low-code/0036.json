{
    "type": "custom_attribute",
    "code": "cplace.setLogName('HC: Prioritization Matrix')\n\n/**\n * Define colors for the chart\n */\n const CHART_LABELS = {\n   XAXIS_TITLE: '<- Cost of Delay ->',\n   YAXIS_TITLE: '<- Job Duration ->'\n }\n const CHART_COLORS = {\n  PLOTLINES: '#b5b5b5',\n  DONT_DO_TEXT: '#EC7E80',\n  DO_NEXT_TEXT: '#3A4454',\n  DO_LATER_TEXT: '#313C4E',\n  DO_NOW_TEXT:  '#7EC587',\n  ENABLER: '#E6D32B',\n  FEATURE: '#0CA2D4',\n}\n\nconst FEATURE = {\n    ATTR: {\n      JOB_SIZE: 'cf.cplace.solution.safe.jobSize',\n      BUSINESS_VALUE: 'cf.cplace.solution.safe.businessValue',\n      TIME_CRITICALITY: 'cf.cplace.solution.safe.timeCriticality',\n      RISK_REDUCTION: 'cf.cplace.solution.safe.riskReduction',\n      WSJF: 'cf.cplace.solution.safe.wsjf',\n      STATUS: '',\n      TYPE: 'cf.cplace.solution.safe.featureType'\n    },\n    ENUM_STATUS: {\n\n    },\n    ENUM_TYPE: {\n        ENABLER: 'enabler',\n        FEATURE: 'feature'\n    }\n  }\n\n/*//find colors for types\nlet typeColorConfigurations = new Search()\n  .add(Filters.type('de.visualistik.visualRoadmap.visualRoadmapConfiguration'))\n  .add(Filters.customAttribute('de.visualistik.visualRoadmap.configurationTypeMap').eq('colorMap'))\n  .add(Filters.customAttribute('de.visualistik.visualRoadmap.propertyKey').eq('cf.cplace.solution.safe.type'))\n  .findAllPages();\n\n  cplace.each(typeColorConfigurations, configuration => {\n    let values = configuration.get('de.visualistik.visualRoadmap.propertyKeyValues');\n    let color = configuration.get('de.visualistik.visualRoadmap.displayedValue');\n    if (values.indexOf('#15 - Enabler') > -1){\n      CHART_COLORS.ENABLER = color\n    }\n    if (values.indexOf('#25 - Epic') > -1){\n      CHART_COLORS.EPIC = color\n    }\n  })*/\n\n  const language = cplace.utils().getCurrentUser().getUserLanguage();\n\n/**\n * create serie and data items\n */\nlet serie = createBubbleSerie()\nlet maxBubbleSize = 0;\n\ncplace.each(pages, function (feature) {\n    let z = feature.get(FEATURE.ATTR.WSJF);\n    if (z) {\n        let time = feature.get(FEATURE.ATTR.TIME_CRITICALITY);\n        let business = feature.get(FEATURE.ATTR.BUSINESS_VALUE);\n        let risk = feature.get(FEATURE.ATTR.RISK_REDUCTION);\n        let x = time + business + risk;\n        let jobSize = feature.get(FEATURE.ATTR.JOB_SIZE);\n        let y = switchSize(jobSize);\n        let type = feature.get(FEATURE.ATTR.TYPE);\n    \n        if (z > maxBubbleSize) {\n            maxBubbleSize = z;\n        }\n        serie.data.push(createDataItem(feature, x, y, z, type));\n    }\n});\n\nserie.data.push(createHiddenDataItem(0, 0, maxBubbleSize));\nserie.data.push(createHiddenDataItem(0, 20, maxBubbleSize));\nserie.data.push(createHiddenDataItem(60, 0, maxBubbleSize));\nserie.data.push(createHiddenDataItem(60, 20, maxBubbleSize));\n\nlet xAxisPlotLines = [];\nlet yAxisPlotLines = [];\n\n// Create quadrant divider\nxAxisPlotLines.push(createQuadrantPlotline(30));\nyAxisPlotLines.push(createQuadrantPlotline(10));\n\n// Create labels for each quadrant\nlet label = createLabelPlotline('DON\\'\\T DO', 0, 'left',  CHART_COLORS.DONT_DO_TEXT, -10, 37);\nyAxisPlotLines.push(label);\nlabel = createLabelPlotline('DO NEXT', 0, 'right',  CHART_COLORS.DO_NEXT_TEXT, 0, 37);\nyAxisPlotLines.push(label);\nlabel = createLabelPlotline('DO LATER', 20, 'left',  CHART_COLORS.DO_LATER_TEXT, -10, -25);\nyAxisPlotLines.push(label);\nlabel = createLabelPlotline('DO NOW', 20, 'right',  CHART_COLORS.DO_NOW_TEXT, 0, -25);\nyAxisPlotLines.push(label);\n\n/**\n * BUILD CHART\n */\nlet config = {\n    chart: {\n        type: 'bubble',\n    },\n\n    legend: {\n        enabled: false\n    },\n\n    title: {\n        text: ''\n    },\n\n    xAxis: {\n        title: {\n            text: CHART_LABELS.XAXIS_TITLE\n        },\n        lineWidth: 0,\n        gridLineWidth: 0,\n        labels: {\n            enabled: false\n        },\n        tickWidth: 0,\n        tickInterval: 5,\n        startOnTick: false,\n        endOnTick: false,\n        showLastLabel: true,\n        plotLines: xAxisPlotLines\n    },\n\n    yAxis: {\n        title: {\n            text: CHART_LABELS.YAXIS_TITLE\n        },\n        lineWidth: 0,\n        gridLineWidth: 0,\n        labels: {\n            enabled: false\n        },\n        tickWidth: 0,\n        tickInterval: 5,\n        startOnTick: false,\n        endOnTick: false,\n        plotLines: yAxisPlotLines\n    },\n\n    tooltip: {\n        useHTML: true,\n        headerFormat: '',\n        pointFormat: '{point.tooltip}',\n        style: {\n            pointerEvents: 'auto'\n        }\n    },\n\n    plotOptions: {\n        bubble: {\n            dataLabels: {\n                enabled: false,\n            },\n            minSize: 1,\n            maxSize: 50\n        }\n    },\n    series: [serie]\n};\n\nreturn config;\n\n/**\n * ================\n * HELPER FUNCTIONS\n * ================\n */\n\nfunction createBubbleSerie() {\n    return {\n        data: [],\n        marker: {\n            fillOpacity: 0.13,\n            lineWidth: 0\n        }\n    };\n}\n\nfunction createDataItem(page, x, y, z, type) {\n    let color = getColor(type);\n    let rgba = hexToRGBA(color, 0.1);\n    return {\n        name: page.getName(),\n        url: page.getUrl(),\n        x: x,\n        y: y,\n        z: z,\n        tooltip: getTooltip(page),\n        color: rgba,\n        marker: {\n            lineColor: color,\n        },\n        dataLabels: {\n            enabled: true,\n            format: '{point.name}',\n            style: {\n                textOutline: false,\n                color: color\n            }\n        }\n    }\n}\n\nfunction getTooltip(page) {\n    let tooltip = '<a style=\"font-weight:bold\" href=' + page.getUrl()+ 'target=\"_blank\">' + page.getName() + '</a><br/>'+\n    'Time Criticality: ' + page.get(FEATURE.ATTR.TIME_CRITICALITY) + '<br/>' +\n    'Business Value: ' + page.get(FEATURE.ATTR.BUSINESS_VALUE) + '<br/>' +\n    'Risk Reduction: ' + page.get(FEATURE.ATTR.RISK_REDUCTION) + '<br/>' +\n    'Job Size: ' + page.get(FEATURE.ATTR.JOB_SIZE) + '<br/>' +\n    '<b> WSJF: ' + page.get(FEATURE.ATTR.WSJF) + '<br/>';\n    //'Status: ' + page.get(FEATURE.ATTR.STATUS, language) + '</b>';\n    return tooltip;\n}\n\nfunction createHiddenDataItem(x, y, z) {\n    return {\n        x: x,\n        y: y,\n        z: z,\n        enableMouseTracking: false,\n        marker: {\n            enabled: false\n        }\n    }\n}\n\nfunction createQuadrantPlotline(value) {\n    return {\n        color: CHART_COLORS.PLOTLINES,\n        dashStyle: 'solid',\n        width: 1,\n        value: value,\n        zIndex: 3\n    }\n}\n\nfunction createLabelPlotline(text, value, align, color, xOffset, yOffset) {\n    return {\n        width: 0,\n        value: value,\n        zIndex: 3,\n        label: {\n            text: text,\n            align: align,\n            style: {\n                color: color,\n                fontWeight: 'bold'\n            },\n            x: xOffset,\n            y: yOffset\n        }\n    }\n}\n\nfunction hexToRGBA(hex, alpha) {\n    let r = parseInt(hex.slice(1, 3), 16),\n        g = parseInt(hex.slice(3, 5), 16),\n        b = parseInt(hex.slice(5, 7), 16);\n\n    return \"rgba(\" + r + \", \" + g + \", \" + b + \", \" + alpha + \")\";\n}\n\nfunction switchSize(size){\n    let switchedSize\n    switch (size) {\n        case 20:\n            switchedSize = 1;\n            break;\n        case 13:\n            switchedSize = 8;\n            break;\n        case 8:\n            switchedSize = 13;\n            break;\n        case 5:\n            switchedSize = 16;\n            break;\n        case 3:\n            switchedSize = 18;\n            break;\n        case 2:\n            switchedSize = 19;\n            break;\n        case 1:\n            switchedSize = 20;\n            break;\n    }\n    return switchedSize;\n}\n\nfunction getColor(type){\n    switch (type) {\n        case FEATURE.ENUM_TYPE.ENABLER:\n            return CHART_COLORS.ENABLER;\n        case FEATURE.ENUM_TYPE.FEATURE:\n            return CHART_COLORS.FEATURE\n        default: \n            return '#b5b5b5'\n    }\n}",
    "attributes": null,
    "type_name": null,
    "counter": 36
}
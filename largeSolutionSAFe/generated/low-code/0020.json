{
    "type": "cf.cplace.platform.ChangeListener",
    "code": "/**\n * CHANGE LISTENER\n * @customType cf.cplace.solution.safe.dependency\n * @attribute cf.cplace.solution.safe.plannedStartA, cf.cplace.solution.safe.dateA, cf.cplace.solution.safe.plannedEndB, cf.cplace.solution.safe.dateB, cf.cplace.solution.safe.type\n * @author Christopher W\u00f6lfle <christopher.woelfle@cplace.com>\n * @version 1.0\n * @description Conflict recognition\n */\n\ncplace.setLogName(\"listener_conflictRecognition\");\n\nconst DEBUG = true;\n\nconst DEPENDENCY = /** @type {const} */ ({\n    TYPE: \"cf.cplace.solution.safe.dependency\",\n    ATTR: {\n        A: \"cf.cplace.solution.safe.successor\",\n        START_DATE_A: \"cf.cplace.solution.safe.plannedStartA\",\n        B: \"cf.cplace.solution.safe.predecessor\",\n        END_DATE_B: \"cf.cplace.solution.safe.plannedEndB\",\n        STATUS: \"cf.cplace.solution.safe.status\",\n        TYPE: \"cf.cplace.solution.safe.type\",\n    },\n    ENUM: {\n        TYPE: {\n            BLOCKED_BY: \"blocked by\",\n            RELATED_TO: \"related to\",\n        },\n        STATUS: {\n            IDENTIFIED: \"15 - identified\",\n            CONFLICT: \"25 - conflict\",\n            CONFLICT_RESOLVED: \"35 - resolved\",\n        },\n    },\n});\n\nfunction main() {\n    /** @type {Page<'cf.cplace.solution.safe.dependency'>} */\n    const dependency = changeEvent.getEntity();\n\n    // Check if dependency is blocking\n    if (dependency.get(DEPENDENCY.ATTR.TYPE) !== DEPENDENCY.ENUM.TYPE.BLOCKED_BY) {\n        DEBUG && cplace.log(\"No blocked by\");\n        \n        // If the status is set to \"related to\" and the dependency type is still \"25 - conflict\" we should set the status to \"15 - identified\"\n        if(dependency.get(DEPENDENCY.ATTR.STATUS) !== DEPENDENCY.ENUM.STATUS.CONFLICT){\n            DEBUG && cplace.log(\"No conflict status\");\n            return\n        }\n        cplace.actions().updatePage(dependency, {\n            customAttributes: {\n                [DEPENDENCY.ATTR.STATUS]: DEPENDENCY.ENUM.STATUS.IDENTIFIED,\n            },\n        });\n        dependency.registerAttributeForRefresh(DEPENDENCY.ATTR.STATUS);\n        return;\n    }\n\n    if (!isConflict(dependency)) {\n        DEBUG && cplace.log(\"No conflict\");\n        return;\n    }\n    // Dependency is a conflict\n    cplace.actions().updatePage(dependency, {\n        customAttributes: {\n            [DEPENDENCY.ATTR.STATUS]: DEPENDENCY.ENUM.STATUS.CONFLICT,\n        },\n    });\n    dependency.registerAttributeForRefresh(DEPENDENCY.ATTR.STATUS);\n}\n/**\n * @param {Page<'cf.cplace.solution.safe.dependency'>} dependency\n */\nfunction isConflict(dependency) {\n    const dateA = dependency.get(DEPENDENCY.ATTR.START_DATE_A);\n\n    const dateB = dependency.get(DEPENDENCY.ATTR.END_DATE_B);\n\n    if (dateA && dateB && dateB.isAfter(dateA)) {\n        return true;\n    }\n    return false;\n}\n\n\nmain();",
    "attributes": [
        "cf.cplace.solution.safe.type",
        "cf.cplace.solution.safe.plannedStartA",
        "cf.cplace.solution.safe.plannedEndB"
    ],
    "type_name": "cf.cplace.solution.safe.dependency",
    "counter": 20
}
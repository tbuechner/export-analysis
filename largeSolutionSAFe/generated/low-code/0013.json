{
    "type": "cf.cplace.platform.ChangeListener",
    "code": "/*\n*Changelistener\n*type:Epic\n*triggering attributes jobSize,businessValue,timeCriticality,riskReduction\n*Calculates Weighted shortest job first\n*/\n\ncplace.setLogName('CL: calculate WSJF');\n\nconst CAPABILITY = {\n    TYPE:'cf.cplace.solution.safe.capability',\n    ATTR: {\n        JOB_SIZE: 'cf.cplace.solution.safe.jobSize',\n        BUSINESS_VALUE: 'cf.cplace.solution.safe.businessValue',\n        TIME_CRITICALITY: 'cf.cplace.solution.safe.timeCriticality',\n        RISK_REDUCTION: 'cf.cplace.solution.safe.riskReduction',\n        WSJF: 'cf.cplace.solution.safe.wsjf'\n    }\n}\n\nfunction main(){\nconst page = changeEvent.getEntity();\n\n// get input parameters for calculation\nconst jobSize = page.get(CAPABILITY.ATTR.JOB_SIZE);\nconst businessValue = page.get(CAPABILITY.ATTR.BUSINESS_VALUE);\nconst timeCriticality = page.get(CAPABILITY.ATTR.TIME_CRITICALITY);\nconst riskReduction = page.get(CAPABILITY.ATTR.RISK_REDUCTION);\n\nconst wSJF = calculateWSJF(jobSize, businessValue, timeCriticality, riskReduction);\ncplace.log('wsjf'+wSJF);\nupdatePage(page, {\n    'cf.cplace.solution.safe.wsjf': wSJF\n}\n);\n}\n\nmain();\n\n/*\n*Calculate the weighted shortest job first(wSJF)\n*@template {keyof CplaceTypes} T\n*@param {number} jobSizeOfEpic\n*@param {number} businessValueOfEpic\n*@param {number} timeCriticalityOfEpic\n*@param {number} riskReductionOfEpic\n*@returns {number} wSJF\n*/\nfunction calculateWSJF(jobSizeOfEpic, businessValueOfEpic, timeCriticalityOfEpic, riskReductionOfEpic) {\n    let wSJF;\n    if (!jobSizeOfEpic || !businessValueOfEpic || !timeCriticalityOfEpic || !riskReductionOfEpic) {\n        //no value if any input parameter is missing\n        wSJF = null;\n    }\n    else {\n        // CoD = value + time + risk\n        let costOfDelay = businessValueOfEpic + timeCriticalityOfEpic + riskReductionOfEpic;\n        // WSJF = CoD / size\n        wSJF = (jobSizeOfEpic > 0 ? Math.round(costOfDelay / jobSizeOfEpic * 100) / 100 : null);\n    }\n    return wSJF;\n}\n/*\n*Update the cplace page whenever there is change in attributes\n* @param {Page<T>} page\n* @param {(keyof CplaceTypes[T])[]} attributes\n*/\nfunction updatePage(page, customAttributes) {\n    let key = null;\n    for (key in customAttributes) {\n        if (customAttributes.hasOwnProperty(key)) {\n            page.registerAttributeForRefresh(key)\n        }\n    }\n    return cplace.actions().updatePage(page, {\n        customAttributes: customAttributes,\n    }\n        , {\n            setGeneratedName: true\n        }\n    );\n}",
    "attributes": [
        "cf.cplace.solution.safe.riskReduction",
        "cf.cplace.solution.safe.jobSize",
        "cf.cplace.solution.safe.businessValue",
        "cf.cplace.solution.safe.timeCriticality"
    ],
    "type_name": "cf.cplace.solution.safe.capability",
    "counter": 13
}
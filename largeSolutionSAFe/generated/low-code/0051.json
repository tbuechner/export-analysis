{
    "type": "custom_attribute",
    "code": "/** @type {CplaceTypes['cf.cplace.solution.safe.capability'][\"cf.cplace.solution.safe.state\"]} */\nconst STATE = \"#65 - Deploying\";\n\nconst WIP_MAP = /** @type {const} */ ({\n    \"#15 - Funnel\": \"cf.cplace.solution.safe.funnelWIPLimit\",\n    \"#25 - Analyzing\": \"cf.cplace.solution.safe.analyzingWIPLimit\",\n    \"#35 - Backlog\": \"cf.cplace.solution.safe.backlogWIPLimit\",\n    \"#45 - Implementing\": \"cf.cplace.solution.safe.implementingWIPLimit\",\n    \"#55 - Validating\": \"cf.cplace.solution.safe.validatingWIPLimit\",\n    \"#65 - Deploying\": \"cf.cplace.solution.safe.deployingWIPLimit\",\n    \"#75 - Releasing\": \"cf.cplace.solution.safe.releasingWIPLimit\",\n});\n\nconst SOLUTION = /** @type {const} */({\n    TYPE: \"cf.cplace.solution.safe.solution\",\n});\n\nconst CAPABILITY = /** @type {const} */ ({\n    TYPE: \"cf.cplace.solution.safe.capability\",\n    ATTR: {\n        STATE: \"cf.cplace.solution.safe.state\",\n    },\n});\n\nfunction main() {\n    const solution = getSolution(embeddingPage.getSpaceId());\n    /** @type {number | null} */\n    const wipLimit = solution.get(WIP_MAP[STATE]);\n\n    if (wipLimit === null) {\n        // No WIP limit set\n        return \"-\";\n    }\n\n    const numberOfCapabilities = getNumberOfCapabilitiesInState(solution, STATE);\n\n    return `${numberOfCapabilities.toString(10)}/${wipLimit.toString(10)}`;\n}\n\n/**\n * Get the solution of the embedding workspace\n * @param {string} workspace\n * @returns {Page<'cf.cplace.solution.safe.solution'>}\n */\nfunction getSolution(workspace) {\n    const result = new Search().add(Filters.type(SOLUTION.TYPE)).add(Filters.space(workspace)).findAllPages();\n    return Iterables.getFirst(result, null);\n}\n\n/**\n * Get the number of capabilities of the solution in the provided state\n * @param {Page<'cf.cplace.solution.safe.solution'>} solution\n * @param {CplaceTypes['cf.cplace.solution.safe.capability'][\"cf.cplace.solution.safe.state\"]} state\n */\nfunction getNumberOfCapabilitiesInState(solution, state) {\n    const numberOfCapabilities = new Search()\n        .add(Filters.space(solution.getSpaceId()))\n        .add(Filters.type(CAPABILITY.TYPE))\n        .add(Filters.customAttribute(CAPABILITY.ATTR.STATE).eq(state))\n        .getHitCount();\n    return numberOfCapabilities;\n}\n\n\nreturn main()",
    "attributes": null,
    "type_name": null,
    "counter": 51
}
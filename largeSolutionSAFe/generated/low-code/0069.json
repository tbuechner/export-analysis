{
    "type": "custom_attribute",
    "code": "/**\n * @author Rakshit Midha\n * @description Creates Flow Distribution highchart\n */\n\n//--------------------------------------------------------------------------------------//\n//                                       LOG AND DEBUG                                  //\n//--------------------------------------------------------------------------------------//\ncplace.setLogName('highchart-flow-distribution');\n\n\n//--------------------------------------------------------------------------------------//\n//                                       CONFIGURATION                                  //\n//--------------------------------------------------------------------------------------//\n\nconst CAPABILITY = {\n  TYPE: 'cf.cplace.solution.safe.capability',\n  ATTR: {\n    PROGRAM_INCREMENT: 'cf.cplace.solution.safe.programIncrement',\n    CAPABILITY_TYPE: {\n      INTERNAL_NAME: 'cf.cplace.solution.safe.capabilityType',\n      ENUM_VALUES: {\n        CAPABILITY: 'capability',\n        ENABLER: 'enabler'\n      }\n    }\n  }\n};\n\nconst COLUMN_COLOR1 = '#26285d';\nconst COLUMN_COLOR2 = '#b8d4fa';\n\n//--------------------------------------------------------------------------------------//\n//                                       INITIALIZATION                                 //\n//--------------------------------------------------------------------------------------//\nconst flowDistributionSeries = getFlowDistributionSeries(pages);\nconst categories = getCategories(flowDistributionSeries);\nconst transformedSeries = transformSeries(flowDistributionSeries)\n\nconst config = {\n  title: {\n    text: 'Flow Distribution'\n  },\n  chart: {\n    type: 'column',\n    spacingBottom: 25,\n    spacingTop: 20\n  },\n  legend: {\n    backgroundColor: 'white',\n    borderColor: '#CCC',\n    borderWidth: 1,\n    shadow: false\n  },\n  tooltip: {\n    headerFormat: '<b>{point.x}</b><br/>',\n    pointFormat: '{series.name}: {point.y}'\n  },\n  xAxis: {\n    categories: categories\n  },\n  yAxis: {\n    title: '',\n    labels: {\n      format: '{value}%',\n    },\n    allowDecimals: false,\n    max: 100\n  },\n  plotOptions: {\n    series: {\n      pointWidth: 40,\n    },\n    column: {\n      stacking: 'normal',\n    }\n  },\n  colors: [COLUMN_COLOR1, COLUMN_COLOR2],\n  series: transformedSeries\n}\n\nreturn config;\n\n/**\n * Creates a map of Capability and Enabler count for each Program Iteration\n */\nfunction getFlowDistributionSeries(pages) {\n  let series = [];\n  cplace.each(pages, programIncrement => {\n    const capabilities = programIncrement.getIncomingPages(CAPABILITY.TYPE, CAPABILITY.ATTR.PROGRAM_INCREMENT);\n    let enablerCount = 0;\n    let capabilitiesCount = 0;\n    cplace.each(capabilities, capability => {\n      const capabilityType = capability.get(CAPABILITY.ATTR.CAPABILITY_TYPE.INTERNAL_NAME);\n\n      if (capabilityType === CAPABILITY.ATTR.CAPABILITY_TYPE.ENUM_VALUES.ENABLER) {\n        enablerCount++\n      }\n      if (capabilityType === CAPABILITY.ATTR.CAPABILITY_TYPE.ENUM_VALUES.CAPABILITY) {\n        capabilitiesCount++\n      }\n    });\n\n    let seriesObject = {};\n    seriesObject['name'] = programIncrement.getName();\n    let totalCount = capabilitiesCount + enablerCount;\n    seriesObject['data'] = totalCount ? [(capabilitiesCount / totalCount) * 100, (enablerCount / totalCount) * 100] :\n      [0, 0]\n    series.push(seriesObject);\n  });\n\n  return series.sort(function (a, b) {\n    let x = a['name'];\n    let y = b['name'];\n    return ((x < y) ? -1 : ((x > y) ? 1 : 0));\n  });\n}\n\n/**\n * Computes the name of all Program Iterations\n */\nfunction getCategories(flowDistributionSeries) {\n  let categories = [];\n  flowDistributionSeries.forEach(seriesObject => {\n    categories.push(seriesObject['name']);\n  })\n  return categories;\n}\n\n/**\n * Transforms the Flow Distribution series to count of Capabilities and Enablers\n */\nfunction transformSeries(sortedFlowDistributionSeries) {\n  let series = [{'name': 'Capabilities', data: []}, {'name': 'Enablers', data: []}];\n  sortedFlowDistributionSeries.forEach(seriesObject => {\n    series[0]['data'].push(seriesObject['data'][0]);\n    series[1]['data'].push(seriesObject['data'][1]);\n  });\n  return series;\n}",
    "attributes": null,
    "type_name": null,
    "counter": 69
}
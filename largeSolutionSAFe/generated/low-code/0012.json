{
    "type": "cf.cplace.platform.PageAction",
    "code": "/**\n * LOWCODE BUTTON\n * @customType cf.cplace.solution.safe.solution\n * @author Christopher W\u00f6lfle <christopher.woelfle@cplace.com>\n * @version 1.0\n * @description Set previous current and next pi\n */\n\ncplace.setLogName(\"lowcodebutton_setAsCurrentPi\");\n\nconst PROGRAMM_INCREMENT = /** @type {const} */ ({\n    TYPE: \"cf.cplace.solution.safe.programIncrement\",\n    ATTR: {\n        SOLUTION: \"cf.cplace.solution.safe.solution\",\n        START_DATE: \"cf.cplace.solution.safe.startDate\",\n        END_DATE: \"cf.cplace.solution.safe.endDate\",\n        PERIOD_STATUS: \"cf.cplace.solution.safe.periodStatus\",\n    },\n    ENUM: {\n        PERIOD_STATUS: {\n            DONE: \"#15 - done\",\n            ACTIVE: \"#25 - active\",\n        },\n    },\n});\n\nconst SOLUTION = /** @type {const} */ ({\n    TYPE: \"cf.cplace.solution.safe.solution\",\n});\n\nfunction checkAccess() {\n    return true;\n}\n\nfunction call() {\n    const newState = {\n        \"cf.cplace.solution.safe.previousPi\": {},\n        \"cf.cplace.solution.safe.currentPi\": {},\n        \"cf.cplace.solution.safe.nextPi\": {},\n    };\n\n    /** @type {Page<'cf.cplace.solution.safe.programIncrement'>} */\n    const programIncrement = embeddingPage;\n    const solution = programIncrement.get(PROGRAMM_INCREMENT.ATTR.SOLUTION);\n\n    if (!solution) {\n        return \"No Solution\";\n    }\n    const currentPi = solution.get(\"cf.cplace.solution.safe.currentPi\");\n\n    if (!currentPi) {\n        return \"No current PI\";\n    }\n\n    newState[\"cf.cplace.solution.safe.previousPi\"] = currentPi;\n    newState[\"cf.cplace.solution.safe.currentPi\"] = programIncrement;\n    const nextPi = getNextPi(programIncrement);\n\n    if (!nextPi) {\n        cplace.error(\"No next PI\");\n        return;\n    }\n\n    cplace.log(`Next PI: ${nextPi}`);\n    newState[\"cf.cplace.solution.safe.nextPi\"] = nextPi;\n\n    cplace.actions().updatePage(solution, {\n        customAttributes: newState,\n    });\n\n    cplace.actions().updatePage(currentPi, {\n        customAttributes: {\n            [PROGRAMM_INCREMENT.ATTR.PERIOD_STATUS]: PROGRAMM_INCREMENT.ENUM.PERIOD_STATUS.DONE,\n        },\n    });\n    cplace.actions().updatePage(programIncrement, {\n        customAttributes: {\n            [PROGRAMM_INCREMENT.ATTR.PERIOD_STATUS]: PROGRAMM_INCREMENT.ENUM.PERIOD_STATUS.ACTIVE,\n        },\n    });\n    programIncrement.registerAttributeForRefresh(PROGRAMM_INCREMENT.ATTR.PERIOD_STATUS);\n}\n\n/**\n *\n * @param {Page<'cf.cplace.solution.safe.programIncrement'>} programIncrement\n */\nfunction getNextPi(programIncrement) {\n    const endDate = programIncrement.get(PROGRAMM_INCREMENT.ATTR.END_DATE);\n    if (!endDate) {\n        return null;\n    }\n    const result = new Search()\n        .add(Filters.type(PROGRAMM_INCREMENT.TYPE))\n        .add(Filters.customAttribute(PROGRAMM_INCREMENT.ATTR.START_DATE).gt(endDate))\n        .addCustomFieldSort(PROGRAMM_INCREMENT.ATTR.START_DATE, false)\n        .findAllPages();\n\n    return Iterables.getFirst(result, null);\n}\n\nreturn { checkAccess, call };",
    "attributes": null,
    "type_name": "cf.cplace.solution.safe.programIncrement",
    "counter": 12
}
{
    "type": "custom_attribute",
    "code": "/**\n * HIGHCHART\n * @customType cf.cplace.solution.safe.solution\n * @layout default layout\n * @author Christopher W\u00f6lfle <christopher.woelfle@cplace.com>\n * @version 1.0\n * @description Displays the PI statistics\n */\n\n/**\n * Identifier: highchart-programIncrement-progress\n * Type of chart: multi pie chart\n * Type of search pages: cf.cplace.solution.safe.team, cf.cplace.solution.safe.story\n * Functionality: visualizes different kinds of kpis\n *\n * INSTRUCTIONS TO ADD CHARTS\n * 1. Increase TOTAL_NUMBER_OF_KPIS +1\n * 2. Define Following Values\n *      - CX_TITLE\n *      - CX_ACTUAL\n *      - CX_ACTUAL_PERCENTAGE\n *      - CX_DISPLAY_NUMBER\n *      - CX_DISPLAY_TEXT\n *      - CX_COLOR\n * 3. Create chart\n *      - createChart(CX_TITLE, CX_ACTUAL_PERCENTAGE, CX_DISPLAY_NUMBER, CX_DISPLAY_TEXT, CX_COLOR) {\n *\n *\n * @author Lukas Scheiring (cF)\n * Last edited: 18.08.2022\n */\n\n//--------------------------------------------------------------------------------------//\n//                                       LOG AND DEBUG                                  //\n//--------------------------------------------------------------------------------------//\nconst DEBUG = false;\ncplace.setLogName(\"highchart-programStartPage-statistics\");\n\n//--------------------------------------------------------------------------------------//\n//                                       CONFIGURATION                                  //\n//--------------------------------------------------------------------------------------//\n\n//CHART COLOURS\nconst COLOURS = {\n    TEXT_COLOR: \"#003653\",\n    BACKGROUND_COLOR: \"#ffffff\",\n    GREY: \"gray\",\n    RED: \"#f30000\",\n    DARK_RED: \"#9e0000\",\n    YELLOW: \"#ffc700\",\n    GREEN: \"#5ab500\",\n    BLUE: \"#A6CAD8\",\n};\n\n//CHART SETTINGS\nconst TOTAL_NUMBER_OF_KPIS = 5;\nconst Y_POSITION = \"40%\";\n\n//LANGUAGE SETTINGS\nconst NAMINGS = {\n    de: {\n        CHART_TITLE: \"\",\n    },\n    en: {\n        CHART_TITLE: \"\",\n    },\n};\n\n//PLACEHOLDER\nconst PROGRAM_INCREMENT = /** @type {const} */ ({\n    TYPE: \"cf.cplace.solution.safe.programIncrement\",\n    ATTR: {\n        TITLE: \"cf.cplace.solution.safe.title\",\n        SOLUTION: \"cf.cplace.solution.safe.solution\",\n        START_DATE: \"cf.cplace.solution.safe.startDate\",\n        END_DATE: \"cf.cplace.solution.safe.endDate\",\n        PREDECESSOR: \"cf.cplace.solution.safe.predecessor\",\n        PERIOD_STATUS: \"cf.cplace.solution.safe.periodStatus\",\n        CAPACITY: \"cf.cplace.solution.safe.capacity\"\n    },\n});\n\nconst CAPABILITY = /** @type {const} */ ({\n    TYPE: \"cf.cplace.solution.safe.capability\",\n    ATTR: {\n        ACTUAL_START_DATE: \"cf.cplace.solution.safe.actualStartDate\",\n        ACTUAL_END_DATE: \"cf.cplace.solution.safe.actualEndDate\",\n        PROGRAM_INCREMENT: \"cf.cplace.solution.safe.programIncrement\",\n        STATE: \"cf.cplace.solution.safe.state\"\n    },\n    ENUM: {\n        STATE: {\n            DONE: \"#85 - Done\"\n        }\n    }\n});\n\nconst CONFIDENCE_VOTE = /** @type {const} */ ({\n    TYPE: \"cf.cplace.solution.safe.confidenceVote\",\n    ATTR: {\n        PROGRAMM_INCREMENT: \"cf.cplace.solution.safe.confidenceVote.PI\",\n        RESULT: \"cf.cplace.solution.safe.confidenceVote.result\",\n        ONE_FINGER: \"cf.cplace.solution.safe.confidenceVote.oneFinger\",\n        TWO_FINGERS: \"cf.cplace.solution.safe.confidenceVote.twoFingers\",\n        THREE_FINGERS: \"cf.cplace.solution.safe.confidenceVote.threeFingers\",\n        FOUR_FINGERS: \"cf.cplace.solution.safe.confidenceVote.fourFingers\",\n        FIVE_FINGERS: \"cf.cplace.solution.safe.confidenceVote.fiveFingers\",\n    },\n});\n\n//--------------------------------------------------------------------------------------//\n//                                       INITIALIZATION                                 //\n//--------------------------------------------------------------------------------------//\nlog(\"Start...\");\nlet currentUser = cplace.utils().getCurrentUser();\nconst userLanguage = currentUser.getUserLanguage();\n\n/** @type {Page<'cf.cplace.solution.safe.solution'>} */\nlet solution = embeddingPage;\n\nlet programIncrement = solution.get(\"cf.cplace.solution.safe.currentPi\");\n\nlet chartIndex = 0;\n\n//Container\nlet capabilities = [];\n/** @type {Page<'cf.cplace.solution.safe.confidenceVote'> | undefined} */\nlet confidenceVote;\n\nlet series = [];\nlet yAxis = [];\nlet pane = [];\n\n//Dates\nlet piStartDate = programIncrement.get(PROGRAM_INCREMENT.ATTR.START_DATE).withTimeAtStartOfDay();\nlet piEndDate = programIncrement.get(PROGRAM_INCREMENT.ATTR.END_DATE).withTimeAtStartOfDay();\nlet today = new DateTime().withTimeAtStartOfDay();\n\n//KPIs\nlet totalDaysOfPI = Days.daysBetween(piStartDate, piEndDate).getDays();\nlet passedDaysOfPI = getPassedDays(piStartDate, piEndDate, today, totalDaysOfPI);\n\nlet totalCapacity = programIncrement.get(PROGRAM_INCREMENT.ATTR.CAPACITY);\nlet velocityOfLastPI = 0;\nlet totalCapabilities = 0;\nlet capabilitiesDone = 0;\nlet confidenceVoteAverage = 0;\n\n//--------------------------------------------------------------------------------------//\n//                                       PROCESSING STAGE                               //\n//--------------------------------------------------------------------------------------//\n\n// Group pages\ncplace.each(pages, (page) => {\n    switch (page.getBuiltinFeatureValue(\"customType\")) {\n        case CAPABILITY.TYPE:\n            capabilities.push(page);\n            break;\n        case CONFIDENCE_VOTE.TYPE:\n            confidenceVote = page;\n            break;\n        default:\n            break;\n    }\n});\n\ntotalCapabilities = capabilities.length\nvelocityOfLastPI = calculateVelocityOfLastPi(programIncrement);\nconfidenceVoteAverage = calculateConfidenceVoteAverage(confidenceVote);\n\ncapabilitiesDone = capabilities.filter(\n    (/** @type {Page<'cf.cplace.solution.safe.capability'>} */ c) =>\n        c.get(CAPABILITY.ATTR.STATE) === CAPABILITY.ENUM.STATE.DONE\n).length;\n\n//--------------------------------------------------------------------------------------//\n//                                       KPIs & CHART                                   //\n//--------------------------------------------------------------------------------------//\n\n//KPI 1 - Story Points done\nconst C1_TITLE = \"Done Capabilities Last PI\";\nconst C1_ACTUAL_VALUE = velocityOfLastPI || 0;\nconst C1_DISPLAY_NUMBER = C1_ACTUAL_VALUE;\nconst C1_DISPLAY_TEXT = \"<b>VELOCITY LAST PI</b><br>\";\nconst C1_COLOR = COLOURS.GREEN;\n\ncreateChart(C1_TITLE, C1_ACTUAL_VALUE, C1_DISPLAY_NUMBER, C1_DISPLAY_TEXT, C1_COLOR);\n\n// KPI 2 - Done Capabilities\nconst C2_TITLE = \"Done Capabilities\";\nconst C2_ACTUAL_PERCENTAGE = Math.round((capabilitiesDone / totalCapabilities) * 100) || 0;\nconst C2_DISPLAY_NUMBER = C2_ACTUAL_PERCENTAGE + \"%\";\nconst C2_DISPLAY_TEXT = \"<b>DONE CAPABILITIES</b><br>\" + capabilitiesDone + \"/\" + totalCapabilities;\nconst C2_COLOR = COLOURS.GREEN;\n\ncreateChart(C2_TITLE, C2_ACTUAL_PERCENTAGE, C2_DISPLAY_NUMBER, C2_DISPLAY_TEXT, C2_COLOR);\n\n// KPI 3 - Load vs Capacity\nconst C3_TITLE = \"Load vs. Capacity\";\nconst C3_ACTUAL_PERCENTAGE = (totalCapacity && Math.round((totalCapabilities / totalCapacity) * 100)) || 0;\nconst C3_DISPLAY_NUMBER = C3_ACTUAL_PERCENTAGE + \"%\";\nconst C3_DISPLAY_TEXT = \"<b>LOAD VS. CAPACITY</b><br>\" + totalCapabilities + \"/\" + totalCapacity;\n\nlet c3_color = COLOURS.GREEN;\nif (Math.round((totalCapabilities / totalCapacity) * 100) >= 90) {\n    c3_color = COLOURS.YELLOW;\n    if (Math.round((totalCapabilities / totalCapacity) * 100) > 100) {\n        c3_color = COLOURS.RED;\n    }\n}\n\ncreateChart(C3_TITLE, C3_ACTUAL_PERCENTAGE, C3_DISPLAY_NUMBER, C3_DISPLAY_TEXT, c3_color);\n\n// KPI 4 - passed days\nconst C4_TITLE = \"Days passed\";\nconst C4_ACTUAL_PERCENTAGE = Math.round((passedDaysOfPI / totalDaysOfPI) * 100) || 0;\nconst C4_DISPLAY_NUMBER = C4_ACTUAL_PERCENTAGE + \"%\";\nconst C4_DISPLAY_TEXT = \"<b>DAYS PASSED</b><br>\" + passedDaysOfPI + \"/\" + totalDaysOfPI;\nconst C4_COLOR = COLOURS.GREEN;\n\ncreateChart(C4_TITLE, C4_ACTUAL_PERCENTAGE, C4_DISPLAY_NUMBER, C4_DISPLAY_TEXT, C4_COLOR);\n\n// KPI 5 - Confidence Vote\nconst C5_TITLE = \"Average Confidence Vote\";\nconst C5_ACTUAL_PERCENTAGE = Math.round((confidenceVoteAverage / 5) * 100) || 0;\nconst C5_DISPLAY_NUMBER = confidenceVoteAverage.toFixed(1);\nconst C5_DISPLAY_TEXT = \"<b>AVG. CONFIDENCE VOTE</b><br>\";\nconst C5_COLOR = getConvidenceVoteColors(confidenceVoteAverage);\n\ncreateChart(C5_TITLE, C5_ACTUAL_PERCENTAGE, C5_DISPLAY_NUMBER, C5_DISPLAY_TEXT, C5_COLOR);\n\nlog(\"End...\");\n\n// @ts-ignore\nreturn {\n    chart: {\n        type: \"solidgauge\",\n    },\n\n    title: {\n        text: NAMINGS[userLanguage].CHART_TITLE,\n    },\n    series: series,\n    yAxis: yAxis,\n    pane: pane,\n    tooltip: {\n        enabled: false,\n    },\n    plotOptions: {\n        solidgauge: {\n            enableMouseTracking: false,\n        },\n    },\n};\n\n//--------------------------------------------------------------------------------------//\n//                                       BUSINESS FUNCTIONS                             //\n//--------------------------------------------------------------------------------------//\n\nfunction createChart(title, actualRel, displayNumber, displayText, color) {\n    series.push(getSeriesObject(title, actualRel, displayNumber, chartIndex, color));\n    yAxis.push(getYAxisObject(displayText, chartIndex, 0, 100));\n    pane.push(getPaneObject(getXAxisPosition(chartIndex), Y_POSITION));\n    chartIndex++;\n}\n\nfunction getXAxisPosition(kpiIndex) {\n    return (120 * (kpiIndex + 1)) / (TOTAL_NUMBER_OF_KPIS + 1) - 10 + \"%\";\n}\n\nfunction getPassedDays(piStartDate, piEndDate, today, totalDaysOfPI) {\n    if (today.isBefore(piStartDate)) {\n        return 0;\n    }\n    if (piEndDate.isBefore(today)) {\n        return totalDaysOfPI;\n    }\n    // @ts-ignore\n    return Days.daysBetween(piStartDate, today).getDays();\n}\n\nfunction getSeriesObject(title, actual, label, index, color) {\n    return {\n        name: title,\n        data: [\n            {\n                name: title,\n                color: color,\n                y: actual,\n                innerRadius: \"80%\",\n                radius: \"100%\",\n                dataLabels: {\n                    format: '<span style=\"font-size:24px;font-wight: bold\">' + label + \"</span>\",\n                    borderWidth: 0,\n                    color: COLOURS.GREY,\n                    verticalAlign: \"middle\",\n                    useHTML: true,\n                },\n            },\n        ],\n        yAxis: index,\n    };\n}\n\nfunction getYAxisObject(axisTitle, index, min, max) {\n    return {\n        min: min,\n        max: max,\n        pane: index,\n        title: {\n            text: axisTitle,\n            useHTML: true,\n            y: 110,\n        },\n        labels: {\n            enabled: false,\n        },\n        /*stops: [\n            [0.1, COLOURS.GREEN], // green\n            [0.9, COLOURS.YELLOW], // yellow\n            [0.99, COLOURS.RED] // red\n        ],*/\n        lineWidth: 0,\n        tickWidth: 0,\n        tickAmount: 0,\n        minorTickWidth: 0,\n    };\n}\n\nfunction getPaneObject(xPosition, yPosition) {\n    return {\n        center: [xPosition, yPosition],\n        size: \"50%\",\n        startAngle: 0,\n        endAngle: 360,\n        background: {\n            backgroundColor: \"#EEE\",\n            borderColor: null,\n            innerRadius: \"80%\",\n            outerRadius: \"100%\",\n            shape: \"arc\",\n        },\n    };\n}\n\nfunction getConvidenceVoteColors(value) {\n    if (value <= 2) {\n        return COLOURS.RED;\n    } else if (value <= 3) {\n        return COLOURS.YELLOW;\n    } else {\n        return COLOURS.GREEN;\n    }\n}\n\n/**\n * Calculates the average confidence vote\n * @param {Page<'cf.cplace.solution.safe.confidenceVote'> | undefined | null} confidenceVote\n */\nfunction calculateConfidenceVoteAverage(confidenceVote) {\n    if (!confidenceVote) {\n        return 0;\n    }\n    const oneFinger = confidenceVote.get(CONFIDENCE_VOTE.ATTR.ONE_FINGER);\n    const twoFingers = confidenceVote.get(CONFIDENCE_VOTE.ATTR.TWO_FINGERS);\n    const threeFingers = confidenceVote.get(CONFIDENCE_VOTE.ATTR.THREE_FINGERS);\n    const fourFingers = confidenceVote.get(CONFIDENCE_VOTE.ATTR.FOUR_FINGERS);\n    const fiveFingers = confidenceVote.get(CONFIDENCE_VOTE.ATTR.FIVE_FINGERS);\n    const totalFingers = oneFinger + 2 * twoFingers + 3 * threeFingers + 4 * fourFingers + 5 * fiveFingers;\n    const numberOfConvidenceVotes = oneFinger + twoFingers + threeFingers + fourFingers + fiveFingers;\n\n    return totalFingers / numberOfConvidenceVotes;\n}\n\n/**\n * Calculate the velocity of last PI as number of capabilities that were done in the last PI\n * @param {Page<'cf.cplace.solution.safe.programIncrement'>} currentPi\n */\nfunction calculateVelocityOfLastPi(currentPi) {\n    let lastPI = currentPi.get(PROGRAM_INCREMENT.ATTR.PREDECESSOR);\n    if (!lastPI) {\n        return 0;\n    }\n    const velocity = Array.from(lastPI.getIncomingPages(CAPABILITY.TYPE, CAPABILITY.ATTR.PROGRAM_INCREMENT)).filter(\n        (/** @type {Page<'cf.cplace.solution.safe.capability'>} */ c) =>\n            c.get(CAPABILITY.ATTR.STATE) === CAPABILITY.ENUM.STATE.DONE\n    ).length;\n    return velocity;\n}\n// //--------------------------------------------------------------------------------------//\n// //                                       HELPER FUNCTIONS                               //\n// //--------------------------------------------------------------------------------------//\n\n/**\n * Log to cplace\n * @param {any} text\n */\nfunction log(text) {\n    if (!DEBUG) {\n        return;\n    }\n    let logOutput = typeof text !== \"string\" ? JSON.stringify(text) : text;\n\n    cplace.log(logOutput);\n}",
    "attributes": null,
    "type_name": null,
    "counter": 24
}
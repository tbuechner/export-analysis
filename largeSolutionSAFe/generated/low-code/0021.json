{
    "type": "cf.cplace.platform.ChangeListener",
    "code": "/**\n * CHANGE LISTENER\n * @customType cf.cplace.solution.safe.dependency\n * @attribute cf.cplace.solution.safe.plannedStartA, cf.cplace.solution.safe.dateA, cf.cplace.solution.safe.plannedEndB, cf.cplace.solution.safe.dateB, cf.cplace.solution.safe.type\n * @author Anja Priglmeir\n * @version 1.0\n * @description setting conflict state on capabilities\n */\n\ncplace.setLogName(\"listener_setConflictToCapabilities\");\n\nconst DEBUG = true;\n\nconst DEPENDENCY = /** @type {const} */ ({\n    TYPE: \"cf.cplace.solution.safe.dependency\",\n    ATTR: {\n        A: \"cf.cplace.solution.safe.successor\",\n        START_DATE_A: \"cf.cplace.solution.safe.plannedStartA\",\n        DATE_A: \"cf.cplace.solution.safe.dateA\",\n        B: \"cf.cplace.solution.safe.predecessor\",\n        END_DATE_B: \"cf.cplace.solution.safe.plannedEndB\",\n        DATE_B: \"cf.cplace.solution.safe.dateB\",\n        STATUS: \"cf.cplace.solution.safe.status\",\n        TYPE: \"cf.cplace.solution.safe.type\",\n    },\n    ENUM: {\n        TYPE: {\n            BLOCKED_BY: \"blocked by\",\n            RELATED_TO: \"related to\",\n        },\n        STATUS: {\n            IDENTIFIED: \"15 - identified\",\n            CONFLICT: \"25 - conflict\",\n            CONFLICT_RESOLVED: \"35 - resolved\",\n        },\n    },\n});\n\nconst CAPABILITY = /** @type {const} */ ({\n    TYPE: \"cf.cplace.solution.safe.capability\",\n    ATTR: {\n        CONFLICT_STATE: \"cf.cplace.solution.safe.conflictState\"\n    },\n    ENUM: {\n        CONFLICT: '#25 - conflict'\n    }\n});\n\nfunction main() {\n\n    /** @type {Page<'cf.cplace.solution.safe.dependency'>} */\n    const dependency = changeEvent.getEntity();\n\n    const a = dependency.get(DEPENDENCY.ATTR.A);\n    const b = dependency.get(DEPENDENCY.ATTR.B);\n    const status = dependency.get(DEPENDENCY.ATTR.STATUS);\n    \n    /*//case1: a or b changed; re-calculation only necessary if dependency has conflict\n    if (changeEvent.didChange(DEPENDENCY.ATTR.A) && status === DEPENDENCY.ENUM.STATUS.CONFLICT) {\n        //tbd\n        const old_a = '';\n        checkForConflicts(old_a);\n    }\n\n    if (changeEvent.didChange(DEPENDENCY.ATTR.B) && status === DEPENDENCY.ENUM.STATUS.CONFLICT) {\n        //tbd\n        const old_b = '';\n        checkForConflicts(old_b);\n    }*/\n\n    //case2: dependency status changed\n    if (changeEvent.didChange(DEPENDENCY.ATTR.STATUS)) {\n        if (a.getBuiltinFeatureValue('customType') === CAPABILITY.TYPE) {\n            checkForConflicts(a);\n        }\n\n        if (b.getBuiltinFeatureValue('customType') === CAPABILITY.TYPE) {\n            checkForConflicts(b);\n        }\n    }\n}\n\n/**\n * @param {Page<'cf.cplace.solution.safe.dependency'>} dependency\n */\nfunction checkForConflicts(capability) {\n    const dependenciesAsA = capability.getIncomingPages(DEPENDENCY.TYPE, DEPENDENCY.ATTR.A);\n    const dependenciesAsB = capability.getIncomingPages(DEPENDENCY.TYPE, DEPENDENCY.ATTR.B);\n\n    let conflictValue = null;\n\n    cplace.each(dependenciesAsA, dependency => {\n        const status = dependency.get(DEPENDENCY.ATTR.STATUS);\n        if (status === DEPENDENCY.ENUM.STATUS.CONFLICT) {\n            conflictValue = CAPABILITY.ENUM.CONFLICT;\n        }\n    })\n    cplace.each(dependenciesAsB, dependency => {\n        const status = dependency.get(DEPENDENCY.ATTR.STATUS);\n        if (status === DEPENDENCY.ENUM.STATUS.CONFLICT) {\n            conflictValue = CAPABILITY.ENUM.CONFLICT;\n        }\n    })\n    cplace.actions().updatePage(capability, {\n        customAttributes: {\n            [CAPABILITY.ATTR.CONFLICT_STATE]: conflictValue\n        }\n    })\n\n    capability.registerAttributeForRefresh(CAPABILITY.ATTR.CONFLICT_STATE);\n}\n\n\nmain();",
    "attributes": [
        "cf.cplace.solution.safe.status"
    ],
    "type_name": "cf.cplace.solution.safe.dependency",
    "counter": 21
}